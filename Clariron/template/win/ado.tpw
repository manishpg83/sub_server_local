#EXTENSION(ADOSupport, 'Add include file for ADO support in your application'), APPLICATION,HLP('~TPLADOSupport')
#PREPARE
  #DECLARE(%svADOIncludeList), UNIQUE
  #DECLARE(%svGenericVar)
  #CALL(%SVFCheckForABCClassName,'CConnection')
  #CALL(%SVFCheckForABCClassName,'CRecordSet')
  #CALL(%SVFCheckForABCClassName,'CCommand')
  #CALL(%SVFCheckForABCClassName,'CParameters')
  #CALL(%SVFCheckForABCClassName,'CParameter')
  #CALL(%SVFCheckForABCClassName,'cBrowse')
  #CALL(%SVFCheckForABCClassName,'cCWAdo')
  #CALL(%SVFCheckForABCClassName,'ADOProcCommCaller')
  #CALL(%SVFCheckForABCClassName,'ADOProcCommCalled')
  #CALL(%SVFCheckForABCClassName,'ADOProcessManagerClass')
  #CALL(%SVFCheckForABCClassName,'TableMapper')
#ENDPREPARE
#SHEET
  #TAB('Connections')
    #BOXED,HIDE
      #PROMPT('Default Connection Class: ', @S255), %LsvDefaultConnectionClass, default('CConnection')
      #PROMPT('Default Connectiion string:', @s255), %svDefaultConnectionStr, default(%svGetConnectionFromDCT())
      #prompt('Global Connection String:', @s255), %svGlobalConnectionString
      #prompt('Connection String from UDL:', @s255), %svStringFromUDL
    #ENDBOXED
    #BUTTON('Connections'),MULTI(%svGlobalConnections,%svGlobalConnectionName),INLINE
      #PROMPT('Connection Object:', @s50), %svGlobalConnectionName, DEFAULT('GLOConn'&INSTANCE(%svGlobalConnections))
      #PROMPT('Connection Class: ', FROM(%pClassName)), %svGlobalConnectionClass, DEFAULT(%LsvDefaultConnectionClass),REQ
      #PROMPT('Cursor Location: ', DROP('Dont set|adUseNone|adUseServer|adUseClient|adUseClientBatch')), %svGlobalConnectionCursorLocationEnum
      #boxed('Connection string settings')
        #prompt('Connection string source: ', OPTION), %svConnectStrSource, at(10)
        #prompt('From a Login procedure', radio)
        #prompt('From Dictionary', radio)
        #prompt('UDL File read at runtime', radio)
        #prompt('UDL File picked and read in the template', radio)
        #prompt('Connection Builder', radio)
        #prompt('From a STRING variable', radio)
        #boxed(''), where(%svConnectStrSource = 'From a Login procedure'), clear,at(,120,,)
          #prompt('Login procedure: ', PROCEDURE), %svLoginProcedureName
        #endboxed
        #boxed(''), where(%svConnectStrSource = 'From Dictionary'), clear,at(,120,,)
          #prompt('Dictionary Table:', FILE), %svDCTFile, whenaccepted(%ReadStringFromDCT(%svDCTFile, %svConnectStrFromDCT))
          #prompt('Connection string:', TEXT), %svConnectStrFromDCT
          #button('Save Connection String in UDL file'), at(,,170,)
            #prompt('UDL FileName: ', SAVEDIALOG('Pick UDL file', 'UDL File|*.UDL')), %svSaveUDLFileForDCTString, whenaccepted(%WriteToUDLFile(%svSaveUDLFileForDCTString, %svConnectStrFromDCT))
          #endbutton
        #endboxed
        #boxed(''), where(%svConnectStrSource = 'UDL File read at runtime'), clear,at(,120,,)
          #prompt('UDL FileName:', @s50), %svUDLFileNameAtRuntime
        #endboxed
        #boxed(''), where(%svConnectStrSource = 'UDL File picked and read in the template'), clear,at(,120,,)
          #prompt('UDL Filename: ', OPENDIALOG('Pick UDL file', 'UDL File|*.UDL')), %svUDLFileName, whenaccepted(%ReadStringFromUDL(%svUDLFileName, %svStrUDL))
          #prompt('Connection string:', TEXT), %svStrUDL
          #button('Save Connection String in UDL file'), at(,,170,)
            #prompt('UDL FileName: ', SAVEDIALOG('Pick UDL file', 'UDL File|*.UDL')), %svSaveUDLFileForUDL, whenaccepted(%WriteToUDLFile(%svSaveUDLFileForUDL, %svStrUDL))
          #endbutton
        #endboxed
        #boxed(''), where(%svConnectStrSource = 'Connection Builder'), clear,at(,120,,)
          #prompt('Connection string: ', TEXT), %svStrFromCnBld
          #button('Call Connection Builder'), WHENACCEPTED(%OleDBConnectionBuilder(%svStrFromCnBld)), at(,,170,)
          #endbutton
          #button('Save Connection String in UDL file'), at(,,170,)
            #prompt('UDL FileName: ', SAVEDIALOG('Pick UDL file', 'UDL File|*.UDL')), %svSaveUDLFileForCntBld, whenaccepted(%WriteToUDLFile(%svSaveUDLFileForCntBld, %svStrFromCnBld))
          #endbutton
        #endboxed
        #boxed(''), where(%svConnectStrSource = 'From a STRING variable'), clear,at(,120,,)
          #prompt('String variable name:', EXPR), %svConnectStrFromVar
        #endboxed
        #boxed(''), where(%svConnectStrSource <> 'From a Login procedure')
          #prompt('Call an Error procedure if Connection failed', CHECK), %svGLOErrorOnConnFailed, at(10)
          #enable(%svGLOErrorOnConnFailed = 1), clear
            #prompt('ADO Error Procedure:' , PROCEDURE), %svGLOADOErrorProcedureName
          #endenable
        #endboxed
      #endboxed
    #ENDBUTTON
    #prompt('Use Oracle syntax', CHECK), %svOracleUsed, at(10)
    #enable(%svOracleUsed = 1), clear
      #prompt('TO_DATE format: ', @s22), %svOracleTODATE, default('YYYY-MM-DD HH24:MI:SS')
      #prompt('Associated CW DATE picture: ', PICTURE), %svOracleCWDatePic, default('@d10-')
      #prompt('Associated CW TIME picture: ', PICTURE), %svOracleCWTimePic, default('@T4')
    #endenable
  #ENDTAB
  #TAB('Classes')
    #PREPARE
        #SET(%LsvDefaultConnectionClass,%svDefaultConnectionClass)
    #ENDPREPARE
    #PROMPT('Default Connection Class: ', FROM(%pClassName)), %svDefaultConnectionClass, default('CConnection'),REQ
    #PROMPT('Default Recordset Class: ', FROM(%pClassName)), %svDefaultRecordsetClass, default('CRecordSet'),REQ
    #PROMPT('Default Command Class: ', FROM(%pClassName)), %svdefaultCommandClass, default('CCommand'),REQ
    #PROMPT('Default Parameters Col. Class: ', FROM(%pClassName)), %svdefaultParametersClass, default('CParameters'),REQ
    #PROMPT('Default Parameter Class: ', FROM(%pClassName)), %svDefaultParameterClass, default('CParameter'),REQ
    #PROMPT('Default ADO Browse Class: ', FROM(%pClassName)), %ADOBrowserType, default('cBrowse'),REQ
    #PROMPT('Default DB Interface Class: ', FROM(%pClassName)), %DBInterfaceType, default('cCWAdo'),REQ
    #PROMPT('Default Proc Caller Class: ', FROM(%pClassName)), %svADOProcCallerType, default('ADOProcCommCaller'),REQ
    #PROMPT('Default Proc Called Class: ', FROM(%pClassName)), %svADOProcCalledType, default('ADOProcCommCalled'),REQ
    #PROMPT('Default Process Manager Class: ', FROM(%pClassName)), %svADOProcessManagerClassType, default('ADOProcessManagerClass'),REQ
    #PROMPT('Default Table Mapper Class: ', FROM(%pClassName)), %svADOTableMapperClassType, DEFAULT('TableMapper'),REQ
    #BOXED('ABC Library Files')
       #INSERT(%ABCLibraryPrompts(ABC))
    #ENDBOXED
  #ENDTAB
#ENDSHEET
#AT(%BeforeGenerateApplication),WHERE(%AppTemplateFamily='ABC')
 #CALL(%AddCategory(ABC),'SV')
 #CALL(%SetCategoryLocationFromPrompts(ABC),'SV','SV','')
#ENDAT
#AT(%BeforeGenerateApplication),WHERE(%AppTemplateFamily='CLARION')
  #PDEFINE('_' & 'sv' & 'DllMode_',0)
  #PDEFINE('_' & 'sv' & 'LinkMode_',1)
  #ADD(%CustomGlobalDeclarationIncludes, 'SVCOM.INC')
  #ADD(%CustomGlobalDeclarationIncludes, 'SVBASE.INC')
#ENDAT
#AT(%GlobalData)
#DECLARE(%svConnectionStrVarName)
%NULL
! ADO Connection object Extension template generated data begin ---------------------------------------------------
  #FOR(%svGlobalConnections)
    #SET(%svConnectionStrVarName, %svGlobalConnectionName & '_Str')
%NULL
    #IF(%GlobalExternal = 1)
%[20]svGlobalConnectionName &%svGlobalConnectionClass, EXTERNAL, DLL(DLL_Mode)
%[20]svConnectionStrVarName STRING(512), EXTERNAL, DLL(DLL_Mode)
    #ELSE
%[20]svGlobalConnectionName &%svGlobalConnectionClass
%[20]svConnectionStrVarName STRING(512)
    #ENDIF
    #CALL(%AddModuleIncludeFile(ABC),%svGlobalConnectionClass,%True)
  #ENDFOR
  #IF(%GlobalExternal = 1)
gHr                  HRESULT, EXTERNAL, DLL(DLL_Mode)
COMIniter            CCOMIniter, THREAD, EXTERNAL, DLL(DLL_Mode)
  #ELSE
gHr                  HRESULT
COMIniter            CCOMIniter, THREAD
  #ENDIF
#CALL(%AddModuleIncludeFile(ABC),'CCOMIniter',%True)
%NULL
! ADO Connection object Extension template generated data end ----------------------------------------------------- 
%NULL
#ENDAT
#AT(%BeginningExports)
  #IF(%ProgramExtension = 'DLL' and %GlobalExternal <> 1)
    #FOR(%svGlobalConnections)
#CALL(%AddExpDataItem(ABC), %svGlobalConnectionName)
#CALL(%AddExpDataItem(ABC), %svGlobalConnectionName & '_Str')
    #ENDFOR
#CALL(%AddExpDataItem(ABC), 'gHR')
#CALL(%AddExpDataItem(ABC), 'COMIniter')
  #ENDIF
#ENDAT
#!
#!
#AT(%ProgramSetup)
#DECLARE(%svTmpConnectionStrVarName)
  #IF(%ProgramExtension = 'EXE')
%NULL
! ADO Connection object Extension template generated code begin ---------------------------------------------------
%NULL
IF COMIniter.IsInitialised() #<! Call to CoInitialise
#FOR(%svGlobalConnections)
  #set(%svTmpConnectionStrVarName, %svGlobalConnectionName & '_Str')
  %svGlobalConnectionName &= NEW(%svGlobalConnectionClass) #<! Create a Connection object
  IF NOT (%svGlobalConnectionName &= NULL) THEN #<! If there is a new object created
    gHr = %svGlobalConnectionName.Init() #<! Make a call to Init
    IF gHr <> S_OK  THEN  #<! Something went wrong with the call to Init
      #EMBED(%ADOGlobalConnectionCode,'Global ADO Connections'),%svGlobalConnectionName,'Call to Connection.Init <> S_OK'
    ELSE
      #IF(%svGlobalConnectionCursorLocationEnum <> 'Dont set')
      gHr = %svGlobalConnectionName.PutCursorLocation(%svGlobalConnectionCursorLocationEnum) #<! Set the cursor location
      if gHr <> S_OK THEN #<! Something went wrong with the call to PutCursorLocation
        #EMBED(%ADOGlobalConnectionCode,'Global ADO Connections'),%svGlobalConnectionName,'Call to Connection.PutCursorLocation failed'
      end
      #ENDIF
      #EMBED(%ADOGlobalConnectionCode,'Global ADO Connections'),%svGlobalConnectionName,'Before calling Connection.Connect'
        #CASE(%svConnectStrSource)
        #OF('From a Login procedure')
      IF %svLoginProcedureName(%svGlobalConnectionName) = RequestCancelled
      #IF(%AppTemplateFamily='ABC')
        INIMgr.Kill()
          #IF(%FuzzyMatchingEnabled = 1)
        FuzzyMatcher.Kill()
          #ENDIF
          #IF(%EnableRunTimeTranslator)
        Translator.Kill()
          #ENDIF
      #ENDIF
        return
      END
        #OF('From Dictionary')
      %svTmpConnectionStrVarName = %svConnectStrFromDCT
      #EMBED(%ADOGlobalConnectionCode,'Global ADO Connections'),%svGlobalConnectionName,'After Connection string variable assignment and before calling Connect'
      gHr = %svGlobalConnectionName.Connect(%svTmpConnectionStrVarName) #<! Call the connect method to establish connection with the db
        #OF('From a STRING variable')
      gHR = %svGlobalConnectionName.Connect(%svConnectStrFromVar)
        #OF('UDL File read at runtime')
          #IF(slice(%svUDLFileNameAtRuntime, 1, 1) = '!')
            #DECLARE(%svUDLFileNameVar)
            #SET(%svUDLFileNameVar, slice(%svUDLFileNameAtRuntime, 2, len(%svUDLFileNameAtRuntime)))
      gHr = %svGlobalConnectionName.Connect('File Name=' & clip(%svUDLFileNameVar))
          #ELSE
      gHr = %svGlobalConnectionName.Connect('File Name=%svUDLFileNameAtRuntime')
          #ENDIF
        #OF('UDL File picked and read in the template')
      %svTmpConnectionStrVarName = '%svStrUDL'
      #EMBED(%ADOGlobalConnectionCode,'Global ADO Connections'),%svGlobalConnectionName,'After Connection string variable assignment and before calling Connect'
      gHr = %svGlobalConnectionName.Connect(%svTmpConnectionStrVarName)
        #OF('Connection Builder')
      %svTmpConnectionStrVarName = '%svStrFromCnBld'
      #EMBED(%ADOGlobalConnectionCode,'Global ADO Connections'),%svGlobalConnectionName,'After Connection string variable assignment and before calling Connect'
      gHr = %svGlobalConnectionName.Connect(%svTmpConnectionStrVarName)
        #ENDCASE
      #EMBED(%ADOGlobalConnectionCode,'Global ADO Connections'),%svGlobalConnectionName,'After calling Connection.Connect'
      #IF(%svConnectStrSource <> 'From a Login procedure')
      if gHr <> S_OK
        #EMBED(%ADOGlobalConnectNotOK, 'Global ADO Connections'), %svGlobalConnectionName,'After calling Connection.Connect, value returned <> S_OK '
        #IF(%svGLOErrorOnConnFailed = 1)
        %svGLOADOErrorProcedureName(%svGlobalConnectionName)
        #ENDIF
        #IF(%AppTemplateFamily='ABC')
        INIMgr.Kill()
          #IF(%FuzzyMatchingEnabled = 1)
        FuzzyMatcher.Kill()
          #ENDIF
          #IF(%EnableRunTimeTranslator)
        Translator.Kill()
          #ENDIF
        #ENDIF
        return
      end
      #ENDIF
    END
  #SUSPEND
  #?ELSE
    #EMBED(%ADOGlobalConnectionCode,'Global ADO Connections'),%svGlobalConnectionName,'Creation of Connection object failed'
  #RESUME
  END
#ENDFOR
END
%NULL
! ADO Connection object Extension template generated code end ---------------------------------------------------
%NULL
  #ENDIF
#ENDAT
#!
#!
#AT(%ProgramEnd)
  #IF(%ProgramExtension = 'EXE')
%NULL
! ADO Connection object Extension template generated code begin ---------------------------------------------------
%NULL
IF COMIniter.IsInitialised() THEN
#FOR(%svGlobalConnections)
  IF NOT (%svGlobalConnectionName &= NULL) THEN
    %svGlobalConnectionName.Close()
    DISPOSE(%svGlobalConnectionName)
  END
#ENDFOR
END
%NULL
! ADO Connection object Extension template generated code end ---------------------------------------------------
%NULL
  #ENDIF
#ENDAT
#!*****************************************************************************************
#!*****************************************************************************************
#GROUP(%SVFCheckForABCClassName,%parClassName),AUTO
#IF(CLIP(%parClassName))
  #DECLARE(%yep)
  #SET(%yep,0)
    #CALL(%ReadABCFiles(ABC))              #! Loads ABC Classes if not already loaded
    #FOR(%pClassName)
      #IF(UPPER(SUB(%pClassName,1,LEN(CLIP(%parClassName))))=UPPER(CLIP(%parClassName)))
        #SET(%yep,1)
        #BREAK
      #ENDIF
    #ENDFOR
    #IF (%Yep=0)
      #CALL(%ForceReadABCFiles(ABC))       #! The net Classes might have been suppressed
    #ENDIF
#ENDIF
#!***************************************************************************************
#!
#GROUP(%ReadStringFromDCT, %pFile, *%pConnectStr)
#FIX(%File, %pFile)
#IF(%File)
  #SET(%pConnectStr, %FileOwner)
#ENDIF
#!
#!***************************************************************************************
#GROUP(%svGetConnectionFromDCT)
#DECLARE(%svStr)
#FOR(%File)
  #IF(%FileDriver='ADO')
    #SET(%svStr, %Fileowner)
    #BREAK
  #ENDIF
#ENDFOR
#RETURN(%svStr)
#!***************************************************************************************
#GROUP(%ReadStringFromUDL, %UDLFileName, *%pOutParam)
#DECLARE(%svOutParam)
#SET(%svOutParam, %UDLFileName)
#RUNDLL('ClaADOtp.dll', 'GetStringFromUDL', %svOutParam), release
#SET(%pOutParam, %svOutParam)
#!***************************************************************************************
#GROUP(%WriteToUDLFile, %UDLFileName, %pConnectStr)
#DECLARE(%svStringConstruct)
#SET(%svStringConstruct, %UDLFileName & '+++' & %pConnectStr)
#RUNDLL('ClaADOtp.dll', 'SaveUDLFile', %svStringConstruct), release
#!
#!*****************************************************************************************
#CODE(BrowseRefresh, 'ADO Browse Refresh Method'),DESCRIPTION('ADO Browse Box Refresh Method On ' & %Primary),REQ(BrowseBox),HLP('~TPLCodeADOBrowseRefresh')
%ThisObjectName.Refresh()
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#CODE(BrowseToXML, 'ADO Browse to XML'), REQ(BrowseBox)
#sheet
  #tab('General'), HLP('~TPLCodeADOBrowseToXML')
    #prompt('XML File Name Var:', EXPR), %svXMLFile
  #endtab
#endsheet
if %svDBObject.RS._xSave(%svXMLFile, adPersistXML).
#!----------------------------------------------------------------------------------------------------------------------
#GROUP(%IsInPrimary, %AField),PRESERVE
#!----------------------------------------------------------------------------------------------------------------------
#FIND(%Field, %AField)
#IF(%File = %Primary)
  #RETURN(1)
#ELSE
  #RETURN(0)
#ENDIF
#!----------------------------------------------------------------------------------------------------------------------
#CONTROL(SaveButton,'Write Records to a data file'),PRIMARY('Update Record on Disk',NOKEY),DESCRIPTION('Update ' & %Primary & ' record on disk'),WINDOW,HLP('~TPLControlADOSaveButton'), req(ADOSupport)
  CONTROLS
    BUTTON('OK'),USE(?OK),DEFAULT,REQ
  END
#LOCALDATA
LocalRequest         LONG 
OriginalRequest      LONG
LocalResponse        LONG
ActionMessage        CSTRING(40)
RecordChanged        BYTE,AUTO
#ENDLOCALDATA
#CLASS('Prime Fields','Prime Fields of ' & %Primary & ' record at beginning of Insert')
#BOXED('Save Button Properties')
#BUTTON('ADO/SQL Behavior')
#SHEET
  #TAB('General')
       #BOXED('Connection')
         #PROMPT('Connection object: ', FROM(%svGlobalConnections,,%svGlobalConnectionName)), %svConnectionObject,DEFAULT(%GetFirstGlobalConnection())
         #PROMPT('Use a New Connection', CHECK), %svNewConnection, DEFAULT(0), AT(20)
         #ENABLE(%svNewConnection = 1), CLEAR
           #BUTTON('New Connection')
              #PROMPT('Connection string: ', Text), %svConnectionString
              #BUTTON('Call Connection Builder'),WHENACCEPTED(%OleDBConnectionBuilder(%svConnectionString))
              #ENDBUTTON
           #ENDBUTTON
         #ENDENABLE
       #ENDBOXED
       #PROMPT('Command object:', @s50), %svCommandObject, DEFAULT('cmdUpdate')
       #BOXED('ADO Error Handling')
         #PROMPT('Specify an ADO Error handler Procedure?', CHECK), %svFormCallError, default(0), at(10)
         #ENABLE(%svFormCallError = 1)
           #PROMPT('ADO Error handler Procedure:', PROCEDURE), %svFormErrorProc
         #ENDENABLE
       #ENDBOXED
       #BOXED('Table Mapper')
         #PROMPT('BASETABLENAME is not supported', CHECK), %svFormMapperBlankBaseTable, at(10), default(0)
       #ENDBOXED
  #ENDTAB
  #TAB('Columns')
       #PROMPT('Get records affected?', CHECK), %svGetRecordsAffected, at(10)
       #ENABLE(%svGetRecordsAffected), CLEAR
         #PROMPT('Records affected var: ', FIELD), %svRecordAffectedVar
       #ENDENABLE
       #BOXED('Additional Columns to add in SQL statement')
         #prompt('Include all the fields from the Primary table: ', CHECK), %svAllFieldsFromPrimary, at(10)
         #enable(%svAllFieldsFromPrimary = 0), clear
           #BUTTON('Additional Columns to add in SQL statement'), INLINE, MULTI(%ADOAdditionalColumns, %ADOAdditionalColumn)
             #PROMPT('Column to add: ', FIELD(%Primary)), %ADOAdditionalColumn
           #ENDBUTTON
         #endenable
       #ENDBOXED
  #ENDTAB
  #TAB('SQL')
    #PREPARE
      #DECLARE(%svFORMColumns), MULTI, UNIQUE
      #FOR(%Control)
        #FIND(%Field,%ControlUse)
        #IF(%File)
          #IF(%File = %Primary)
            #ADD(%svFORMColumns, %ControlUse)
          #ENDIF
        #ENDIF
      #ENDFOR
      #if(%svAllFieldsFromPrimary = 1)
        #fix(%File, %Primary)
        #for(%Field)
          #find(%KeyField, %Field)
          #if(%KeyPrimary = 1)
            #cycle
          #else
            #ADD(%svFORMColumns, %Field)
          #endif
        #endfor
      #else
        #FOR(%ADOAdditionalColumns)
          #FIND(%Field,%ADOAdditionalColumn)
          #IF(%File)
            #ADD(%svFORMColumns, %ADOAdditionalColumn)
          #ENDIF
        #ENDFOR
      #endif
    #ENDPREPARE
    #PROMPT('Override Generated SELECT', CHECK), %svFormOverrideSelect, at(10)
    #ENABLE(%svFormOverrideSelect = 1)
      #BUTTON('Regenerate SELECT'), WHENACCEPTED(%SQLGenerateSelect(%svFORMColumns, %svFormSelect))
      #ENDBUTTON
      #PROMPT('SELECT Statement', TEXT), %svFormSelect
    #ENDENABLE
  #ENDTAB
  #TAB('Classes')
         #ENABLE(%svNewConnection = 1), CLEAR
           #PROMPT('Connection class: ', FROM(%pClassName)), %svConnectionClass, DEFAULT(%svDefaultConnectionClass)
         #ENDENABLE
  #ENDTAB
#ENDSHEET
#ENDBUTTON
  #DISPLAY('Allow:')
  #BOXED,SECTION
  #PROMPT('Inserts',CHECK),%InsertAllowed,DEFAULT(%True),AT(50,0,40)
  #PROMPT('Changes',CHECK),%ChangeAllowed,DEFAULT(%True),AT(100,0,40)
  #PROMPT('Deletes',CHECK),%DeleteAllowed,DEFAULT(%True),AT(150,0,40)
  #ENDBOXED
  #ENABLE(%InsertAllowed)
    #BUTTON('Field Priming on Insert'),MULTI(%PrimingFields,%PrimedField & ' = ' & %PrimedValue),AT(10),HLP('~TPLControlSaveButton')
      #PROMPT('Field to Prime:',FIELD),%PrimedField,REQ
      #PROMPT('Initial Value:',@S255),%PrimedValue,REQ
    #ENDBUTTON
  #ENDENABLE
  #BUTTON('Messages and Titles'),HLP('~TPLControlSaveButton_Messages_and_Titles')
    #PROMPT('&View Message:',@S40),%ViewMessage,DEFAULT('View Record')
    #ENABLE(%InsertAllowed)
      #PROMPT('&Insert Message:',@S40),%InsertMessage,DEFAULT('Record will be Added')
    #ENDENABLE
    #ENABLE(%ChangeAllowed)
      #PROMPT('Chan&ge Message:',@S40),%ChangeMessage,DEFAULT('Record will be Changed')
    #ENDENABLE
    #ENABLE(%DeleteAllowed)
      #PROMPT('De&lete Message:',@S40),%DeleteMessage,DEFAULT('Record will be Deleted')
    #ENDENABLE
    #ENABLE(%InsertAllowed OR %ChangeAllowed)
      #PROMPT('On Aborted Add/Change:',DROP('Offer to save changes|Confirm cancel|Cancel without confirming')),%ActionOnCancel,DEFAULT('Offer to save changes')
    #ENDENABLE
    #PROMPT('Field History Key',KEYCODE),%HistoryKey
    #ENABLE(%DeleteAllowed)
      #PROMPT('When called for delete:',DROP('Standard Warning|Display Form|Automatic Delete')),%ActionOnDelete,DEFAULT('Standard Warning')
    #ENDENABLE
    #ENABLE(%InsertAllowed)
      #PROMPT('After successful insert:',DROP('Return to caller|Insert another record')),%AfterGoodInsert,DEFAULT('Return to caller')
      #ENABLE(%AfterGoodInsert = 'Insert another record')
        #PROMPT('Ask the user before adding another record?',CHECK),%AskAfterAdd,DEFAULT(0),AT(10)
      #ENDENABLE
    #ENDENABLE
    #PROMPT('&Location of Message:',DROP('None/Window Control|Title Bar|Status Bar')),%MessageLocation
    #ENABLE(%MessageLocation='Status Bar')
      #PROMPT('Status Bar Section:',@n1),%MessageStatusSection,default(0)
    #ENDENABLE
    #PROMPT('Display Record Identifier on the Title Bar',CHECK),%AppendToTitle,AT(10,,180)
    #ENABLE(%AppendToTitle)
      #PROMPT('Record Identifier:',@S255),%AppendToTitleID,REQ
    #ENDENABLE
  #ENDBUTTON
#ENDBOXED
#ATSTART
  #DECLARE(%HandledFile),UNIQUE
  #DECLARE(%InsertAction,%HandledFile)
  #DECLARE(%FirstHandledValue)
  #DECLARE(%LastHandledValue)
  #DECLARE(%ActionMessageVar)
  #DECLARE(%OKControl)
  #DECLARE(%SavedField),UNIQUE
  #FOR(%Control),WHERE(%ControlInstance = %ActiveTemplateInstance)
    #SET(%OKControl,%Control)
  #ENDFOR
  #FOR(%Control), WHERE(%ControlOriginal = '?ActionMessage')
    #SET(%ActionMessageVar, %ControlUse)
  #ENDFOR
  #DECLARE(%svGenericVar)
  #DECLARE(%svRecordSet)
  #DECLARE(%svTableGrp)
  #DECLARE(%lTableName)
  #DECLARE(%svUpdateColumns), MULTI, UNIQUE
  #PURGE(%svUpdateColumns)
  #FOR(%Control)
    #FIND(%Field,%ControlUse)
    #IF(%File)
      #IF(%File = %Primary)
         #ADD(%svUpdateColumns, %ControlUse)
      #ENDIF
      #ADD(%HandledFile,%File)
    #ENDIF
  #ENDFOR
  #if(%svAllFieldsFromPrimary = 1)
    #fix(%File, %Primary)
    #ADD(%HandledFile,%File)
    #for(%Field)
      #find(%KeyField, %Field)
      #if(%KeyPrimary = 1)
        #cycle
      #else
        #ADD(%svUpdateColumns, %Field)
      #endif
    #endfor
  #else
    #FOR(%ADOAdditionalColumns)
      #FIND(%Field,%ADOAdditionalColumn)
      #IF(%File)
        #ADD(%svUpdateColumns, %ADOAdditionalColumn)
        #ADD(%HandledFile,%File)
      #ENDIF
    #ENDFOR
  #endif
#ENDAT
#!
#AT(%CustomGlobalDeclarations)
#CALL(%AddFilesToDeclare)
#ENDAT
#!
#!
#AT(%DataSection),DESCRIPTION('ADO Form Object Declaration'),PRIORITY(8300)
%Primary_UpdateCalled    %svADOProcCalledType
#CALL(%AddModuleIncludeFile(ABC),%svADOProcCalledType)
#ENDAT
#!
#!
#AT(%DataSection)
#IF(%HistoryKey)
  #FOR(%HandledFile)
  #FIX(%File,%HandledFile)
History::%FilePrefix:Record LIKE(%FilePrefix:Record),THREAD
  #ENDFOR
#ENDIF
#ENDAT
#AT(%DataSection)
#CALL(%AddModuleIncludeFile(ABC),%svDefaultRecordsetClass)
#CALL(%AddModuleIncludeFile(ABC),%svdefaultCommandClass)
#CALL(%AddModuleIncludeFile(ABC),%svConnectionClass)
#CALL(%AddModuleIncludeFile(ABC),%svADOTableMapperClassType)
szSQLStatement  &CSTRING
szWhereClause   CSTRING(1024)
szWherePrimary  CSTRING(1024)
DummySet        &%svDefaultRecordsetClass
anyCol          ANY
ndxLoop         LONG
Found           BYTE
locHr           HRESULT     
%[20]svCommandObject &%svdefaultCommandClass
  #IF(%svNewConnection)
%[20]svConnectionObject &%svConnectionClass
  #ENDIF
  #SET(%svRecordSet, %primary & '_rst')
%[20]svRecordSet &%svDefaultRecordsetClass
%null
ADOMapper          &%svADOTableMapperClassType
  #SET(%svTableGrp, %primary & '_grp')
%[20]svTableGrp GROUP
  #FOR(%svUpdateColumns)
    #FIND(%field, %svUpdateColumns)
      #IF(%Field)
%[22]FieldID %FieldStatement
      #ENDIF
  #ENDFOR
%[20]NULL END
#ENDAT

#AT(%DerivedEmbedAfterStandardWindowOpening)
#INSERT(%ADOFormInitCode)
  #IF(%DeleteAllowed)
IF LocalRequest = DeleteRecord
  IF StandardWarning(Warn:StandardDelete) = Button:OK
     szWhereClause = ADOMapper.GetWHERE(%svRecordSet) & ' AND ' & clip(szWherePrimary)
     #FIX(%File, %Primary)
     #SET(%svGenericVar, %SQLGetTrueFileName())
     szSQLStatement &= new(cstring(len('DELETE FROM %svGenericVar'  & ' WHERE ' & clip(szWherePrimary)) + 1))
     if ~(szSQLStatement &= null)
       szSQLStatement = 'DELETE FROM %svGenericVar'  & ' WHERE ' & clip(szWherePrimary)
     end
      locHr = %svCommandObject.PutCommandText(szSQLStatement)
      IF locHr = S_OK THEN
  #IF(%svGetRecordsAffected)
        DummySet &= %svCommandObject._Execute(%svRecordAffectedVar,locHr)
        IF locHr <> S_OK THEN
       #IF(%svFormCallError = 1)
           %svFormErrorProc(%svConnectionObject)
       #ENDIF
           LocalResponse = RequestCancelled
        ELSE
          IF %svRecordAffectedVar = 0 THEN
            LocalResponse = RequestCancelled
          ELSE
            LocalResponse = RequestCompleted
          END
        END
  #ELSE
        DummySet &= %svCommandObject._Execute(,locHr)
        if locHR <> S_OK
     #IF(%svFormCallError = 1)
          %svFormErrorProc(%svConnectionObject)
     #ENDIF
          localResponse = RequestCancelled
        else
          LocalResponse = RequestCompleted
        end
  #ENDIF
     ELSE
       LocalResponse = RequestCancelled
     END
     dispose(szSQLStatement)
     DISPOSE(DummySet)
     do ProcedureReturn
  else
    LocalResponse = RequestCancelled
    do ProcedureReturn
  end
END
  #ENDIF
#INSERT(%GeneratePrimeFields)
#INSERT(%GenerateActionMessage)
#ENDAT

#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(7750)
#INSERT(%ADOFormInitCode)
#PRIORITY(8050)
#if(upper(%AppTemplateFamily = 'ABC'))
  #IF(%DeleteAllowed)
IF LocalRequest = DeleteRecord
  if SELF.Errors.Throw(msg:ConfirmDelete) = Level:Benign
     szWhereClause = ADOMapper.GetWHERE(%svRecordSet) & ' AND ' & clip(szWherePrimary)
     #FIX(%File, %Primary)
     #SET(%svGenericVar, %SQLGetTrueFileName())
     szSQLStatement &= new(cstring(len('DELETE FROM %svGenericVar'  & ' WHERE ' & clip(szWherePrimary)) + 1))
     if (szSQLStatement &= null)
       return Level:Fatal
     else
       szSQLStatement = 'DELETE FROM %svGenericVar'  & ' WHERE ' & clip(szWherePrimary)
     end
     locHr = %svCommandObject.PutCommandText(szSQLStatement)
     IF locHr = S_OK THEN
  #IF(%svGetRecordsAffected)
        DummySet &= %svCommandObject._Execute(%svRecordAffectedVar,locHr)
        IF locHr <> S_OK THEN
       #IF(%svFormCallError = 1)
           %svFormErrorProc(%svConnectionObject)
       #ENDIF
           LocalResponse = RequestCancelled
        ELSE
          IF %svRecordAffectedVar = 0 THEN
            LocalResponse = RequestCancelled
          ELSE
            LocalResponse = RequestCompleted
          END
        END
  #ELSE
        DummySet &= %svCommandObject._Execute(,locHr)
        if locHR <> S_OK
     #IF(%svFormCallError = 1)
          %svFormErrorProc(%svConnectionObject)
     #ENDIF
          localResponse = RequestCancelled
        else
          LocalResponse = RequestCompleted
        end
  #ENDIF
     ELSE
       LocalResponse = RequestCancelled
     END
     DISPOSE(DummySet)
     SELF.SetResponse(LocalResponse)
     return level:Notify
  else
     SELF.SetResponse(LocalResponse)
     return level:Notify
  end
  if ~(szSQLStatement &= null)
    dispose(szSQLStatement)
  end
END
  #ENDIF
#endif
#INSERT(%GeneratePrimeFields)
#INSERT(%GenerateActionMessage)
#ENDAT
#!
#AT(%EndOfProcedure)
  #IF(upper(%AppTemplateFamily) <> 'ABC')
#INSERT(%ADOFormEndOfProcedure)
  #ENDIF
#ENDAT
#AT(%WindowManagerMethodCodeSection,'Kill','(),BYTE'),PRIORITY(7750)
#INSERT(%ADOFormEndOfProcedure)
#ENDAT
#!
#!
#AT(%WindowManagerMethodCodeSection,'Ask','()'),PRIORITY(2500)
#INSERT(%ADOFormActionFlag)
#ENDAT
#!
#!
#AT(%BeforeAccept)
#INSERT(%ADOFormActionFlag)
#ENDAT
#AT(%ControlEventHandling, %OKControl, 'Accepted')
#declare(%svGenericUpdateStr)
#CALL(%SQLGenerateInsert, %svUpdateColumns,%svGenericVar)
  CASE LocalRequest
  OF InsertRecord
     szSQLStatement &= new(cstring(len(%svGenericVar) + 1))
     if ~(szSQLStatement &= null)
       szSQLStatement = %svGenericVar
     end
  OF ChangeRecord
#CALL(%SQLGenerateUpdate, %svUpdateColumns,%svGenericUpdateStr)
     szSQLStatement &= new(cstring(len(clip(%svGenericUpdateStr)) + len(' WHERE ' & clip(szWherePrimary)) + 1))
     if ~(szSQLStatement &= null)
       szSQLStatement = clip(%svGenericUpdateStr) & ' WHERE ' & clip(szWherePrimary)
     end
  OF DeleteRecord
     szWhereClause = ADOMapper.GetWHERE(%svRecordSet) & ' AND ' & clip(szWherePrimary)
     #FIX(%File, %Primary)
     #SET(%svGenericVar, %SQLGetTrueFileName())
     szSQLStatement &= new(cstring(len('DELETE FROM %svGenericVar'  & ' WHERE ' & clip(szWherePrimary)) + 1))
     if ~(szSQLStatement &= null)
       szSQLStatement = 'DELETE FROM %svGenericVar'  & ' WHERE ' & clip(szWherePrimary)
     end
  END
  #EMBED(%ADOFormBeforePutCommandText, 'Before calling Command method PutCommandText')
  locHr = %svCommandObject.PutCommandText(szSQLStatement)
  IF locHr = S_OK THEN
  #IF(%svGetRecordsAffected)
    DummySet &= %svCommandObject._Execute(%svRecordAffectedVar,locHr)
    IF locHr <> S_OK THEN
       #IF(%svFormCallError = 1)
         %svFormErrorProc(%svConnectionObject)
       #ENDIF
       LocalResponse = RequestCancelled
       #EMBED(%ADOFormExecuteCommandFailed, 'Command object Execute mehod call failed after trying to update the table')
    ELSE
       IF %svRecordAffectedVar = 0 THEN
          LocalResponse = RequestCancelled
       ELSE
          LocalResponse = RequestCompleted
       END
    END
  #ELSE
    DummySet &= %svCommandObject._Execute(,locHr)
    if locHR <> S_OK
     #IF(%svFormCallError = 1)
      %svFormErrorProc(%svConnectionObject)
     #ENDIF
      localResponse = RequestCancelled
      #EMBED(%ADOFormExecuteCommandFailed, 'Command object Execute mehod call failed after trying to update the table')
    else
      LocalResponse = RequestCompleted
    end
  #ENDIF
  ELSE
    LocalResponse = RequestCancelled
  END
  if ~(szSQLStatement &= null)
    dispose(szSQLStatement)
  end
  DISPOSE(DummySet)
  #IF(upper(%AppTemplateFamily) = 'ABC')
  SELF.SetResponse(LocalResponse)
  #ENDIF
  #IF(upper(%AppTemplateFamily) = 'CLARION')
  GlobalResponse = LocalResponse
  #ENDIF
  POST(EVENT:CloseWindow,0)
#ENDAT
#!
#!
#!
#! ---------------------------------------------------------------------------------------------------------------------
#GROUP(%ADOFormActionFlag)
#IF(upper(%AppTemplateFamily) = 'ABC')
  #SUSPEND
#?CASE SELF.Request
    #SUSPEND
#?OF InsertRecord
      #IF(NOT %InsertAllowed)
  GlobalErrors.Throw(Msg:InsertIllegal)
  RETURN
      #ENDIF
    #RESUME
    #SUSPEND
#?OF ChangeRecord
      #IF(NOT %ChangeAllowed)
  GlobalErrors.Throw(Msg:UpdateIllegal)
  RETURN
      #ENDIF
    #RESUME
    #SUSPEND
#?OF DeleteRecord
      #IF(NOT %DeleteAllowed)
  GlobalErrors.Throw(Msg:DeleteIllegal)
  RETURN
      #ENDIF
    #RESUME
#?END
  #RESUME
#ENDIF
#IF(upper(%AppTemplateFamily) = 'CLARION')
  #SUSPEND
#?CASE LocalRequest
    #SUSPEND
#?OF InsertRecord
      #IF(~%InsertAllowed)
  IF StandardWarning(Warn:InsertDisabled)
    DO ProcedureReturn
  END
      #ENDIF
    #RESUME
    #SUSPEND
#?OF ChangeRecord
      #IF(~%ChangeAllowed)
  IF StandardWarning(Warn:UpdateDisabled)
    DO ProcedureReturn
  END
      #ENDIF
    #RESUME
    #SUSPEND
#?OF DeleteRecord
      #IF(~%DeleteAllowed)
  IF StandardWarning(Warn:DeleteDisabled)
    DO ProcedureReturn
  END
      #ENDIF
    #RESUME
#?END
  #RESUME
#ENDIF
#!
#!
#!
#!-------------------------------------------------------------------------------------------------------------------------------------------------
#GROUP(%ADOFormEndOfProcedure)
%Primary_UpdateCalled.SetResponse(LocalResponse)
%Primary_UpdateCalled.Kill()
IF LocalRequest = ChangeRecord THEN #<! ChangeRecord create a dynamic recordset
  IF NOT (%svRecordSet &= NULL) #<! Check if the reference is not null
    %svRecordSet.Close()  #<! Call the close method
    DISPOSE(%svRecordSet) #<! and kill the object
  END
END

IF NOT (%svCommandObject &= NULL) THEN #<! Kill the Command object
  DISPOSE(%svCommandObject)
END

IF NOT (ADOMapper &= NULL) THEN #<! Kill the mapper object
  ADOMapper.Kill()
  DISPOSE(ADOMapper)
END

IF NOT (DummySet &= NULL) THEN #<! Kill the CRecordset object returned by CCommand
  DISPOSE(DummySet)
END

  #IF(%svNewConnection)
IF NOT (%svConnectionObject &= NULL) THEN #<! If a new connection was created, kill it
  DISPOSE(%svConnectionObject)
END
  #ENDIF
#!--------------------------------------------------------------------------------------------------------------------------------------------------
#GROUP(%ADOFormInitCode)
#IF(%svFormOverrideSelect = 1)
  #SET(%svGenericVar, %svFormSelect)
#ELSE
  #CALL(%SQLGenerateSelect, %svUpdateColumns, %svGenericVar)
#ENDIF

%Primary_UpdateCalled.Init()
LocalRequest    = %Primary_UpdateCalled.GetRequest()
OriginalRequest = LocalRequest

#INSERT(%GenerateMapperAddFieldsInfo)
%svCommandObject &= NEW(%svdefaultCommandClass)
IF NOT (%svCommandObject &= NULL)
  locHr = %svCommandObject.Init()
  IF locHr = S_OK
    locHr = %svCommandObject.PutRefActiveConnection(%svConnectionObject)
    IF locHr <> S_OK
      #EMBED(%svCommandPutConnectionFailed, 'Call to CCommand.PutActiveConnection(CConnection) failed')
    END
  #SUSPEND
  #?ELSE
    #EMBED(%svCommandInitFailed, 'call to CCommand.Init() failed')
  #RESUME
  END
  #SUSPEND
#?ELSE
  #EMBED(%svNewCommandFailed, 'new(CCommand) failed')
  #RESUME
END

IF LocalRequest = ChangeRecord OR LocalRequest = DeleteRecord #<! If action is updating or deleting , first locate the row in the db table
  szWhereClause = ''
  szWhereClause = %Primary_UpdateCalled.GetFieldsStatement()
  szWherePrimary = szWhereClause
  szSQLStatement &= new(cstring(len(clip('%svGenericVar') & ' WHERE ' & clip(szWhereClause)) + 1))
  if ~(szSQLStatement &= null)
    szSQLStatement = clip('%svGenericVar') & ' WHERE ' & clip(szWhereClause)
  end
  %svRecordSet &= NEW(%svDefaultRecordsetClass)
  locHr = %svRecordSet.Init()
  locHr = %svRecordSet.Open(szSQLStatement, %svConnectionObject, adUseClient, adLockOptimistic,adCmdText)
  IF locHR = S_OK
    locHr = %svRecordSet.MoveFirst()
    ! Refresh the fields
    ADOMapper.Map(%svRecordSet)
    ! Save the values to see later if the record was changed or not by other user
    ADOMapper.MapRSToGroup(%svRecordSet, %svTableGrp)
  END
  if ~(szSQLStatement &= null)
    dispose(szSQLStatement)
  end
END


#!---------------------------------------------------------------------------------------------------------------------
#GROUP(%GenerateMapperAddFieldsInfo)
#declare(%tmpFieldList), multi, unique
#declare(%tmpAttribute)
#declare(%tmpGroupName)
#declare(%tmpName)
ADOMapper &= NEW(%svADOTableMapperClassType)
#for(%svUpdateColumns)
  #find(%Field, %svUpdateColumns)
  #if(%Field)
    #set(%tmpName, %SQLGetTrueFieldNameNoPrefix(%Field))
    #if(%FieldType = 'DATE' or %FieldType = 'TIME')
      #if(%FieldUserOptions)
        #set(%tmpAttribute, extract(%FieldUserOptions, 'ADOType', 1))
        #if(%tmpAttribute)
          #case(upper(%tmpAttribute))
          #of('ADDBDATE')
          #orof('ADDATE')
          #orof('ADDBTIME')
            #if(%svFormMapperBlankBaseTable = 1)
ADOMapper.AddFieldsInfo('', '%tmpName', %Field, %tmpAttribute)
            #else
ADOMapper.AddFieldsInfo('%File', '%tmpName', %Field, %tmpAttribute)
            #endif
          #of('ADDBTIMESTAMP')
            #find(%tmpFieldList, %tmpName)
            #if(%tmpFieldList)
              #cycle
            #endif
            #set(%tmpGroupName, %File & '.' & %tmpName & '_GROUP')
            #if(%svFormMapperBlankBaseTable = 1)
ADOMapper.AddFieldsInfo('', '%tmpName', %tmpGroupName, adDBTimeStamp)
            #else
ADOMapper.AddFieldsInfo('%File', '%tmpName', %tmpGroupName, adDBTimeStamp)
            #endif
            #add(%tmpFieldList, %tmpName)
            #cycle
          #else
            #find(%tmpFieldList, %tmpName)
            #if(%tmpFieldList)
              #cycle
            #endif
            #set(%tmpGroupName, %File & '.' & %tmpName & '_GROUP')
            #if(%svFormMapperBlankBaseTable = 1)
ADOMapper.AddFieldsInfo('', '%tmpName', %tmpGroupName, adDBTimeStamp)
            #else
ADOMapper.AddFieldsInfo('%File', '%tmpName', %tmpGroupName, adDBTimeStamp)
            #endif
            #add(%tmpFieldList, %tmpName)
            #cycle
          #endcase
        #else
          #if(%svFormMapperBlankBaseTable = 1)
ADOMapper.AddFieldsInfo('', '%FieldID', %Field, 0)
          #else
ADOMapper.AddFieldsInfo('%File', '%FieldID', %Field, 0)
          #endif
        #endif
      #else
        #case(%fieldtype)
        #of('DATE')
          #if(%svFormMapperBlankBaseTable = 1)
ADOMapper.AddFieldsInfo('', '%FieldID', %Field, adDBDate)
          #else
ADOMapper.AddFieldsInfo('%File', '%FieldID', %Field, adDBDate)
          #endif
        #of('TIME')
          #if(%svFormMapperBlankBaseTable = 1)
ADOMapper.AddFieldsInfo('', '%FieldID', %Field, adDBTime)
          #else
ADOMapper.AddFieldsInfo('%File', '%FieldID', %Field, adDBTime)
          #endif
        #else
          #if(%svFormMapperBlankBaseTable = 1)
ADOMapper.AddFieldsInfo('', '%FieldID', %Field, 0)
          #else
ADOMapper.AddFieldsInfo('%File', '%FieldID', %Field, 0)
          #endif
        #endcase
      #endif
    #else
      #if(%svFormMapperBlankBaseTable = 1)
ADOMapper.AddFieldsInfo('', '%FieldID', %Field, 0)
      #else
ADOMapper.AddFieldsInfo('%File', '%FieldID', %Field, 0)
      #endif
    #endif
  #endif
#endfor
#!-------------------------------------------------------------------------------------------------------------------------------------
#GROUP(%GenerateActionMessage)
  #if(%ActionMessageVar <> '')
case LocalRequest
of InsertRecord
  %ActionMessageVar = '%InsertMessage'
of ChangeRecord
  %ActionMessageVar = '%ChangeMessage'
of DeleteRecord
  %ActionMessageVar = '%DeleteMessage'
of ViewRecord
  %ActionMessageVar = '%ViewMessage'
else
  %ActionMessageVar = ''
end
  #endif
#case(%MessageLocation)
#of('Status Bar')
  #if(%MessageStatusSection = '')
    #set(%MessageStatusSection, 0)
  #endif
case LocalRequest
of InsertRecord
  %window{prop:StatusText, %MessageStatusSection} = '%InsertMessage'
of ChangeRecord
  %window{prop:StatusText, %MessageStatusSection} = '%ChangeMessage'
of DeleteRecord
  %window{prop:StatusText, %MessageStatusSection} = '%DeleteMessage'
of ViewRecord
  %window{prop:StatusText, %MessageStatusSection} = '%ViewMessage'
end
#of('Title Bar')
case LocalRequest
of InsertRecord
  %window{prop:Text} = '%InsertMessage'
of ChangeRecord
  %window{prop:Text} = '%ChangeMessage'
of DeleteRecord
  %window{prop:Text} = '%DeleteMessage'
of ViewRecord
  %window{prop:Text} = '%ViewMessage'
end
#endcase
#!
#! --------------------------------------------------------------------------------------------------------------------------------------
#GROUP(%GeneratePrimeFields)
  #if(items(%PrimingFields))
IF LocalRequest = InsertRecord #<! If action is Insert, generate code for priming fields
    #for(%PrimingFields)
  %PrimedField = %PrimedValue
    #endfor
END
  #endif
#!
#!*****************************************************************************************
#!----------------------------------------------------------------
#CONTROL(BrowseUpdateButtons,'Update records from a Browse Box'),DESCRIPTION('Update a Record from Browse Box on ' & %Primary),REQ(BrowseBox),HLP('~TPLControlADOBrowseUpdateButtons')
  CONTROLS
       BUTTON('&Insert'),AT(,,42,12),USE(?Insert)
       BUTTON('&Change'),AT(42,0,42,12),USE(?Change)
       BUTTON('&Delete'),AT(42,0,42,12),USE(?Delete)
  END
#BOXED('Update Buttons')
  #PROMPT('&Update Procedure',PROCEDURE),%UpdateProcedure
  #PROMPT('Procedure Parameters',EXPR),%UpdateProcedureParameters
  #DISPLAY('')
  #PROMPT('Set UNIQUETABLE', CHECK), %SetUniqueTable, at(10), default(1)
  #ENABLE(%SetUniqueTable)
    #PROMPT('UNIQUETABLE value:', FILE), %svUniqueTable, default(%Primary)
  #ENDENABLE
  #DISPLAY('')
  #PROMPT('Generate a Resync statement', CHECK), %svGenerateResyncSQL, at(10), default(1)
  #PROMPT('Call Resync after update', CHECK), %svCallResync, at(10), default(1)
  #ENABLE(%svCallResync)
    #PROMPT('AffectRecords Parameter setting', DROP('adAffectCurrent|adAffectGroup|adAffectAll|adAffectAllChapters')), %svAffectRecordsParam, default('adAffectAll')
    #PROMPT('Resync Values Parameter setting', DROP('adResyncUnderlyingValues|adResyncAllValues')), %svResyncValuesParam, default('adResyncAllValues')
  #ENDENABLE
#ENDBOXED
#ATSTART
  #DECLARE(%svUpdResyncCmd)
  #DECLARE(%svUpdPosInString)
  #DECLARE(%InsertControl)
  #DECLARE(%ChangeControl)
  #DECLARE(%DeleteControl)
  #DECLARE(%BrowseControlTemplate)
  #DECLARE(%InsertText)
  #DECLARE(%ChangeText)
  #DECLARE(%DeleteText)
  #FOR(%Control),WHERE(%ControlInstance = %ActiveTemplateInstance)
    #CASE(%ControlOriginal)
    #OF('?Insert')
      #SET(%InsertControl,%Control)
      #SET(%InsertText,EXTRACT(%ControlStatement,'BUTTON',1))
      #SET(%InsertText,SUB(%InsertText,2,LEN(%InsertText)-2))
    #OF('?Change')
      #SET(%ChangeControl,%Control)
      #SET(%ChangeText,EXTRACT(%ControlStatement,'BUTTON',1))
      #SET(%ChangeText,SUB(%ChangeText,2,LEN(%ChangeText)-2))
    #OF('?Delete')
      #SET(%DeleteControl,%Control)
      #SET(%DeleteText,EXTRACT(%ControlStatement,'BUTTON',1))
      #SET(%DeleteText,SUB(%DeleteText,2,LEN(%DeleteText)-2))
    #ENDCASE
    #SET(%BrowseControlTemplate, %ActiveTemplateParentInstance)
  #ENDFOR
#ENDAT
#!
#!
#AT(%DataSection),DESCRIPTION('ADO Form Object Declaration'),PRIORITY(8300)
%Primary_UpdateCaller    %svADOProcCallerType
#CALL(%AddModuleIncludeFile(ABC),%svADOProcCallerType)
#ENDAT
#AT(%DataSection),DESCRIPTION('ADO PK Group Declaration'), PRIORITY(4300)
#INSERT(%ADOConstructPrimaryGroup,%Primary&'_PKGroup',%Primary,%ADOBrowseControlUniqueKey)
#ENDAT
#!
#!
#AT(%PrepareAlerts)
  #IF(%InsertControl)
%ListControl{Prop:Alrt,255} = InsertKey
  #ENDIF
  #IF(%DeleteControl)
%ListControl{Prop:Alrt,254} = DeleteKey
  #ENDIF
  #IF(%ChangeControl)
%ListControl{Prop:Alrt,253} = CtrlEnter
%ListControl{Prop:Alrt,252} = MouseLeft2
    #FOR(%ADOQueryFields)
      #FIND(%Field, %ADOQueryField)
      #IF(%Field)
        #CASE(%FieldType)
        #OF('DATE')
%Primary_UpdateCaller.DateTimeQ.ColName = upper('%FieldID')
%Primary_UpdateCaller.DateTimeQ.DateTimeID = 'D'
add(%Primary_UpdateCaller.DateTimeQ, %Primary_UpdateCaller.DateTimeQ.ColName)
        #OF('TIME')
%Primary_UpdateCaller.DateTimeQ.ColName = upper('%FieldID')
%Primary_UpdateCaller.DateTimeQ.DateTimeID = 'T'
add(%Primary_UpdateCaller.DateTimeQ, %Primary_UpdateCaller.DateTimeQ.ColName)
        #ENDCASE
      #ENDIF
    #ENDFOR
    #FIX(%File, %Primary)
    #FIX(%Key, %FilePrimaryKey)
    #FOR(%KeyField)
      #FIND(%Field, %KeyField)
      #IF(%Field)
        #IF(%FieldType = 'STRING')
          #IF(%FieldUserOptions)
            #IF(UPPER(extract(%FieldUserOptions, 'ADOType',  1)) = 'ADDBTIMESTAMP')
%Primary_UpdateCaller.DateTimeQ.ColName = upper('%Field')
%Primary_UpdateCaller.DateTimeQ.DateTimeID = 'G'
add(%Primary_UpdateCaller.DateTimeQ, %Primary_UpdateCaller.DateTimeQ.ColName)
            #ENDIF
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDFOR
  #ENDIF
%ThisObjectName.Popup.AddItemMimic('%InsertText', %InsertControl)
%ThisObjectName.Popup.AddItemMimic('%ChangeText', %ChangeControl)
%ThisObjectName.Popup.AddItemMimic('%DeleteText', %DeleteControl)
#ENDAT
#AT(%BrowseBoxDoubleClick)
  #IF(%Control=%ListControl)
    #IF(%ChangeControl)
POST(Event:Accepted,%ChangeControl)
DO %InstancePrefix:FillBuffer
    #ENDIF
  #ENDIF
#ENDAT
#AT(%ControlEventHandling, %ListControl, 'AlertKey')
  #IF(%InsertControl)
if keycode() = InsertKey
  post(EVENT:Accepted, %InsertControl)
end
  #ENDIF
  #IF(%ChangeControl)
  #ENDIF
  #IF(%DeleteControl)
if keycode() = DeleteKey
  post(EVENT:Accepted, %DeleteControl)
end
  #ENDIF
#ENDAT
#AT(%ControlEventHandling, %ListControl, 'PreAlertKey')
cycle
#ENDAT
#AT(%ControlEventHandling,%InsertControl,'Accepted'),PRIORITY(5000),DESCRIPTION('ADO Form Called')
clear(%Primary.Record)
  #for(%Secondary)
clear(%Secondary.Record)
  #endfor
%Primary_UpdateCaller.UpdateFields(%Primary,%ADOBrowseControlUniqueKey)
%Primary_UpdateCaller.SetRequest(InsertRecord)
GlobalRequest = InsertRecord
#IF(%UpdateProcedureParameters)
%UpdateProcedure(%UpdateProcedureParameters)
#ELSE
%UpdateProcedure
#ENDIF
#PRIORITY(5100),DESCRIPTION('Insert Completed')
IF %Primary_UpdateCaller.GetResponse() = RequestCompleted THEN
  %ThisObjectName.Refresh()
#PRIORITY(5200),DESCRIPTION('Insert Cancelled')
ELSE
#PRIORITY(5300)
END
#ENDAT
#AT(%ControlEventHandling,%ChangeControl,'Accepted'),PRIORITY(5000),DESCRIPTION('ADO Form Called')
get(%ListQueue, choice(%ListControl))
%svDBObject.GetRow()
%ThisObjectName.FieldPair.AssignLeftToRight()
%Primary_UpdateCaller.UpdateFields(%Primary,%ADOBrowseControlUniqueKey)
%Primary_UpdateCaller.SetRequest(ChangeRecord)
GlobalRequest = ChangeRecord
#IF(%UpdateProcedureParameters)
%UpdateProcedure(%UpdateProcedureParameters)
#ELSE
%UpdateProcedure
#ENDIF
#PRIORITY(5100),DESCRIPTION('Change Completed')
IF %Primary_UpdateCaller.GetResponse() = RequestCompleted THEN
  #EMBED(%ADOUpdChangeCompletedBeforeRes, 'ADO Change Completed, before calling Resync')
  #IF(%svCallResync)
  if %svDBObject.RS.Resync(%svAffectRecordsParam, %svResyncValuesParam).
  #ENDIF
  %svDBObject.Map()
  %ThisObjectName.FieldPair.AssignRightToLeft()
  %ThisObjectName.SetQueueRecord()
  put(%ListQueue)
  display()
  #EMBED(%ADOUpdChangeCompletedAfterfRes, 'ADO Change Completed, after calling Resync')
#PRIORITY(5200),DESCRIPTION('Change Cancelled')
ELSE
#PRIORITY(5300)
END
#ENDAT
#AT(%ControlEventHandling,%DeleteControl,'Accepted'),PRIORITY(5000),DESCRIPTION('ADO Form Called')
get(%ListQueue, choice(%ListControl))
%ThisObjectName.FieldPair.AssignLeftToRight()
%Primary_UpdateCaller.UpdateFields(%Primary,%ADOBrowseControlUniqueKey)
%Primary_UpdateCaller.SetRequest(DeleteRecord)
GlobalRequest = DeleteRecord
#IF(%UpdateProcedureParameters)
%UpdateProcedure(%UpdateProcedureParameters)
#ELSE
%UpdateProcedure
#ENDIF
#PRIORITY(5100),DESCRIPTION('Delete Completed')
IF %Primary_UpdateCaller.GetResponse() = RequestCompleted THEN
  if %svDBObject.RS.Resync(%svAffectRecordsParam, %svResyncValuesParam).
  delete(%ListQueue)
  display()
#PRIORITY(5200),DESCRIPTION('Delete Cancelled')
ELSE
#PRIORITY(5300)
END
#ENDAT
#AT(%DerivedEmbedAfterStandardWindowOpening)
%Primary_UpdateCaller.Init(%Primary_PKGroup,%svDBObject.RS)
#ENDAT
#AT (%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(8100),DESCRIPTION('ADO FormCom Inited')
%Primary_UpdateCaller.Init(%Primary_PKGroup,%svDBObject.RS)
if SELF.Request <> SelectRecord
  %ThisObjectName.DefaultEquate = %ChangeControl
end
#ENDAT
#AT(%WindowManagerMethodCodeSection,'TakeEvent','(),BYTE'),PRIORITY(2100)
if ~records(%ListQueue)
  disable(%ChangeControl)
  disable(%DeleteControl)
else
  enable(%ChangeControl)
  enable(%DeleteControl)
end
#ENDAT
#AT(%WindowManagerMethodCodeSection, 'Kill', '(),BYTE')
%Primary_UpdateCaller.Kill()
#ENDAT
#AT(%EndOfProcedure)
%Primary_UpdateCaller.Kill()
#ENDAT
#AT(%WindowOtherEventHandling)
  #IF(upper(%appTemplateFamily) = 'CLARION')
if ~records(%ListQueue)
  disable(%ChangeControl)
  disable(%DeleteControl)
else
  enable(%ChangeControl)
  enable(%DeleteControl)
end
  #ENDIF
#ENDAT
#AT(%ADOBrowseCodeSetResync, %BrowseControlTemplate)
#DECLARE(%ADOResyncMultiLine), MULTI
  #IF(%Primary)
    #FIX(%File, %Primary)
    #IF(%FilePrimaryKey)
      #FIX(%Key, %FilePrimaryKey)
      #FOR(%KeyField)
        #find(%Field, %KeyField)
        #set(%svUpdResyncCmd, %svUpdResyncCmd & %Primary & '.' & %FieldID & ' = ? and ')
      #endfor
      #set(%svUpdResyncCmd, slice(%svUpdResyncCmd, 1, len(%svUpdResyncCmd) -4))
      #set(%svUpdPosInString, instring('WHERE', upper(%ADOBrowseControlSQLToFill), 1, 1) )
      #IF(%SetUniqueTable)
%svDBObject.szUniqueTable = '%svUniqueTable'
      #ENDIF
      #IF(%svGenerateResyncSQL)
        #IF(~%svOracleUsed)
          #IF(~%svUpdPosInString)
            #IF(LEN(%ADOBrowseControlSQLToFill) < 512)
%svDBObject.szResyncCmd = '%ADOBrowseControlSQLToFill' & ' WHERE %svUpdResyncCmd'
            #ELSE
              #PURGE(%ADOResyncMultiLine)
              #CALL(%ADOSplitStatement, %ADOBrowseControlSQLToFill, %ADOResyncMultiLine)
              #SELECT(%ADOResyncMultiLine, 1)
%svDBObject.szResyncCmd = '%ADOResyncMultiLine' &|
              #FOR(%ADOResyncMultiLine)
                #IF(INSTANCE(%ADOResyncMultiLine) = 1)
                  #CYCLE
                #ELSE
                  #IF(INSTANCE(%ADOResyncMultiLine) <> ITEMS(%ADOResyncMultiLine))
          '%ADOResyncMultiLine' &|
                  #ELSE
          '%ADOResyncMultiLine' & ' WHERE %svUpdResyncCmd'
                  #ENDIF
                #ENDIF
              #ENDFOR
            #ENDIF
          #ELSE
            #IF(LEN(%ADOBrowseControlSQLToFill) < 512)
%svDBObject.szResyncCmd = '%ADOBrowseControlSQLToFill' & ' AND %svUpdResyncCmd'
            #ELSE
              #PURGE(%ADOResyncMultiLine)
              #CALL(%ADOSplitStatement, %ADOBrowseControlSQLToFill, %ADOResyncMultiLine)
              #SELECT(%ADOResyncMultiLine, 1)
%svDBObject.szResyncCmd = '%ADOResyncMultiLine' &|
              #FOR(%ADOResyncMultiLine)
                #IF(INSTANCE(%ADOResyncMultiLine) = 1)
                  #CYCLE
                #ELSE
                  #IF(INSTANCE(%ADOResyncMultiLine) <> ITEMS(%ADOResyncMultiLine))
          '%ADOResyncMultiLine' &|
                  #ELSE
          '%ADOResyncMultiLine' & ' AND %svUpdResyncCmd'
                  #ENDIF
                #ENDIF
              #ENDFOR
            #ENDIF
          #ENDIF
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF
#ENDAT
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!----------------------------------------------------------------
#CONTROL(BrowseProcessButton,'Process records from a Browse Box'),DESCRIPTION('Process Records from Browse Box on ' & %Primary),REQ(BrowseBox),HLP('~TPLControlADOBrowseProcessButton')
  CONTROLS
       BUTTON('&Process'),AT(,,42,12),USE(?Process)
  END
#BOXED('Update Buttons')
  #PROMPT('&Process Procedure',PROCEDURE),%ProcessProcedure
  #PROMPT('Procedure Parameters',@S255),%ProcessProcedureParameters
#ENDBOXED
#ATSTART
  #DECLARE(%ProcessControl)
  #DECLARE(%ProcessText)
  #FOR(%Control),WHERE(%ControlInstance = %ActiveTemplateInstance)
    #IF(%ControlOriginal='?Process')
      #SET(%ProcessControl,%Control)
      #SET(%ProcessText,EXTRACT(%ControlStatement,'BUTTON',1))
      #SET(%ProcessText,SUB(%ProcessText,2,LEN(%ProcessText)-2))
    #ENDIF
  #ENDFOR
#ENDAT
#!
#!
#AT(%DataSection),DESCRIPTION('ADO Form Object Declaration '&%ActiveTemplateInstance),PRIORITY(8300)
%Primary_Caller_%ActiveTemplateInstance    %svADOProcCallerType
#CALL(%AddModuleIncludeFile(ABC),%svADOProcCallerType)
#ENDAT
#AT(%DataSection),DESCRIPTION('ADO PK Group Declaration '&%ActiveTemplateInstance), PRIORITY(4300)
#INSERT(%ADOConstructPrimaryGroup,%Primary&'_PKGroup'&%ActiveTemplateInstance,%Primary,%ADOBrowseControlUniqueKey)
#ENDAT
#!
#!
#AT(%ControlEventHandling,%ProcessControl,'Accepted'),PRIORITY(5000),DESCRIPTION('ADO Process Called')
%Primary_Caller_%ActiveTemplateInstance.UpdateFields(%Primary,%ADOBrowseControlUniqueKey)
%Primary_Caller_%ActiveTemplateInstance.SetRequest(ProcessRecord)
#IF(%ProcessProcedureParameters)
%ProcessProcedure(%ProcessProcedureParameters)
#ELSE
%ProcessProcedure
#ENDIF
#PRIORITY(5100),DESCRIPTION('Process Completed')
IF %Primary_Caller_%ActiveTemplateInstance.GetResponse() = RequestCompleted THEN
#PRIORITY(5200),DESCRIPTION('Process Cancelled')
ELSE
#PRIORITY(5300)
END
#ENDAT
#AT(%DerivedEmbedAfterStandardWindowOpening)
%Primary_Caller_%ActiveTemplateInstance.Init(%Primary_PKGroup%ActiveTemplateInstance,%svDBObject.RS)
#ENDAT
#AT (%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(8080),DESCRIPTION('ADO ProcessCom Inited '&%ActiveTemplateInstance), LAST
%Primary_Caller_%ActiveTemplateInstance.Init(%Primary_PKGroup%ActiveTemplateInstance,%svDBObject.RS)
#ENDAT
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#CONTROL(BrowseBoxSelectButton, 'SoftVelocity ADO Browse Box Select button'), REQ(BrowseBox),DESCRIPTION('Select a record in a BrowseBox'),HLP('~TPLControlADOBrowseBoxSelectButton')
  CONTROLS
    BUTTON('&Select'),AT(,,42,12),USE(?Select)
  END
#BOXED('Select Button')
  #PROMPT('Hide the Select button when not applicable',CHECK),%ADOHideIfDisabled,AT(10,,150)
  #PROMPT('&Allow Select via Popup',CHECK),%ADOSelectViaPopup,DEFAULT(1),AT(10,,150)
#ENDBOXED
#ATSTART
  #DECLARE(%SelectControl)
  #DECLARE(%SelectText)
  #FOR(%Control),WHERE(%ControlInstance = %ActiveTemplateInstance)
    #IF(%ControlOriginal='?Select')
      #SET(%SelectControl,%Control)
      #SET(%SelectText,EXTRACT(%ControlStatement,'BUTTON',1))
      #SET(%SelectText,SUB(%SelectText,2,LEN(%SelectText)-2))
    #ENDIF
  #ENDFOR
#ENDAT
#AT(%ControlEventHandling,%SelectControl,'Accepted'),PRIORITY(5000),DESCRIPTION('Select Button accepted')
get(%ListQueue, choice(%ListControl))
%ThisObjectName.FieldPair.AssignLeftToRight()
  #if(upper(%appTemplateFamily) = 'ABC')
self.SetResponse(RequestCompleted)
  #else
LocalResponse = RequestCompleted
post(EVENT:CloseWindow)
  #endif
#ENDAT
#AT(%DerivedEmbedAfterStandardWindowOpening)
  #IF(%ADOHideIfDisabled = 1)
%SelectControl{prop:hide} = choose(LocalRequest <> SelectRecord, 1, 0)
  #ENDIF
  #IF(%ADOHideIfDisabled = 1)
    #IF(%ADOSelectViaPopup = 1)
if LocalRequest = SelectRecord
  %ThisObjectName.Popup.AddItemMimic('%SelectText', %SelectControl)
end
    #ENDIF
  #ELSE
    #IF(%ADOSelectViaPopup = 1)
%ThisObjectName.Popup.AddItemMimic('%SelectText', %SelectControl)
    #ENDIF
  #ENDIF
#ENDAT
#!
#!
#AT (%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(8000),DESCRIPTION('ADO Select button state setting')
  #IF(%ADOHideIfDisabled = 1)
%SelectControl{prop:hide} = choose(self.Request <> SelectRecord, 1, 0)
  #ENDIF
if SELF.Request = SelectRecord
  %ThisObjectName.DefaultEquate = %SelectControl
end
  #IF(%ADOHideIfDisabled = 1)
    #IF(%ADOSelectViaPopup = 1)
if self.Request = SelectRecord
  %ThisObjectName.Popup.AddItemMimic('%SelectText', %SelectControl)
end
    #ENDIF
  #ELSE
    #IF(%ADOSelectViaPopup = 1)
%ThisObjectName.Popup.AddItemMimic('%SelectText', %SelectControl)
    #ENDIF
  #ENDIF
#ENDAT
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#!*****************************************************************************************
#CONTROL(BrowseBox, 'SoftVelocity ADO Browse Box'), PRIMARY('Primary table of the browse('&%ThisObjectName&')'), MULTI,REQ(ADOSupport),DESCRIPTION('ADO Browse Box('&%ThisObjectName&')'),HLP('~TPLControlADOBrowseBox')
  CONTROLS
    LIST,AT(,,150,100),USE(?ADOList),IMM,FROM(Queue:ADOBrowse),MSG('Browsing Records')
  END
#BUTTON('ADO &Browse Box Behavior'),AT(10,,180)
  #SHEET,HSCROLL
     #TAB('General')
       #PREPARE
          #FIND(%ControlInstance,%ActiveTemplateInstance,%Control)
          #IF(NOT VAREXISTS(%ValueConstruct))
            #DECLARE(%ValueConstruct)
          #ENDIF      
          #IF(~%ADOBrowseControlUniqueKey)
            #SET(%ADOBrowseControlUniqueKey,%SearchUniqueKey(%Primary))
          #ENDIF
          #CALL(%LoadQueryFields)
          #CALL(%LoadOBYFields)
          #CALL(%AddSortFieldsToHotField)
          #IF(%ADOBrowseControlManageRepColumnsName)
              #CALL(%ADOGenerateUniqueID)
          #ENDIF
          #IF(~%svDBObject or %svDBObject = 'Set')
             #SET(%svDBObject, %primary & 'Set')
          #ENDIF
       #ENDPREPARE
       #BOXED,AT(0,0,0,0),HIDE
           #BUTTON('List and hotfields'),MULTI(%OBYFields,%OBYFieldInstance&'-'&%OBYField),INLINE
             #PROMPT('OBYField=',FIELD),%OBYField
             #PROMPT('OBYFieldInstance=',@N7),%OBYFieldInstance
           #ENDBUTTON
           #BUTTON('Posible OrderBy'),MULTI(%OBYFieldSort,%OBYFieldSortCol)
             #PROMPT('Initial sort column: ',FROM(%OBYFields,%OBYFieldNotUsed(),%OBYField)), %OBYFieldSortCol
             #PROMPT('Direction: ',DROP('ASC|DESC')), %OBYFieldSortDirection
           #ENDBUTTON
           #BUTTON('All the Query fields'),MULTI(%ADOQueryFields,%ADOQueryField)
             #PROMPT('Field:',FIELD),%ADOQueryField
           #ENDBUTTON
           #BUTTON('Non populated fields'),MULTI(%ADONonQueryFields,%ADONonQueryField)
             #PROMPT('Field:',FIELD),%ADONonQueryField
           #ENDBUTTON
           #INSERT(%OOPPrompts(ABC))
           #PROMPT('LocalParentCallValid',@s1),%LocalParentCallValid
           #PROMPT('ADOBrowseControl',CONTROL),%ADOBrowseControl
           #PROMPT('ADOBrowseControlPrimary',FILE),%ADOBrowseControlPrimary
           #PROMPT('TmpControl',CONTROL),%TmpControl
       #ENDBOXED
       #DISPLAY('')
       #PROMPT('&Loading Method',DROP('Page|Table')),%LoadMethod,DEFAULT('Page')
       #PROMPT('Limit the result set rows number', CHECK), %svRSInQueue, DEFAULT(0), at(10)
       #ENABLE(%svRSInQueue = 1)
         #PROMPT('Maximum rows: ', @n4), %svADORowsToRead, default(500)
       #ENDENABLE
       #PROMPT('Generate initial call to Refresh', CHECK), %svBrowseGenerateRefresh, default(1), at(10)
       #PROMPT('Copy generated query to clipboard', CHECK), %svBrowseCopyToClipboard, default(0), at(10)
       #BOXED('Connection')
         #PROMPT('Connection object: ', FROM(%svGlobalConnections,,%svGlobalConnectionName)), %svConnectionObject,DEFAULT(%GetFirstGlobalConnection())
         #PROMPT('Use a New Connection', CHECK), %svNewConnection, DEFAULT(0), AT(20)
         #ENABLE(%svNewConnection = 1), CLEAR
           #BUTTON('New Connection')
              #PROMPT('Connection Object:', @s50), %svNewConnectionObject, DEFAULT('LOCConn')
              #BUTTON('Connection String Settings'),AT(,,100)
                #! #PROMPT('Connection string: ', Text), %svConnectionString
                #! #BUTTON('Call Connection Builder'),WHENACCEPTED(%OleDBConnectionBuilder(%svConnectionString))
                #! #ENDBUTTON
                #boxed('Connection string settings')
                  #prompt('Connection string source: ', OPTION), %svConnectStrSource, at(10)
                  #prompt('From a Login procedure', radio)
                  #prompt('From Dictionary', radio)
                  #prompt('UDL File read at runtime', radio)
                  #prompt('UDL File picked and read in the template', radio)
                  #prompt('Connection Builder', radio)
                  #prompt('From a STRING variable', radio)
                  #boxed(''), where(%svConnectStrSource = 'From a Login procedure'), clear,at(,85,,)
                    #prompt('Login procedure: ', PROCEDURE), %svLoginProcedureName
                  #endboxed
                  #boxed(''), where(%svConnectStrSource = 'From Dictionary'), clear,at(,85,,)
                    #prompt('Dictionary Table:', FILE), %svDCTFile, whenaccepted(%ReadStringFromDCT(%svDCTFile, %svConnectStrFromDCT))
                    #prompt('Connection string:', TEXT), %svConnectStrFromDCT
                    #button('Save Connection String in UDL file'), at(,,170,)
                      #prompt('UDL FileName: ', SAVEDIALOG('Pick UDL file', 'UDL File|*.UDL')), %svSaveUDLFileForDCTString, whenaccepted(%WriteToUDLFile(%svSaveUDLFileForDCTString, %svConnectStrFromDCT))
                    #endbutton
                  #endboxed
                  #boxed(''), where(%svConnectStrSource = 'UDL File read at runtime'), clear,at(,85,,)
                    #prompt('UDL FileName:', @s50), %svUDLFileNameAtRuntime
                  #endboxed
                  #boxed(''), where(%svConnectStrSource = 'UDL File picked and read in the template'), clear,at(,85,,)
                    #prompt('UDL Filename: ', OPENDIALOG('Pick UDL file', 'UDL File|*.UDL')), %svUDLFileName, whenaccepted(%ReadStringFromUDL(%svUDLFileName, %svStrUDL))
                    #prompt('Connection string:', TEXT), %svStrUDL
                    #button('Save Connection String in UDL file'), at(,,170,)
                      #prompt('UDL FileName: ', SAVEDIALOG('Pick UDL file', 'UDL File|*.UDL')), %svSaveUDLFileForUDL, whenaccepted(%WriteToUDLFile(%svSaveUDLFileForUDL, %svStrUDL))
                    #endbutton
                  #endboxed
                  #boxed(''), where(%svConnectStrSource = 'Connection Builder'), clear,at(,85,,)
                    #prompt('Connection string: ', TEXT), %svStrFromCnBld
                    #button('Call Connection Builder'), WHENACCEPTED(%OleDBConnectionBuilder(%svStrFromCnBld)), at(,,170,)
                    #endbutton
                    #button('Save Connection String in UDL file'), at(,,170,)
                      #prompt('UDL FileName: ', SAVEDIALOG('Pick UDL file', 'UDL File|*.UDL')), %svSaveUDLFileForCntBld, whenaccepted(%WriteToUDLFile(%svSaveUDLFileForCntBld, %svStrFromCnBld))
                    #endbutton
                  #endboxed
                  #boxed(''), where(%svConnectStrSource = 'From a STRING variable'), clear,at(,85,,)
                    #prompt('String variable name:', EXPR), %svConnectStrFromVar
                  #endboxed
                  #boxed(''), where(%svConnectStrSource <> 'From a Login procedure')
                    #prompt('Call an Error procedure if Connection failed', CHECK), %svGLOErrorOnConnFailed, at(10)
                    #enable(%svGLOErrorOnConnFailed = 1), clear
                      #prompt('ADO Error Procedure:' , PROCEDURE), %svGLOADOErrorProcedureName
                    #endenable
                  #endboxed
                #endboxed
              #ENDBUTTON
           #ENDBUTTON
         #ENDENABLE
       #ENDBOXED
       #BOXED('DB Interface')
         #PROMPT('DB Interface object:', @s50), %svDBObject,REQ,DEFAULT('Set')
         #BUTTON('CRecordset Attributes')
           #PROMPT('Cursor Location: ', DROP('adUseNone|adUseServer|adUseClient|adUseClientBatch')), %svADOCursorLocationEnum, default('adUseClient')
           #PROMPT('Cursor Type: ', DROP('adOpenUnspecified|adOpenForwardOnly|adOpenKeyset|adOpenDynamic|adOpenStatic')), %svADOCursorType, default('adOpenStatic')
           #PROMPT('Lock type: ', DROP('adLockUnspecified|adLockReadOnly|adLockPessimistic|adLockOptimistic|adLockBatchOptimistic')), %svADOLockType, default('adLockOptimistic')
           #PROMPT('Command Type: ', DROP('adCmdUnspecified|adCmdUnknown|adCmdText|adCmdTable|adCmdStoredProc|adCmdFile|adCmdTableDirect')), %svCommandTypeEnum, default('adCmdText')
           #PROMPT('Execute Options', DROP('(None)|adAsyncExecute|adAsyncFetch|adAsyncFetchNonBlocking|adExecuteNoRecords|adOptionUnspecified')), %svExecuteOption, DEFAULT('(None)')
           #ENABLE(%svCommandTypeEnum = 'adCmdTable'), CLEAR
           #BOXED('Select a table')
             #PROMPT('Table: ', FILE), %svADOTable, DEFAULT(%Primary)
           #ENDBOXED
           #ENDENABLE
         #ENDBUTTON
       #ENDBOXED
       #BOXED('Table Mapper')
         #PROMPT('BASETABLENAME is not supported', CHECK), %svMapperBlankBaseTable, at(10), default(0)
       #ENDBOXED
    #ENDTAB
    #TAB('&Data Columns\Hot Fields')
       #DISPLAY('')
       #PROMPT('Automatically manage repeated column names?',CHECK),%ADOBrowseControlManageRepColumnsName,AT(6),DEFAULT(%True)
       #BOXED('Data Columns')
          #BUTTON('Data Columns'),FROM(%ADOQueryFields,%ADOQueryField),INLINE
              #BOXED,HIDE
                 #PROMPT('Can be a HotField:',CHECK),%ADOQueryFieldHotField,DEFAULT(1)
              #ENDBOXED
              #ENABLE(%False)
                 #PROMPT('Query Field:',@S100),%ADOQueryField
              #ENDENABLE
              #PROMPT('Column is a: ', DROP(CHOOSE(%ADOQueryFieldHotField=1,'Expression|HotField','Table Column|Expression'))), %ADOQueryFieldType, default('Table Column')
              #ENABLE(%ADOQueryFieldType = 'Table Column' AND NOT %ADOQueryFieldHotField),CLEAR
                 #PROMPT('Use AS?', check), %ADOQueryFieldAS, DEFAULT(0)
              #ENDENABLE
              #BOXED,SECTION
                 #BOXED,WHERE(%ADOQueryFieldAS OR (%ADOQueryFieldType = 'Expression' OR (%ADOQueryFieldHotField AND %ADOQueryFieldType = 'Table Column')))
                      #PROMPT('', @s250), %ADOQueryFieldASLabel,REQ,AT(100,0)
                      #VALIDATE(%ASFieldNotPopulated(%ADOQueryFieldASLabel,%ADOQueryFields)=1,'The Field AS value is already in use')
                      #DISPLAY('AS:'),AT(10,0)
                 #ENDBOXED
                 #BOXED,WHERE((%ADOQueryFieldType <> 'HotField') AND NOT (%ADOQueryFieldAS OR (%ADOQueryFieldType = 'Expression' OR (%ADOQueryFieldHotField AND %ADOQueryFieldType = 'Table Column'))))
                      #PROMPT('', @s250), %ADOQueryFieldID,AT(100,0),PROP(PROP:READONLY,%True)
                      #DISPLAY('Unique Field ID:'),AT(10,0)
                 #ENDBOXED
              #ENDBOXED
              #ENABLE(%ADOQueryFieldType = 'Expression')
                 #PROMPT('Expression: ', @s250), %ADOQueryFieldExpression,REQ
                 #BOXED,WHERE(%False)
                   #PROMPT('Expression data type: ', DROP('LONG|STRING|DATETIME')), %ADOQueryFieldExpressionType,REQ
                 #ENDBOXED
              #ENDENABLE
              #PROMPT('This column cannot be hidden.', CHECK), %CannotBeHidden, AT(10)
              #PROMPT('This column cannot be sorted.', CHECK), %CannotBeSorted, AT(10)
              #PROMPT('This column is the Default sort column.', CHECK), %IsDefaultSort, AT(10), WHENACCEPTED(%AdoClearOtherSort(%ADOQueryField, %IsDefaultSort))
          #ENDBUTTON
       #ENDBOXED
       #BOXED('"Hot" Fields')
          #BUTTON('"Hot" Fields'),MULTI(%HotFields,%HotField), INLINE,AT(,,,50)
              #PROMPT('Hot Field:',FIELD),%HotField,REQ
              #VALIDATE(%OBYFieldNotPopulated(%HotField,%HotFields)=1,'Field already in use')
              #VALIDATE(%FieldIsTableColumn(%HotField,%ADOHotFieldType)=1,'Field need to be a Table Column')
              #PROMPT('Column is a: ', DROP(CHOOSE(%ADOHotFieldPosibleType='MANUAL','Table Column|Expression|HotField','Table Column'))), %ADOHotFieldType, default('Table Column')
              #ENABLE(%ADOHotFieldType = 'Table Column'),CLEAR
                 #PROMPT('Use AS?', check), %ADOHotFieldAS, DEFAULT(0)
              #ENDENABLE
              #BOXED,SECTION
                 #BOXED,WHERE(%ADOHotFieldAS = 1 OR %ADOHotFieldType = 'Expression')
                      #PROMPT('', @s250), %ADOHotFieldASLabel,REQ,AT(100,0)
                      #VALIDATE(%ASFieldNotPopulated(%ADOHotFieldASLabel,%HotFields,1)=1,'The Field AS value is already in use')
                      #DISPLAY('AS:'),AT(10,0)
                 #ENDBOXED
                 #BOXED,WHERE((%ADOHotFieldType <> 'HotField') AND NOT (%ADOHotFieldAS = 1 OR %ADOHotFieldType = 'Expression'))
                      #PROMPT('', @s250), %ADOHotFieldID,AT(100,0),PROP(PROP:READONLY,%True)
                      #DISPLAY('Unique Field ID:'),AT(10,0)
                 #ENDBOXED
              #ENDBOXED
              #ENABLE(%ADOHotFieldType = 'Expression')
                 #PROMPT('Expression: ', @s250), %ADOHotFieldExpression,REQ
                 #PROMPT('Expression data type: ', DROP('LONG|STRING|DATETIME')), %ADOHotFieldExpressionType,REQ
              #ENDENABLE
              #BOXED,WHERE(%False),AT(0,0,0,0)
                #PROMPT('FieldType',OPTION),%ADOHotFieldPosibleType,DEFAULT('MANUAL')
                #PROMPT('AUTO',RADIO)
                #PROMPT('MANUAL',RADIO)
              #ENDBOXED
          #ENDBUTTON
       #ENDBOXED
    #ENDTAB
    #TAB('&Default SQL'),HLP('~ASPBrowse_DefaultSQL')
         #PREPARE
           #IF(NOT %ADOBrowseControlSQLToFillWhereOverride)
             #CALL(%SQLGenerateBrowseSQLWhere,%ADOBrowseControlSQLToFillWhere)
           #ENDIF
           #IF(NOT %ADOBrowseControlSQLToFillOrderByOverride)
             #CALL(%SQLGenerateBrowseSQLOrderBy,%ADOBrowseControlSQLToFillOrderBy)
           #ENDIF
         #ENDPREPARE
         #DISPLAY('')
         #ENABLE(%ADOBrowseControlSQLToFillSelectOverride)
         #BOXED('SQL Generation')
            #!Forces The Regeneration For The SQL Statements For This List
            #BUTTON(' Regenerate SQL '),WHENACCEPTED(%SQLGenerateBrowseSQLSelect(%ADOBrowseControlSQLToFill))
            #ENDBUTTON
         #ENDBOXED
         #ENDENABLE
         #PROMPT('Override SELECT SQL',CHECK),%ADOBrowseControlSQLToFillSelectOverride,AT(6)
         #DISPLAY('Enter an SQL SELECT statement'),AT(6)
         #PROMPT('SQL to issue on page open',TEXT),%ADOBrowseControlSQLToFill,AT(6)
         #DISPLAY
         #PROMPT('Unique Key:',KEY(%Primary)),%ADOBrowseControlUniqueKey,DEFAULT(%SearchUniqueKey(%Primary)),REQ
         #DISPLAY('ADO/SQL requires a unique Id to identify the record,')
         #DISPLAY('this can be a single field or multple fields.')
         #DISPLAY('All the key fields will be added')
         #DISPLAY('to the Hot Fields if they are not')
         #DISPLAY('already populated into the listbox columns')
    #ENDTAB
    #TAB('&Default Behavior')
         #PREPARE
            #CALL(%AddKeyToHotfield,%ADOBrowseControlUniqueKey)
            #IF(%ADOBrowseControlManageRepColumnsName)
                #CALL(%ADOGenerateUniqueID)
            #ENDIF
            #IF(NOT %ADOBrowseControlSQLToFillSelectOverride)
                #CALL(%SQLGenerateBrowseSQLSelect,%ADOBrowseControlSQLToFill)
            #ENDIF
         #ENDPREPARE
      #BOXED
         #SHEET
            #TAB('Fields')
               #BOXED('Range or Filter Columns')
               #BUTTON('Range Columns'),MULTI(%WHEREFieldSort,%WHEREFieldSortCol&'   '&%GetRangeName(%WHEREFieldSortCol,%FieldSortColRangeUseStatic,%FieldSortColRangeNegate,%RangeLimitType,%FieldSortColRangeVariable,%FieldSortColRangeVariableLow,%FieldSortColRangeVariableHigh,%FieldSortColRangeStatic,%FieldSortColRangeStaticLow,%FieldSortColRangeStaticHigh)),INLINE,AT(,,,50)
                   #PROMPT('Column: ',FROM(%OBYFields,,%OBYField)), %WHEREFieldSortCol,DEFAULT(%GetFirstQueryFields())
                   #PROMPT('Use Static Values?',CHECK),%FieldSortColRangeUseStatic,AT(10)
                   #PROMPT('Negate the Range or Filter (NOT)?',CHECK),%FieldSortColRangeNegate,AT(10)
                   #PROMPT('Range Limit &Type:',DROP('Single Value|Range of Values|Less Than|Greater Than|IN|Begins With|Ends With|Contains')),%RangeLimitType,DEFAULT('Single Value')
                   #prepare
                     #declare(%svCanUse)
                     #declare(%svWhyMsg)
                     #find(%Field, %WHEREFieldSortCol)
                     #IF(%FieldType = 'CSTRING' or %FieldType = 'STRING')
                       #set(%svCanUse, 1)
                       #set(%svWhyMsg, 'OK')
                     #ELSE
                       #case(%RangeLimitType)
                       #of('Begins With')
                       #orof('Ends With')
                       #orof('Contains')
                         #set(%svCanUse, 0)
                         #set(%svWhyMsg, Upper(%RangeLimitType) & ' cannot be used with non string data type')
                       #else
                         #set(%svCanUse, 1)
                         #set(%svWhyMsg, 'OK')
                       #ENDCASE
                     #ENDIF
                   #endprepare
                   #VALIDATE(%svCanUse = 1, %svWhyMsg)
                   #BOXED,AT(,50),WHERE(%RangeLimitType<>'Range of Values' AND NOT %FieldSortColRangeUseStatic)
                        #PROMPT('Range Limit Value: ', FIELD), %FieldSortColRangeVariable
                   #ENDBOXED
                   #BOXED,AT(,50),WHERE(%RangeLimitType='Range of Values' AND NOT %FieldSortColRangeUseStatic)
                        #PROMPT('&Low Limit Value:',FIELD),%FieldSortColRangeVariableLow
                        #PROMPT('&High Limit Value:',FIELD),%FieldSortColRangeVariableHigh
                   #ENDBOXED
                   #BOXED,AT(,50),WHERE(%RangeLimitType<>'Range of Values' AND %FieldSortColRangeUseStatic)
                        #PROMPT('Range Limit Value: ', EXPR), %FieldSortColRangeStatic
                   #ENDBOXED
                   #BOXED,AT(,50),WHERE(%RangeLimitType='Range of Values' AND %FieldSortColRangeUseStatic)
                        #PROMPT('&Low Limit Value:',EXPR),%FieldSortColRangeStaticLow
                        #PROMPT('&High Limit Value:',EXPR),%FieldSortColRangeStaticHigh
                   #ENDBOXED
               #ENDBUTTON
               #ENDBOXED
               #BOXED('Sort Columns')
               #BUTTON('Sort Columns'),MULTI(%OrderBYFieldSort,CHOOSE(%OrderBYFieldSortDirection='ASC','+','-')&' '&%OrderBYFieldSortCol),INLINE,AT(,,,50)
                   #PROMPT('Column: ',FROM(%OBYFields,,%OBYField)), %OrderBYFieldSortCol,DEFAULT(%GetFirstOBYFields())
                   #VALIDATE(%SortFieldNotUsed(%OrderBYFieldSortCol,%OrderBYFieldSort)=1,'Field already in use')
                   #PROMPT('Direction: ',DROP('ASC|DESC')), %OrderBYFieldSortDirection,DEFAULT('ASC')
               #ENDBUTTON
               #BUTTON('Add Primary Key Fields'),WHENACCEPTED(%AddPrimaryKeyToSort())
               #ENDBUTTON
               #BUTTON('Add A Key Fields')
                   #PROMPT('Key To Add:',KEY(%Primary)),%KeyToAdd
                   #BUTTON('Add Fields'),WHENACCEPTED(%AddKeyToSort(%KeyToAdd))
                   #ENDBUTTON
               #ENDBUTTON
               #ENDBOXED
            #ENDTAB
            #TAB('SQL')
               #ENABLE(%ADOBrowseControlSQLToFillWhereOverride)
               #BUTTON(' Regenerate WHERE SQL '),WHENACCEPTED(%SQLGenerateBrowseSQLWhere(%ADOBrowseControlSQLToFillWhere)),AT(6,,170)
               #ENDBUTTON
               #ENDENABLE
               #PROMPT('Override WHERE SQL',CHECK),%ADOBrowseControlSQLToFillWhereOverride,AT(6)
               #DISPLAY('Enter a WHERE clause to filter this list'),AT(6)
               #PROMPT('SQL Default WHERE statement',TEXT),%ADOBrowseControlSQLToFillWhere,AT(6)
               #ENABLE(%ADOBrowseControlSQLToFillOrderByOverride)
               #BUTTON(' Regenerate ORDER BY SQL '),WHENACCEPTED(%SQLGenerateBrowseSQLOrderBy(%ADOBrowseControlSQLToFillOrderBy)),AT(6,,170)
               #ENDBUTTON
               #ENDENABLE
               #PROMPT('Override ORDER BY SQL',CHECK),%ADOBrowseControlSQLToFillOrderByOverride,AT(6)
               #DISPLAY('Enter the ORDER BY clause'),AT(6)
               #PROMPT('SQL Default ORDER BY statement',TEXT),%ADOBrowseControlSQLToFillOrderBy,AT(6)
               #BUTTON('Test SQL Query'),WHENACCEPTED(%SQLTestBrowseSQL(%ADOBrowseControlSQLToFill,%ADOBrowseControlSQLToFillWhere,%ADOBrowseControlSQLToFillOrderBy, %svConnectionObject)),AT(6,,170)
               #ENDBUTTON
            #ENDTAB
         #ENDSHEET
      #ENDBOXED
    #ENDTAB
    #TAB('&Conditional Behavior'),HLP('~TPLControlBrowseBox_Conditional_Behavior')
      #DISPLAY('')
      #BUTTON('Conditional Browse Behavior'),MULTI(%SortOrder,%SortCondition),AT(,35),INLINE,HLP('~TPLControlBrowseBox_Conditional_Behavior')
         #PROMPT('Condition:',EXPR),%SortCondition,REQ
         #BOXED
         #SHEET
            #TAB('Fields')
               #BOXED('Range or Filter Columns')
               #BUTTON('Range Columns'),MULTI(%ConditionalWHEREFieldSort,%ConditionalWHEREFieldSortCol&'   '&%GetRangeName(%ConditionalWHEREFieldSortCol,%ConditionalSortColRangeUseStatic,%ConditionalSortColRangeNegate,%ConditionalRangeLimitType,%ConditionalSortColRangeVariable,%ConditionalSortColRangeVariableLow,%ConditionalSortColRangeVariableHigh,%ConditionalSortColRangeStatic,%ConditionalSortColRangeStaticLow,%ConditionalSortColRangeStaticHigh)),INLINE,AT(,,,50)
                   #PROMPT('Column: ',FROM(%OBYFields,,%OBYField)), %ConditionalWHEREFieldSortCol,DEFAULT(%GetFirstQueryFields())
                   #PROMPT('Use Static Values?',CHECK),%ConditionalSortColRangeUseStatic,AT(10)
                   #PROMPT('Negate the Range or Filter (NOT)?',CHECK),%ConditionalSortColRangeNegate,AT(10)
                   #PROMPT('Range Limit &Type:',DROP('Single Value|Range of Values|Less Than|Greater Than|IN|Begins With|Ends With|Contains')),%ConditionalRangeLimitType,DEFAULT('Single Value')
                   #prepare
                     #declare(%svCanUse)
                     #declare(%svWhyMsg)
                     #find(%Field, %ConditionalWHEREFieldSortCol)
                     #IF(%FieldType = 'CSTRING' or %FieldType = 'STRING')
                       #set(%svCanUse, 1)
                       #set(%svWhyMsg, 'OK')
                     #ELSE
                       #case(%RangeLimitType)
                       #of('Begins With')
                       #orof('Ends With')
                       #orof('Contains')
                         #set(%svCanUse, 0)
                         #set(%svWhyMsg, Upper(%RangeLimitType) & ' cannot be used with non string data type')
                       #else
                         #set(%svCanUse, 1)
                         #set(%svWhyMsg, 'OK')
                       #ENDCASE
                     #ENDIF
                   #endprepare
                   #VALIDATE(%svCanUse = 1, %svWhyMsg)
                   #BOXED,AT(,50),WHERE(%ConditionalRangeLimitType<>'Range of Values' AND NOT %ConditionalSortColRangeUseStatic)
                        #PROMPT('Range Limit Value: ', FIELD), %ConditionalSortColRangeVariable
                   #ENDBOXED
                   #BOXED,AT(,50),WHERE(%ConditionalRangeLimitType='Range of Values' AND NOT %ConditionalSortColRangeUseStatic)
                        #PROMPT('&Low Limit Value:',FIELD),%ConditionalSortColRangeVariableLow
                        #PROMPT('&High Limit Value:',FIELD),%ConditionalSortColRangeVariableHigh
                   #ENDBOXED
                   #BOXED,AT(,50),WHERE(%ConditionalRangeLimitType<>'Range of Values' AND %ConditionalSortColRangeUseStatic)
                        #PROMPT('Range Limit Value: ', EXPR), %ConditionalSortColRangeStatic
                   #ENDBOXED
                   #BOXED,AT(,50),WHERE(%ConditionalRangeLimitType='Range of Values' AND %ConditionalSortColRangeUseStatic)
                        #PROMPT('&Low Limit Value:',EXPR),%ConditionalSortColRangeStaticLow
                        #PROMPT('&High Limit Value:',EXPR),%ConditionalSortColRangeStaticHigh
                   #ENDBOXED
               #ENDBUTTON
               #ENDBOXED
               #BOXED('Sort Columns')
               #BUTTON('Sort Columns'),MULTI(%ConditionalOrderBYFieldSort,CHOOSE(%ConditionalOrderBYFieldSortDirection='ASC','+','-')&' '&%ConditionalOrderBYFieldSortCol),INLINE,AT(,,,50)
                   #VALIDATE(%SortFieldNotUsed(%ConditionalOrderBYFieldSortCol,%ConditionalOrderBYFieldSort)=1,'Field already in use')
                   #PROMPT('Column: ',FROM(%OBYFields,,%OBYField)), %ConditionalOrderBYFieldSortCol,DEFAULT(%GetFirstOBYFields())
                   #PROMPT('Direction: ',DROP('ASC|DESC')), %ConditionalOrderBYFieldSortDirection,DEFAULT('ASC')
               #ENDBUTTON
               #BUTTON('Add Primary Key Fields'),WHENACCEPTED(%AddPrimaryKeyToSort(0))
               #ENDBUTTON
               #BUTTON('Add A Key Fields')
                   #PROMPT('Key To Add:',KEY(%Primary)),%ConditionalKeyToAdd
                   #BUTTON('Add Fields'),WHENACCEPTED(%AddKeyToSort(%ConditionalKeyToAdd,0))
                   #ENDBUTTON
               #ENDBUTTON
               #ENDBOXED
            #ENDTAB
            #TAB('SQL')
         #PREPARE
              #IF(%ADOBrowseControlManageRepColumnsName)
                  #CALL(%ADOGenerateUniqueID)
              #ENDIF
                    #IF(INSTANCE(%SortOrder))
                       #IF(NOT %ADOBrowseControlConditionalSQLToFillWhereOverride)
                           #CALL(%SQLGenerateBrowseSQLWhere,%ADOBrowseControlConditionalSQLToFillWhere,%True)
                       #ENDIF
                       #IF(NOT %ADOBrowseControlConditionalSQLToFillOrderByOverride)
                           #CALL(%SQLGenerateBrowseSQLOrderBy,%ADOBrowseControlConditionalSQLToFillOrderBy,%True)
                       #ENDIF
                    #ENDIF
               #ENDPREPARE
               #ENABLE(%ADOBrowseControlConditionalSQLToFillWhereOverride)
               #BUTTON(' Regenerate WHERE SQL '),WHENACCEPTED(%SQLGenerateBrowseSQLWhere(%ADOBrowseControlConditionalSQLToFillWhere,%True)),AT(6,,170)
               #ENDBUTTON
               #ENDENABLE
               #PROMPT('Override WHERE SQL',CHECK),%ADOBrowseControlConditionalSQLToFillWhereOverride,AT(6)
               #DISPLAY('Enter a WHERE clause to filter this list'),AT(6)
               #PROMPT('SQL Default WHERE statement',TEXT),%ADOBrowseControlConditionalSQLToFillWhere,AT(6)
               #ENABLE(%ADOBrowseControlConditionalSQLToFillOrderByOverride)
               #BUTTON(' Regenerate ORDER BY SQL '),WHENACCEPTED(%SQLGenerateBrowseSQLOrderBy(%ADOBrowseControlConditionalSQLToFillOrderBy,%True)),AT(6,,170)
               #ENDBUTTON
               #ENDENABLE
               #PROMPT('Override ORDER BY SQL',CHECK),%ADOBrowseControlConditionalSQLToFillOrderByOverride,AT(6)
               #DISPLAY('Enter the ORDER BY clause'),AT(6)
               #PROMPT('SQL Default ORDER BY statement',TEXT),%ADOBrowseControlConditionalSQLToFillOrderBy,AT(6)
               #BUTTON('Test SQL Query'),WHENACCEPTED(%SQLTestBrowseSQL(%ADOBrowseControlSQLToFill,%ADOBrowseControlConditionalSQLToFillWhere,%ADOBrowseControlConditionalSQLToFillOrderBy, %svConnectionObject)),AT(6,,170)
               #ENDBUTTON
            #ENDTAB
         #ENDSHEET
         #ENDBOXED
      #ENDBUTTON
    #ENDTAB
    #TAB('Co&lors'),WHERE(%ControlHasColor),HLP('~TPLControlBrowseBox_Colors')
      #PREPARE
        #FIND(%ControlInstance,%ActiveTemplateInstance,%Control)
      #ENDPREPARE
      #DISPLAY('')
      #PROMPT('Use same color for all columns?',CHECK),%UseSameColorForAll,DEFAULT(%False),AT(10)
      #BOXED,SECTION
        #BOXED,WHERE(NOT %UseSameColorForAll),AT(,5)
         #BUTTON('Customize Colors'),FROM(%ControlField,%ControlField),INLINE,WHERE(%ControlFieldHasColor),HLP('~TPLControlBrowseBox_Colors')
           #PREPARE
             #FIND(%ControlInstance,%ActiveTemplateInstance,%Control)
           #ENDPREPARE
           #PROMPT('Create Greenbar Effect?',CHECK),%ControlGreenBarColor,DEFAULT(%False),AT(10)
           #BOXED,SECTION
              #BOXED,WHERE(NOT %ControlGreenBarColor),AT(,0)
                 #BOXED('Default Colors')
                   #PROMPT('&Foreground Normal:',COLOR),%ControlFieldForegroundNormal,DEFAULT(-1)
                   #PROMPT('&Background Normal:',COLOR),%ControlFieldBackgroundNormal,DEFAULT(-1)
                   #PROMPT('&Foreground Selected:',COLOR),%ControlFieldForegroundSelected,DEFAULT(-1)
                   #PROMPT('&Background Selected:',COLOR),%ControlFieldBackgroundSelected,DEFAULT(-1)
                 #ENDBOXED
                 #BOXED('Conditional Color Assignments')
                   #BUTTON('Conditional Color Assignments'),MULTI(%ConditionalColors,%ColorCondition),INLINE,HLP('~TPLControlBrowseBox_Colors')
                     #PROMPT('&Condition:',EXPR),%ColorCondition
                     #PROMPT('&Foreground Normal:',COLOR),%ConditionalControlFieldForegroundNormal,DEFAULT(-1)
                     #PROMPT('&Background Normal:',COLOR),%ConditionalControlFieldBackgroundNormal,DEFAULT(-1)
                     #PROMPT('&Foreground Selected:',COLOR),%ConditionalControlFieldForegroundSelected,DEFAULT(-1)
                     #PROMPT('&Background Selected:',COLOR),%ConditionalControlFieldBackgroundSelected,DEFAULT(-1)
                   #ENDBUTTON
                 #ENDBOXED
              #ENDBOXED
              #BOXED,WHERE(%ControlGreenBarColor),AT(,0)
                 #BOXED('First Colors')
                   #PROMPT('&Foreground Normal:',COLOR),%GreenBarOnForegroundNormal,DEFAULT(-1)
                   #PROMPT('&Background Normal:',COLOR),%GreenBarOnBackgroundNormal,DEFAULT(-1)
                   #PROMPT('&Foreground Selected:',COLOR),%GreenBarOnForegroundSelected,DEFAULT(-1)
                   #PROMPT('&Background Selected:',COLOR),%GreenBarOnBackgroundSelected,DEFAULT(-1)
                 #ENDBOXED
                 #BOXED('Second Colors')
                   #PROMPT('&Foreground Normal:',COLOR),%GreenBarOffForegroundNormal,DEFAULT(-1)
                   #PROMPT('&Background Normal:',COLOR),%GreenBarOffBackgroundNormal,DEFAULT(-1)
                   #PROMPT('&Foreground Selected:',COLOR),%GreenBarOffForegroundSelected,DEFAULT(-1)
                   #PROMPT('&Background Selected:',COLOR),%GreenBarOffBackgroundSelected,DEFAULT(-1)
                 #ENDBOXED
              #ENDBOXED
           #ENDBOXED
         #ENDBUTTON
        #ENDBOXED
        #BOXED,WHERE(%UseSameColorForAll),AT(,5)
           #BOXED,SECTION
              #PROMPT('Create Green Bar Effect?',CHECK),%AllControlGreenBarColor,DEFAULT(%False),AT(10,0)
              #ENABLE(%AllControlGreenBarColor)
              #PROMPT('Alternate columns?',CHECK),%AllControlGreenBarColorAlternate,DEFAULT(%False),AT(110,0,80)
              #ENDENABLE
           #ENDBOXED
           #BOXED,SECTION
              #BOXED,WHERE(NOT %AllControlGreenBarColor),AT(,0)
                 #BOXED('Default Colors')
                   #PROMPT('&Foreground Normal:',COLOR),%AllControlFieldForegroundNormal,DEFAULT(-1)
                   #PROMPT('&Background Normal:',COLOR),%AllControlFieldBackgroundNormal,DEFAULT(-1)
                   #PROMPT('&Foreground Selected:',COLOR),%AllControlFieldForegroundSelected,DEFAULT(-1)
                   #PROMPT('&Background Selected:',COLOR),%AllControlFieldBackgroundSelected,DEFAULT(-1)
                 #ENDBOXED
                 #BOXED('Conditional Color Assignments')
                   #BUTTON('Conditional Color Assignments'),MULTI(%ConditionalColorsAll,%ColorConditionAll),INLINE,HLP('~TPLControlBrowseBox_Colors')
                     #PROMPT('&Condition:',EXPR),%ColorConditionAll
                     #PROMPT('&Foreground Normal:',COLOR),%ConditionalAllControlFieldForegroundNormal,DEFAULT(-1)
                     #PROMPT('&Background Normal:',COLOR),%ConditionalAllControlFieldBackgroundNormal,DEFAULT(-1)
                     #PROMPT('&Foreground Selected:',COLOR),%ConditionalAllControlFieldForegroundSelected,DEFAULT(-1)
                     #PROMPT('&Background Selected:',COLOR),%ConditionalAllControlFieldBackgroundSelected,DEFAULT(-1)
                   #ENDBUTTON
                 #ENDBOXED
              #ENDBOXED
              #BOXED,WHERE(%AllControlGreenBarColor),AT(,0)
                 #BOXED('First Colors')
                   #PROMPT('&Foreground Normal:',COLOR),%AllGreenBarOnForegroundNormal,DEFAULT(-1)
                   #PROMPT('&Background Normal:',COLOR),%AllGreenBarOnBackgroundNormal,DEFAULT(-1)
                   #PROMPT('&Foreground Selected:',COLOR),%AllGreenBarOnForegroundSelected,DEFAULT(-1)
                   #PROMPT('&Background Selected:',COLOR),%AllGreenBarOnBackgroundSelected,DEFAULT(-1)
                 #ENDBOXED
                 #BOXED('Second Colors')
                   #PROMPT('&Foreground Normal:',COLOR),%AllGreenBarOffForegroundNormal,DEFAULT(-1)
                   #PROMPT('&Background Normal:',COLOR),%AllGreenBarOffBackgroundNormal,DEFAULT(-1)
                   #PROMPT('&Foreground Selected:',COLOR),%AllGreenBarOffForegroundSelected,DEFAULT(-1)
                   #PROMPT('&Background Selected:',COLOR),%AllGreenBarOffBackgroundSelected,DEFAULT(-1)
                 #ENDBOXED
              #ENDBOXED
           #ENDBOXED
        #ENDBOXED
      #ENDBOXED
    #ENDTAB
    #TAB('Co&lors'),WHERE(NOT %ControlHasColor),HLP('~TPLControlBrowseBox_Colors')
      #PREPARE
        #FIND(%ControlInstance,%ActiveTemplateInstance,%Control)
      #ENDPREPARE
      #DISPLAY('Your BrowseBox is not set to use custom colors. To activate custom colors for your BrowseBox, follow these steps.'),AT(10,30,175,24)
      #DISPLAY('1.  If you aren''t in the window formatter, go there.'),AT(10,,175)
      #DISPLAY('2.  Right-click on the BrowseBox control, and select "List Box Format..."'),AT(10,,175,16)
      #DISPLAY('3.  Select the column you want to "colorize" from the left hand list.'),AT(10,,175)
      #DISPLAY('4.  Set the "HasColor" property to TRUE.'),AT(10,,175)
      #DISPLAY('5.  Repeat steps 3 and 4 as necessary.'),AT(10,,175)
      #DISPLAY('6.  When you call up the BrowseBox actions window, this tab will show the columns you''ve colored.'),AT(10,,175,16)
    #ENDTAB
    #TAB('&Icons'),WHERE(%ControlHasIcon),HLP('~TPLControlBrowseBox_Icons')
      #PREPARE
        #FIND(%ControlInstance,%ActiveTemplateInstance,%Control)
      #ENDPREPARE
      #DISPLAY('')
      #BUTTON('&Customize BrowseBox Icons'),FROM(%ControlField,%ControlField & ' - ' & %ControlFieldIcon),AT(,35),HLP('~TPLControlBrowseBox_Icons'),INLINE,WHERE(%ControlFieldHasIcon)
        #PREPARE
          #FIND(%ControlInstance,%ActiveTemplateInstance,%Control)
        #ENDPREPARE
        #BOXED('Default Icon')
          #PROMPT('Icon:',ICON),%ControlFieldIcon
          #ENABLE(SUB(%ControlFieldIcon,1,1) = '!'),CLEAR
            #PROMPT('The expression is a number',CHECK),%ControlFieldIconIsNumber
          #ENDENABLE
        #ENDBOXED
        #BOXED('Conditional Icon Usage')
          #BUTTON('&Conditional Icon Usage'),MULTI(%ConditionalIcons,%IconCondition),INLINE,HLP('~TPLControlBrowseBox_Icons')
            #PROMPT('&Condition:',EXPR),%IconCondition
            #PROMPT('Icon:',ICON),%ConditionalControlFieldIcon
            #ENABLE(SUB(%ConditionalControlFieldIcon,1,1) = '!'),CLEAR
              #PROMPT('The expression is a number',CHECK),%ConditionalControlFieldIconIsNumber
            #ENDENABLE
          #ENDBUTTON
        #ENDBOXED
      #ENDBUTTON
    #ENDTAB
    #TAB('&Icons'),WHERE(NOT %ControlHasIcon),HLP('~TPLControlBrowseBox_Icons')
      #PREPARE
        #FIND(%ControlInstance,%ActiveTemplateInstance,%Control)
      #ENDPREPARE
      #DISPLAY('Your BrowseBox is not set to use icons. To activate icons for your BrowseBox, follow these steps.'),AT(10,30,175,24)
      #DISPLAY('1.  If you aren''t in the window formatter, go there.'),AT(10,,175)
      #DISPLAY('2.  Right-click on the BrowseBox control, and select "List Box Format..."'),AT(10,,175,16)
      #DISPLAY('3.  Select the column you want to use an icon with from the left hand list.'),AT(10,,175)
      #DISPLAY('4.  Set the "Icon" property to either "Normal" or "Transparent".'),AT(10,,175,16)
      #DISPLAY('5.  Repeat steps 3-4 as necessary.'),AT(10,,175)
      #DISPLAY('6.  When you call up the BrowseBox actions window, this tab will show the columns you''ve added icons to.'),AT(10,,175,24)
    #ENDTAB
    #TAB('St&yles'),WHERE(%ControlHasStyle),HLP('~TPLControlBrowseBox_Styles')
      #PREPARE
        #FIND(%ControlInstance,%ActiveTemplateInstance,%Control)
      #ENDPREPARE
      #DISPLAY('')
      #PROMPT('Use same Style for all columns?',CHECK),%UseSameStyleForAll,DEFAULT(%False),AT(10)
      #BOXED,SECTION
         #BOXED,WHERE(NOT %UseSameStyleForAll),AT(,0)
           #BUTTON('&Customize BrowseBox Styles'),FROM(%ControlField,%ControlField & ' - ' & CHOOSE(%ControlFieldStyleType='Style Number',%ControlFieldStyle,%ControlFieldStyleLocalList)),HLP('~TPLControlBrowseBox_Styles'),INLINE,WHERE(%ControlFieldHasStyle)
             #PREPARE
               #FIND(%ControlInstance,%ActiveTemplateInstance,%Control)
             #ENDPREPARE
             #PROMPT('Create Greenbar Effect?',CHECK),%ControlGreenBarStyle,DEFAULT(%False),AT(10)
             #BOXED,SECTION
                #BOXED,WHERE(%ControlGreenBarStyle),AT(,0)
                   #BOXED('First Style')
                     #PROMPT('Style Type:',DROP('Local List|Style Number')),%GreenBarOnStyleType,DEFAULT('Local List')
                     #BOXED,SECTION
                        #BOXED,WHERE(%GreenBarOnStyleType='Local List'),AT(0,0)
                        #PROMPT('Style:',FROM(%WindowStyles,,INSTANCE(%WindowStyles)&'-'&CHOOSE(%WindowStyleFontNameIsVariable,%WindowStyleFontNameVariable,%WindowStyleFontName)&','&CHOOSE(%WindowStyleFontSizeIsVariable,%WindowStyleFontSizeVariable,%WindowStyleFontSize))),%GreenBarOnStyleLocalList
                        #ENDBOXED
                        #BOXED,WHERE(%GreenBarOnStyleType='Style Number'),AT(0,0)
                        #PROMPT('Style Number:',SPIN(@n6,0,65535)),%GreenBarOnStyle
                        #ENDBOXED
                     #ENDBOXED
                   #ENDBOXED
                   #BOXED('Second Style')
                     #PROMPT('Style Type:',DROP('Local List|Style Number')),%GreenBarOffStyleType,DEFAULT('Local List')
                     #BOXED,SECTION
                        #BOXED,WHERE(%GreenBarOffStyleType='Local List'),AT(0,0)
                        #PROMPT('Style:',FROM(%WindowStyles,,INSTANCE(%WindowStyles)&'-'&CHOOSE(%WindowStyleFontNameIsVariable,%WindowStyleFontNameVariable,%WindowStyleFontName)&','&CHOOSE(%WindowStyleFontSizeIsVariable,%WindowStyleFontSizeVariable,%WindowStyleFontSize))),%GreenBarOffStyleLocalList
                        #ENDBOXED
                        #BOXED,WHERE(%GreenBarOffStyleType='Style Number'),AT(0,0)
                        #PROMPT('Style Number:',SPIN(@n6,0,65535)),%GreenBarOffStyle
                        #ENDBOXED
                     #ENDBOXED
                   #ENDBOXED
                #ENDBOXED
                #BOXED,WHERE(NOT %ControlGreenBarStyle),AT(,0)
                   #BOXED('Default Style')
                     #PROMPT('Style Type:',DROP('Local List|Style Number')),%ControlFieldStyleType,DEFAULT('Local List')
                     #BOXED,SECTION
                        #BOXED,WHERE(%ControlFieldStyleType='Local List'),AT(0,0)
                        #PROMPT('Style:',FROM(%WindowStyles,,INSTANCE(%WindowStyles)&'-'&CHOOSE(%WindowStyleFontNameIsVariable,%WindowStyleFontNameVariable,%WindowStyleFontName)&','&CHOOSE(%WindowStyleFontSizeIsVariable,%WindowStyleFontSizeVariable,%WindowStyleFontSize))),%ControlFieldStyleLocalList
                        #ENDBOXED
                        #BOXED,WHERE(%ControlFieldStyleType='Style Number'),AT(0,0)
                        #PROMPT('Style Number:',SPIN(@n6,0,65535)),%ControlFieldStyle
                        #ENDBOXED
                     #ENDBOXED
                   #ENDBOXED
                   #BOXED('Conditional Styles')
                     #BUTTON('&Conditional Styles'),MULTI(%ConditionalStyles,%StyleCondition),INLINE,HLP('~TPLControlBrowseBox_Styles')
                       #PROMPT('&Condition:',EXPR),%StyleCondition,REQ
                       #PROMPT('Style Type:',DROP('Local List|Style Number')),%ConditionalControlFieldStyleType,DEFAULT('Local List')
                       #BOXED,SECTION
                          #BOXED,WHERE(%ConditionalControlFieldStyleType='Local List'),AT(0,0)
                          #PROMPT('Style:',FROM(%WindowStyles,,INSTANCE(%WindowStyles)&'-'&CHOOSE(%WindowStyleFontNameIsVariable,%WindowStyleFontNameVariable,%WindowStyleFontName)&','&CHOOSE(%WindowStyleFontSizeIsVariable,%WindowStyleFontSizeVariable,%WindowStyleFontSize))),%ConditionalControlFieldStyleLocalList
                          #ENDBOXED
                          #BOXED,WHERE(%ConditionalControlFieldStyleType='Style Number'),AT(0,0)
                          #PROMPT('Style Number:',SPIN(@n6,0,65535)),%ConditionalControlFieldStyle
                          #ENDBOXED
                       #ENDBOXED
                     #ENDBUTTON
                   #ENDBOXED
                #ENDBOXED
             #ENDBOXED
           #ENDBUTTON
         #ENDBOXED
         #BOXED,WHERE(%UseSameStyleForAll),AT(,0)
           #BOXED,SECTION
              #PROMPT('Create Greenbar Effect?',CHECK),%AllControlGreenBarStyle,DEFAULT(%False),AT(10,0)
              #ENABLE(%AllControlGreenBarStyle)
              #PROMPT('Alternate columns?',CHECK),%AllControlGreenBarStyleAlternate,DEFAULT(%False),AT(110,0,80)
              #ENDENABLE
           #ENDBOXED
           #BOXED,SECTION
              #BOXED,WHERE(NOT %AllControlGreenBarStyle),AT(,0)
                 #BOXED('Default Style')
                     #PROMPT('Style Type:',DROP('Local List|Style Number')),%AllControlFieldStyleType,DEFAULT('Local List')
                     #BOXED,SECTION
                        #BOXED,WHERE(%AllControlFieldStyleType='Local List'),AT(0,0)
                        #PROMPT('Style:',FROM(%WindowStyles,,INSTANCE(%WindowStyles)&'-'&CHOOSE(%WindowStyleFontNameIsVariable,%WindowStyleFontNameVariable,%WindowStyleFontName)&','&CHOOSE(%WindowStyleFontSizeIsVariable,%WindowStyleFontSizeVariable,%WindowStyleFontSize))),%AllControlFieldStyleLocalList
                        #ENDBOXED
                        #BOXED,WHERE(%AllControlFieldStyleType='Style Number'),AT(0,0)
                        #PROMPT('Style Number:',SPIN(@n6,0,65535)),%AllControlFieldStyle
                        #ENDBOXED
                     #ENDBOXED
                 #ENDBOXED
                 #BOXED('Conditional Style Assignments')
                   #BUTTON('Conditional Style Assignments'),MULTI(%ConditionalStylesAll,%StyleConditionAll),INLINE,HLP('~TPLControlBrowseBox_Styles')
                     #PROMPT('&Condition:',EXPR),%StyleConditionAll,REQ
                     #PROMPT('Style Type:',DROP('Local List|Style Number')),%ConditionalAllControlFieldStyleType,DEFAULT('Local List')
                     #BOXED,SECTION
                        #BOXED,WHERE(%ConditionalAllControlFieldStyleType='Local List'),AT(0,0)
                        #PROMPT('Style:',FROM(%WindowStyles,,INSTANCE(%WindowStyles)&'-'&CHOOSE(%WindowStyleFontNameIsVariable,%WindowStyleFontNameVariable,%WindowStyleFontName)&','&CHOOSE(%WindowStyleFontSizeIsVariable,%WindowStyleFontSizeVariable,%WindowStyleFontSize))),%ConditionalAllControlFieldStyleLocalList
                        #ENDBOXED
                        #BOXED,WHERE(%ConditionalAllControlFieldStyleType='Style Number'),AT(0,0)
                        #PROMPT('Style Number:',SPIN(@n6,0,65535)),%ConditionalAllControlFieldStyle
                        #ENDBOXED
                     #ENDBOXED
                   #ENDBUTTON
                 #ENDBOXED
              #ENDBOXED
              #BOXED,WHERE(%AllControlGreenBarStyle),AT(,0)
                 #BOXED('First Style')
                     #PROMPT('Style Type:',DROP('Local List|Style Number')),%AllGreenBarOnStyleType,DEFAULT('Local List')
                     #BOXED,SECTION
                        #BOXED,WHERE(%AllGreenBarOnStyleType='Local List'),AT(0,0)
                        #PROMPT('Style:',FROM(%WindowStyles,,INSTANCE(%WindowStyles)&'-'&CHOOSE(%WindowStyleFontNameIsVariable,%WindowStyleFontNameVariable,%WindowStyleFontName)&','&CHOOSE(%WindowStyleFontSizeIsVariable,%WindowStyleFontSizeVariable,%WindowStyleFontSize))),%AllGreenBarOnStyleLocalList
                        #ENDBOXED
                        #BOXED,WHERE(%AllGreenBarOnStyleType='Style Number'),AT(0,0)
                        #PROMPT('Style Number:',SPIN(@n6,0,65535)),%AllGreenBarOnStyle
                        #ENDBOXED
                     #ENDBOXED
                 #ENDBOXED
                 #BOXED('Second Style')
                     #PROMPT('Style Type:',DROP('Local List|Style Number')),%AllGreenBarOffStyleType,DEFAULT('Local List')
                     #BOXED,SECTION
                        #BOXED,WHERE(%AllGreenBarOffStyleType='Local List'),AT(0,0)
                        #PROMPT('Style:',FROM(%WindowStyles,,INSTANCE(%WindowStyles)&'-'&CHOOSE(%WindowStyleFontNameIsVariable,%WindowStyleFontNameVariable,%WindowStyleFontName)&','&CHOOSE(%WindowStyleFontSizeIsVariable,%WindowStyleFontSizeVariable,%WindowStyleFontSize))),%AllGreenBarOffStyleLocalList
                        #ENDBOXED
                        #BOXED,WHERE(%AllGreenBarOffStyleType='Style Number'),AT(0,0)
                        #PROMPT('Style Number:',SPIN(@n6,0,65535)),%AllGreenBarOffStyle
                        #ENDBOXED
                     #ENDBOXED
                 #ENDBOXED
              #ENDBOXED
           #ENDBOXED
         #ENDBOXED
      #ENDBOXED
    #ENDTAB
    #TAB('St&yles'),WHERE(NOT %ControlHasStyle),HLP('~TPLControlBrowseBox_Styles')
      #PREPARE
        #FIND(%ControlInstance,%ActiveTemplateInstance,%Control)
      #ENDPREPARE
      #DISPLAY('Your BrowseBox is not set to use styles. To activate styles for your BrowseBox, follow these steps.'),AT(10,,175,24)
      #DISPLAY('1.  If you aren''t in the window formatter, go there.'),AT(10,,175)
      #DISPLAY('2.  Right-click on the BrowseBox control, and select "List Box Format..."'),AT(10,,175,16)
      #DISPLAY('3.  Select the column you want to use styles for from the left hand list.'),AT(10,,175)
      #DISPLAY('4.  Set the "Style" property to TRUE.'),AT(10,,175)
      #DISPLAY('5.  Repeat steps 3 and 4 as necessary.'),AT(10,,175)
      #DISPLAY('6.  When you call up the BrowseBox actions window, this tab will show the columns you''ve added styles for.'),AT(10,,175,16)
    #ENDTAB
    #TAB('Toolti&ps'),WHERE(%ControlHasTip),HLP('~TPLControlBrowseBox_Tips')
      #PREPARE
        #FIND(%ControlInstance,%ActiveTemplateInstance,%Control)
      #ENDPREPARE
      #DISPLAY('')
      #BUTTON('&Customize BrowseBox Tooltips'),FROM(%ControlField,%ControlField & ' - ' & %ControlFieldTipField),HLP('~TPLControlBrowseBox_Tips'),INLINE,WHERE(%ControlFieldHasTip)
        #PREPARE
          #FIND(%ControlInstance,%ActiveTemplateInstance,%Control)
        #ENDPREPARE
        #PROMPT('Tooltip &variable:',FIELD),%ControlFieldTipField
      #ENDBUTTON
    #ENDTAB
    #TAB('Toolti&ps'),WHERE(NOT %ControlHasTip),HLP('~TPLControlBrowseBox_Tips')
      #PREPARE
        #FIND(%ControlInstance,%ActiveTemplateInstance,%Control)
      #ENDPREPARE
      #DISPLAY('Your BrowseBox is not set to use tooltips. To activate tooltips for your BrowseBox, follow these steps.'),AT(10,,175,24)
      #DISPLAY('1.  If you aren''t in the window formatter, go there.'),AT(10,,175)
      #DISPLAY('2.  Right-click on the BrowseBox control, and select "List Box Format..."'),AT(10,,175,16)
      #DISPLAY('3.  Select the column you want to use styles for from the left hand list.'),AT(10,,175)
      #DISPLAY('4.  Set the "Tooltip" property to TRUE.'),AT(10,,175)
      #DISPLAY('5.  Repeat steps 3 and 4 as necessary.'),AT(10,,175)
      #DISPLAY('6.  When you call up the BrowseBox actions window, this tab will show the columns you''ve added tooltips for.'),AT(10,,175,16)
    #ENDTAB
    #TAB('&Totaling'),HLP('~TPLControlBrowseBox_Totaling')
      #DISPLAY('')
      #PROMPT('Always Calculate Totals?',CHECK),%BrowseAllTotalOnOff,DEFAULT(%True),AT(10)
      #ENABLE(NOT %BrowseAllTotalOnOff)
         #PROMPT('Condition:',EXPR),%BrowseAllTotalOnOffCondition
      #ENDENABLE
      #DISPLAY
      #BUTTON('Browse Totaling'),MULTI(%BrowseTotals,%BrowseTotalTarget & ' (' & %BrowseTotalType & ')'),INLINE
        #PROMPT('Total Target Field:',FIELD),%BrowseTotalTarget,REQ
        #PROMPT('Total Type:',DROP('Count|Sum|Average')),%BrowseTotalType
        #ENABLE(%BrowseTotalType <> 'Count'),CLEAR
          #PROMPT('Field To Total:',EXPR),%BrowseTotalField,REQ
        #ENDENABLE
        #PROMPT('Total Based On:',DROP('Each Record Read|Specified Condition')),%BrowseTotalBasedOn
        #ENABLE(%BrowseTotalBasedOn = 'Specified Condition'),CLEAR
          #PROMPT('Total Condition:',EXPR),%BrowseTotalCondition,REQ
        #ENDENABLE
      #ENDBUTTON
    #ENDTAB
    #TAB('Cl&asses')
         #DISPLAY('')
         #BUTTON('ADOBrowse Class'),AT(,,180)
            #WITH(%ClassItem, 'ADOBrw'&%ActiveTemplateInstance)
              #INSERT(%ClassPrompts(ABC))
            #ENDWITH
         #ENDBUTTON
         #BUTTON('DB Interface'),AT(,,180)
            #PROMPT('DB Interface class: ', FROM(%pClassName)), %svDBClass, DEFAULT(%DBInterfaceType),REQ
         #ENDBUTTON
         #ENABLE(%svNewConnection = 1), CLEAR
           #PROMPT('Connection class: ', FROM(%pClassName)), %svConnectionClass, DEFAULT(%svDefaultConnectionClass)
         #ENDENABLE
    #ENDTAB
   #ENDSHEET
#ENDBUTTON
#CLASS('Format Browse','Format a variable in the ' & %ActiveTemplateInstanceDescription)
#ATSTART
  #MESSAGE('Initializing ADO Browse',3)
  #DECLARE(%svResyncCmd)
  #DECLARE(%svPosInString)
  #DECLARE(%svSQLStatement)
  #DECLARE(%ListControl)
  #DECLARE(%ListQueue)
  #DECLARE(%ResizerInstance)
  #DECLARE(%svConnectionStrVarName)
  #CALL(%ReadABCFiles(ABC))
  #CALL(%SetClassDefaults(ABC), 'ADOBrw'&%ActiveTemplateInstance, 'ADOBrw'&%ActiveTemplateInstance, %ADOBrowserType)
  #CALL(%GetControlName(ABC)),%ListControl
  #FIX(%Control,%ListControl)
  #SET(%ListQueue,EXTRACT(%ControlStatement,'FROM',1))
  #DECLARE(%IconList),UNIQUE
  #DECLARE(%IconListType,%IconList)
  #DECLARE(%IconNameValue)
  #CALL(%LoadQueryFields)
  #CALL(%FindLocalTemplateInstance(ABC), 'WindowResize(ABC)'), %ResizerInstance
  #! #EQUATE(%ResizerInstance, %FindLocalTemplateInstance('WindowResize(ABC)'))
#ENDAT
#!----------------------------------------------
#AT(%GatherObjects)
#CALL(%SetClassItem(ABC),'ADOBrw'&%ActiveTemplateInstance)
#ADD(%ObjectList,'ADOBrw'&%ActiveTemplateInstance)
#SET(%ObjectListType,%ADOBrowserType)
#ENDAT
#!----------------------------------------------
#AT(%CustomGlobalDeclarations)
#CALL(%AddFilesToDeclare)
  #IF(%AppTemplateFamily='CLARION')
    #FIX(%Driver, 'ASCII')
    #PROJECT(%DriverLib)
  #ENDIF
#ENDAT
#!----------------------------------------------
#AT(%CustomGlobalDeclarations)
  #FOR(%Control),WHERE(%ControlInstance = %ActiveTemplateInstance)
    #FOR(%ControlField)
      #IF(%ControlFieldHasIcon)
        #IF(%ControlFieldIcon)
          #INSERT(%StandardAddIconToProject(ABC),%ControlFieldIcon)
        #ENDIF
        #FOR(%ConditionalIcons)
          #INSERT(%StandardAddIconToProject(ABC),%ConditionalControlFieldIcon)
        #ENDFOR
      #ENDIF
    #ENDFOR
  #ENDFOR
#ENDAT
#!----------------------------------------------
#AT(%LocalDataClasses)
#CALL(%SetClassItem(ABC), 'ADOBrw'&%ActiveTemplateInstance)
#INSERT(%GenerateClassDefinition(ABC), %ClassLines)
#CALL(%AddModuleIncludeFile(ABC),%svDBClass)
%[20]svDBObject &%svDBClass
  #IF(%svNewConnection)
#CALL(%AddModuleIncludeFile(ABC),%svConnectionClass)
%[20]svNewConnectionObject &%svConnectionClass
  #ENDIF
  #IF(%svNewConnection )
hr                   HRESULT
  #ENDIF
#ENDAT
#!----------------------------------------------
#AT(%LocalProcedures)
#IF(%AppTemplateFamily='CLARION')
#CALL(%GenerateVirtuals(ABC), 'ADOBrw'&%ActiveTemplateInstance, 'Local Objects|ADO Objects|'&%ThisObjectName, '%ADOBrowseManagerVirtuals(Clarion_ADO)')
#ELSE
#CALL(%GenerateVirtuals(ABC), 'ADOBrw'&%ActiveTemplateInstance, 'Local Objects|ADO Objects|'&%ThisObjectName, '%ADOBrowseManagerVirtuals(ABC_ADO)')
#ENDIF
#ENDAT
#AT(%PrepareAlerts)
%ListControl{Prop:Alrt,255} = MouseRight
#ENDAT
#!----------------------------------------------
#AT(%LocalProcedures)
#!CALL(%AddGraphPointBreakBreaksClassCode)
#ENDAT
#!----------------------------------------------
#AT(%DataSection), PRIORITY(4300)
#INSERT(%ADOConstructListQueue)
  #IF(%svNewConnection)
    #SET(%svConnectionStrVarName, %svNewConnectionObject & '_Str')
%[20]svConnectionStrVarName STRING(512)
  #ENDIF
#ENDAT
#!----------------------------------------------
#AT(%ADOBrowseMethodCodeSection,%ActiveTemplateInstance), PRIORITY(5000),DESCRIPTION('Parent Call')
  #CALL(%ParentCallValid(ABC)),%LocalParentCallValid
  #IF(%LocalParentCallValid)
  #CALL(%GenerateParentCall(ABC))
  #ENDIF
#END
#!----------------------------------------------
#AT(%DerivedEmbedAfterStandardWindowOpening)
#INSERT(%ADOBrowseInitCode)
#ENDAT
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(8050)
#INSERT(%ADOBrowseInitCode)
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'Kill','(),BYTE'),PRIORITY(8050)
if ~(%svDBObject &= null)
  dispose(%svDBObject)
end
#ENDAT
#AT(%ResizerMethodCodeSection, %ResizerInstance,'Resize', '(),BYTE'),PRIORITY(9000)
%svDBObject.SetPageSize(%ListControl{prop:items})
%ThisObjectName.RefreshPage()
#ENDAT
#AT(%EndOfProcedure)
  #IF(upper(%AppTemplateFamily) = 'CLARION')
if ~(%svDBObject &= null)
  dispose(%svDBObject)
end
  #ENDIF
#ENDAT
#!
#!
#!
#AT(%ADOBrowseMethodDataSection,%ActiveTemplateInstance,'SetQueueRecord','()'),PRIORITY(5000)
#IF(%GetBrowseUseGreenBar())
GreenBarIndex   BYTE(1), static
#ENDIF
#ENDAT
#!
#!
#!
#AT(%ADOBrowseMethodCodeSection,%ActiveTemplateInstance,'SetQueueRecord','()'),PRIORITY(2500)
#SUSPEND
#FOR(%Formula),WHERE(%FormulaClass='Format Browse' AND %FormulaInstance=0)
  #ERROR(%Formula&' formula is disconnected from browse. Please reselect browse instance!')
#ENDFOR
#FOR(%Formula),WHERE(%FormulaInstance=%ActiveTemplateInstance AND %FormulaClass='Format Browse')         #!Attempt to expand formula
#INSERT(%ExpandFormula,1)
#ENDFOR
#EMBED(%FormatBrowse,'Browser, Format an element of the queue'),%ActiveTemplateInstance,MAP(%ActiveTemplateInstance,%ActiveTemplateInstanceDescription),LEGACY
#PRIORITY(6000)
#FIX(%Control,%ListControl)
#IF(%Control <> %ListControl)
  #ERROR('List box control not found!')
  #ABORT
#ENDIF
#?%Null
#IF(%UseSameColorForAll)
    #IF(ITEMS(%ConditionalColorsAll) AND NOT %AllControlGreenBarColor)
#SUSPEND
      #FOR(%ConditionalColorsAll)
        #IF(INSTANCE(%ConditionalColorsAll) = 1)
#?IF (%ColorConditionAll)
        #ELSE
#?ELSIF (%ColorConditionAll)
        #ENDIF
           #FOR(%ADOQueryFields)
             #FIX(%ControlField, %ADOQueryField)
             #FIX(%Field, %ControlField)
             #IF(%Field)
               #SET(%ValueConstruct,%Field)
             #ELSE
               #SET(%ValueConstruct, %ControlField)
             #ENDIF
             #IF(%ControlFieldHasColor)
  %ListQueue.%ValueConstruct_NormalFG = %ConditionalAllControlFieldForegroundNormal    #<! Set conditional color values for %ValueConstruct
  %ListQueue.%ValueConstruct_NormalBG = %ConditionalAllControlFieldBackgroundNormal
  %ListQueue.%ValueConstruct_SelectedFG = %ConditionalAllControlFieldForegroundSelected
  %ListQueue.%ValueConstruct_SelectedBG = %ConditionalAllControlFieldBackgroundSelected
             #ENDIF
           #ENDFOR
      #ENDFOR
#?ELSE
       #FOR(%ADOQueryFields)
         #FIX(%ControlField, %ADOQueryField)
         #FIX(%Field, %ControlField)
         #IF(%Field)
           #SET(%ValueConstruct,%Field)
         #ELSE
           #SET(%ValueContruct, %ControlField)
         #ENDIF
         #IF(%ControlFieldHasColor)
  %ListQueue.%ValueConstruct_NormalFG = %AllControlFieldForegroundNormal               #<! Set color values for %ValueConstruct
  %ListQueue.%ValueConstruct_NormalBG = %AllControlFieldBackgroundNormal
  %ListQueue.%ValueConstruct_SelectedFG = %AllControlFieldForegroundSelected
  %ListQueue.%ValueConstruct_SelectedBG = %AllControlFieldBackgroundSelected
         #ENDIF
       #ENDFOR
#?END                     
#RESUME
    #ELSE
       #FOR(%ADOQueryFields)
         #FIX(%ControlField, %ADOQueryField)
         #FIX(%Field, %ControlField)
         #IF(%Field)
           #SET(%ValueConstruct,%Field)
         #ELSE
           #SET(%ValueConstruct, %ControlField)
         #ENDIF
         #IF(%ControlFieldHasColor)
            #IF(NOT %AllControlGreenBarColor)
%ListQueue.%ValueConstruct_NormalFG = %AllControlFieldForegroundNormal               #<! Set color values for %ValueConstruct
%ListQueue.%ValueConstruct_NormalBG = %AllControlFieldBackgroundNormal
%ListQueue.%ValueConstruct_SelectedFG = %AllControlFieldForegroundSelected
%ListQueue.%ValueConstruct_SelectedBG = %AllControlFieldBackgroundSelected
            #ENDIF
         #ENDIF
       #ENDFOR
    #ENDIF
#ENDIF
#IF(%UseSameStyleForAll)
    #IF(ITEMS(%ConditionalStylesAll) AND NOT %AllControlGreenBarStyle)
#SUSPEND
      #FOR(%ConditionalStylesAll)
        #IF(INSTANCE(%ConditionalStylesAll) = 1)
#?IF (%StyleConditionAll)
        #ELSE
#?ELSIF (%StyleConditionAll)
        #ENDIF
           #FOR(%ADOQueryFields)
             #FIX(%ControlField, %ADOQueryField)
             #FIX(%Field, %ControlField)
             #IF(%Field)
               #SET(%ValueConstruct,%Field)
             #ELSE
               #SET(%ValueConstruct, %ControlField)
             #ENDIF
             #IF(%ControlFieldHasStyle)
  %ListQueue.%ValueConstruct_Style = %(%GetStyleNumber(%ConditionalAllControlFieldStyleType,%ConditionalAllControlFieldStyle,%ConditionalAllControlFieldStyleLocalList)) ! %ConditionalAllControlFieldStyle
             #ENDIF
           #ENDFOR
      #ENDFOR
#?ELSE
       #FOR(%ADOQueryFields)
         #FIX(%ControlField, %ADOQueryField)
         #FIX(%Field, %ControlField)
         #IF(%Field)
           #SET(%ValueConstruct,%Field)
         #ELSE
           #SET(%ValueConstruct, %ControlField)
         #ENDIF
         #IF(%ControlFieldHasStyle)
  %ListQueue.%ValueConstruct_Style = %(%GetStyleNumber(%AllControlFieldStyleType,%AllControlFieldStyle,%AllControlFieldStyleLocalList)) ! %AllControlFieldStyle
         #ENDIF
       #ENDFOR
#?END                     
#RESUME
    #ELSE
       #FOR(%ADOQueryFields)
         #FIX(%ControlField, %ADOQueryField)
         #FIX(%Field, %ControlField)
         #IF(%Field)
           #SET(%ValueConstruct,%Field)
         #ELSE
           #SET(%ValueConstruct, %ControlField)
         #ENDIF
         #IF(%ControlFieldHasStyle)
            #IF(NOT %AllControlGreenBarStyle)
%ListQueue.%ValueConstruct_Style = %(%GetStyleNumber(%AllControlFieldStyleType,%AllControlFieldStyle,%AllControlFieldStyleLocalList)) ! %AllControlFieldStyle
            #ENDIF
         #ENDIF
       #ENDFOR
    #ENDIF
#ENDIF
#FOR(%ADOQueryFields)
  #FIX(%ControlField, %ADOQueryField)
  #FIX(%Field, %ControlField)
  #IF(%Field)
    #SET(%ValueConstruct,%Field)
  #ELSE
    #SET(%ValueConstruct, %ControlField)
  #ENDIF
  #IF(%ControlFieldHasColor AND NOT %UseSameColorForAll)
    #IF(ITEMS(%ConditionalColors) AND NOT %ControlGreenBarColor)
      #FOR(%ConditionalColors)
        #IF(INSTANCE(%ConditionalColors) = 1)
IF (%ColorCondition)
        #ELSE
ELSIF (%ColorCondition)
        #ENDIF
  %ListQueue.%ValueConstruct_NormalFG = %ConditionalControlFieldForegroundNormal    #<! Set conditional color values for %ValueConstruct
  %ListQueue.%ValueConstruct_NormalBG = %ConditionalControlFieldBackgroundNormal
  %ListQueue.%ValueConstruct_SelectedFG = %ConditionalControlFieldForegroundSelected
  %ListQueue.%ValueConstruct_SelectedBG = %ConditionalControlFieldBackgroundSelected
      #ENDFOR
ELSE
  %ListQueue.%ValueConstruct_NormalFG = %ControlFieldForegroundNormal                #<! Set color values for %ValueConstruct
  %ListQueue.%ValueConstruct_NormalBG = %ControlFieldBackgroundNormal
  %ListQueue.%ValueConstruct_SelectedFG = %ControlFieldForegroundSelected
  %ListQueue.%ValueConstruct_SelectedBG = %ControlFieldBackgroundSelected
END
    #ELSE
       #IF(NOT %ControlGreenBarColor)
%ListQueue.%ValueConstruct_NormalFG = %ControlFieldForegroundNormal                 #<! Set color values for %ValueConstruct
%ListQueue.%ValueConstruct_NormalBG = %ControlFieldBackgroundNormal
%ListQueue.%ValueConstruct_SelectedFG = %ControlFieldForegroundSelected
%ListQueue.%ValueConstruct_SelectedBG = %ControlFieldBackgroundSelected
       #ENDIF
    #ENDIF
  #ENDIF
  #IF(%ControlFieldHasIcon)
    #IF(ITEMS(%ConditionalIcons))
      #FOR(%ConditionalIcons)
        #IF(INSTANCE(%ConditionalIcons) = 1)
IF (%IconCondition)
        #ELSE
ELSIF (%IconCondition)
        #ENDIF
        #FIX(%IconList,%ConditionalControlFieldIcon)
        #IF(%IconList)
          #CASE(%IconListType)
          #OF('Index')
  %ListQueue.%ValueConstruct_Icon = %IconList
          #OF('VarIndex')
            #SET(%IconNameValue, SUB(%IconList, 2, LEN(%IconList) - 1))
  %ListQueue.%ValueConstruct_Icon = %IconNameValue
          #ELSE
  %ListQueue.%ValueConstruct_Icon = %(INSTANCE(%IconList))          #<! Set icon from icon list
          #ENDCASE
        #ELSE
  %ListQueue.%ValueConstruct_Icon = 0
        #ENDIF
      #ENDFOR
ELSE
      #FIX(%IconList,%ControlFieldIcon)
      #IF(%IconList)
        #CASE(%IconListType)
        #OF('Index')
  %ListQueue.%ValueConstruct_Icon = %IconList
        #OF('VarIndex')
          #SET(%IconNameValue, SUB(%IconList, 2, LEN(%IconList) - 1))
  %ListQueue.%ValueConstruct_Icon = %IconNameValue
        #ELSE
  %ListQueue.%ValueConstruct_Icon = %(INSTANCE(%IconList))          #<! Set icon from icon list
        #ENDCASE
      #ELSE
  %ListQueue.%ValueConstruct_Icon = 0
      #ENDIF
END
    #ELSE
      #FIX(%IconList,%ControlFieldIcon)
      #IF(%IconList)
        #CASE(%IconListType)
        #OF('Index')
  %ListQueue.%ValueConstruct_Icon = %IconList
        #OF('VarIndex')
          #SET(%IconNameValue, SUB(%IconList, 2, LEN(%IconList) - 1))
  %ListQueue.%ValueConstruct_Icon = %IconNameValue
        #ELSE
%ListQueue.%ValueConstruct_Icon = %(INSTANCE(%IconList))            #<! Set icon from icon list
        #ENDCASE
      #ELSE
%ListQueue.%ValueConstruct_Icon = 0
      #ENDIF
    #ENDIF
  #ENDIF
  #IF(%ControlFieldHasStyle AND NOT %UseSameStyleForAll)
    #IF(ITEMS(%ConditionalStyles) AND NOT %ControlGreenBarStyle)
      #FOR(%ConditionalStyles)
        #IF(INSTANCE(%ConditionalStyles) = 1)
IF (%StyleCondition)
        #ELSE
ELSIF (%StyleCondition)
        #ENDIF
  %ListQueue.%ValueConstruct_Style = %(%GetStyleNumber(%ConditionalControlFieldStyleType,%ConditionalControlFieldStyle,%ConditionalControlFieldStyleLocalList)) ! %ConditionalControlFieldStyle
      #ENDFOR
ELSE
  %ListQueue.%ValueConstruct_Style = %(%GetStyleNumber(%ControlFieldStyleType,%ControlFieldStyle,%ControlFieldStyleLocalList)) ! %ControlFieldStyle
END
    #ELSE
       #IF(NOT %ControlGreenBarStyle)
%ListQueue.%ValueConstruct_Style = %(%GetStyleNumber(%ControlFieldStyleType,%ControlFieldStyle,%ControlFieldStyleLocalList)) ! %ControlFieldStyle
       #ENDIF
    #ENDIF
  #ENDIF
  #IF(%ControlFieldHasTip)
    #IF(%ControlFieldTipField)
%ListQueue.%ValueConstruct_Tip = %ControlFieldTipField
    #ELSE
CLEAR (%ListQueue.%ValueConstruct_Tip)
    #ENDIF
  #ENDIF
#ENDFOR
#EMBED(%EndOfFormatBrowse,'End of Format an element of the browse queue'),%ActiveTemplateInstance,MAP(%ActiveTemplateInstance,%ActiveTemplateInstanceDescription),LEGACY
#FOR(%ADOQueryFields),WHERE(INLIST(%ADOQueryField,%Formula))
  #FIX(%ControlField, %ADOQueryField)
  #FIX(%Field, %ControlField)
  #IF(%Field)
    #SET(%ValueConstruct,%Field)
  #ELSE
    #SET(%ValueConstruct, %ControlField)
  #ENDIF
  #FOR(%Formula),WHERE(%Formula=%ADOQueryField)
    #IF(%FormulaInstance=%ActiveTemplateInstance AND %FormulaClass='Format Browse' AND INLIST(%Formula,%LocalData))
%ListQueue.%ValueConstruct = %Formula        #<!Assign formula result to display queue
    #ENDIF
  #ENDFOR
#ENDFOR
#FOR(%HotFields)
  #FIX(%Field, %HotField)
  #IF(%Field)
    #SET(%ValueConstruct,%Field)
  #ELSE
    #SET(%ValueConstruct, %HotField)
  #ENDIF
  #FOR(%Formula),WHERE(%Formula=%HotField)
    #IF(%FormulaInstance=%ActiveTemplateInstance AND %FormulaClass='Format Browse' AND INLIST(%Formula,%LocalData))
%ListQueue.%ValueConstruct = %Formula        #<!Assign formula result to display queue
    #ENDIF
  #ENDFOR
#ENDFOR
#INSERT(%BrowseRoutineFillGreenBar)
#RESUME
#ENDAT
#!
#!
#!
#AT(%ADOBrowseMethodCodeSection,%ActiveTemplateInstance,'Refresh', '()'),PRIORITY(2500)
#IF(ITEMS(%SortOrder))
  #EMBED(%svBeforeSetQueryOnRefresh, 'Before call to SetQuery() on Refresh'), TREE('Local Objects|' & %ThisObjectName & '|Before call to SetQuery() on Refresh')
#FOR(%SortOrder),WHERE(%SortCondition)
  #IF(INSTANCE(%SortOrder)=1)
IF %SortCondition THEN
  #ELSE
ELSIF %SortCondition THEN
  #ENDIF
  #SET(%svSQLStatement, %ADOBrowseControlSQLToFill)
  #IF(%ADOBrowseControlConditionalSQLToFillWhere)
    #SET(%svSQLStatement, %svSQLStatement &' '& %ADOBrowseControlConditionalSQLToFillWhere)
  #ENDIF
  #IF(%ADOBrowseControlConditionalSQLToFillOrderBy)
    #SET(%svSQLStatement , %svSQLStatement &' '& %ADOBrowseControlConditionalSQLToFillOrderBy)
  #ENDIF  
  %ThisObjectName.SetQuery('%svSQLStatement')
#ENDFOR
ELSE
  #SET(%svSQLStatement, %ADOBrowseControlSQLToFill)
  #IF(%ADOBrowseControlSQLToFillWhere)
    #SET(%svSQLStatement, %svSQLStatement & ' ' & %ADOBrowseControlSQLToFillWhere)
  #ENDIF
  #IF(%ADOBrowseControlSQLToFillOrderBy)
    #SET(%svSQLStatement , %svSQLStatement & ' ' & %ADOBrowseControlSQLToFillOrderBy)
  #ENDIF
  %ThisObjectName.SetQuery('%svSQLStatement')
END
#ENDIF
#ENDAT
#!
#!
#!
#!*****************************************************************************************
#GROUP(%ADOClearOtherSort, %pAdoField, %pSortValue),PRESERVE
#IF(%pSortValue = 1)
  #FOR(%ADoQueryFields), WHERE(%ADOQueryField <> %pAdoField)
    #SET(%IsDefaultSort, 0)
  #ENDFOR
#ENDIF
#!*****************************************************************************************
#GROUP(%ADOBrowseInitCode),PRESERVE
#DECLARE(%adoTmpFieldName)
#DECLARE(%TmpFileName)
#DECLARE(%TmpFieldName)
#DECLARE(%ADOMultiLineSelect), MULTI
#CALL(%LoadQueryFields)
#CALL(%SQLGenerateBrowseSQLWhere,%ADOBrowseControlSQLToFillWhere)
! 
! ADO Browse code %ThisObjectName
! 
  #IF(%svnewConnection)
  %svNewConnectionObject &= NEW(%svConnectionClass)
  hr = %svNewConnectionObject.Init()
  IF hr = S_OK
    #! #IF(sub(%svConnectionString, 1, 1) = '!')
    #!   #SET(%svGenericVar, slice(%svConnectionString, 2, len(%svConnectionString)))
    #! hr = %svNewConnectionObject.Connect(%svGenericVar)
    #! #ELSE
    #! hr = %svNewConnectionObject.Connect('%svConnectionString')
    #! #ENDIF
        #CASE(%svConnectStrSource)
        #OF('From a Login procedure')
    IF %svLoginProcedureName(%svNewConnectionObject) = RequestCancelled

    END
        #OF('From Dictionary')
    %svConnectionStrVarName = %svConnectStrFromDCT
    #EMBED(%ADOLocalNewConnectionCode,'Local ADO Connections'),%svNewConnectionObject,'After Connection string variable assignment and before calling Connect'
    Hr = %svNewConnectionObject.Connect(%svConnectionStrVarName) #<! Call the connect method to establish connection with the db
        #OF('UDL File read at runtime')
          #IF(slice(%svUDLFileNameAtRuntime, 1, 1) = '!')
            #DECLARE(%svUDLFileNameVar)
            #SET(%svUDLFileNameVar, slice(%svUDLFileNameAtRuntime, 2, len(%svUDLFileNameAtRuntime)))
    Hr = %svNewConnectionObject.Connect('File Name=' & clip(%svUDLFileNameVar))
          #ELSE
    Hr = %svNewConnectionObject.Connect('File Name=%svUDLFileNameAtRuntime')
          #ENDIF
        #OF('UDL File picked and read in the template')
    %svConnectionStrVarName = '%svStrUDL'
    #EMBED(%ADOLocalNewConnectionCode,'Local ADO Connections'),%svNewConnectionObject,'After Connection string variable assignment and before calling Connect'
    Hr = %svNewConnectionObject.Connect(%svConnectionStrVarName)
        #OF('Connection Builder')
    %svConnectionStrVarName = '%svStrFromCnBld'
    #EMBED(%ADOLocalNewConnectionCode,'Local ADO Connections'),%svNewConnectionObject,'After Connection string variable assignment and before calling Connect'
    Hr = %svNewConnectionObject.Connect(%svConnectionStrVarName)
        #ENDCASE
        #IF(%svGLOErrorOnConnFailed)
    IF hr <> S_OK
      %svGLOADOErrorProcedureName(%svNewConnectionObject)
    END
        #ENDIF
    IF hr = S_OK
  #ENDIF  
      %svDBObject &= new(%svDBClass)
      IF NOT (%svDBObject &= null)
        %svDBObject.SETConnection(%svConnectionObject)    ! SET the connection
        #INSERT(%AddFieldsToMapper,%svDBObject, %svMapperBlankBaseTable)
        %svDBObject.SetCursorLocation(%svADOCursorLocationEnum)   ! SET the cursor location
        %svDBObject.SetCursorType(%svADOCursorType) ! SET the Cursor type
        %svDBObject.SetLockType(%svADOLockType)     ! SET the lock type
        %svDBObject.InitDataInfo(%ListQueue.DataInfo)
        #IF(%svExecuteOption <> '(None)')
        %svDBObject.SetExecOptions(%svExecuteOption)
        #ENDIF
      ELSE
        #EMBED(%ADOBrowseCode, 'DB Object creation failed'), %ThisObjectName ,'DB Object creation failed',TREE('Local Objects|ADO Objects|Code Embed|'&%ThisObjectName&'|DB Object creation failed')
        #if(%AppTemplateFamily='ABC')
        ReturnValue = level:fatal
        #endif
      END
  #IF(%svNewConnection)  
    ELSE
      #EMBED(%ADOBrowseCode, 'Call to Connect method failed'), %ThisObjectName ,'Call to Connect method failed',TREE('Local Objects|ADO Objects|Code Embed|'&%ThisObjectName&'|Call to Connect method failed')
      ReturnValue = level:fatal
    END
  ELSE
    #EMBED(%ADOBrowseCode, 'Connection Init failed'), %ThisObjectName ,'Connection Init failed',TREE('Local Objects|ADO Objects|Code Embed|'&%ThisObjectName&'|Connection Init failed')
    ReturnValue = level:fatal
  END
  #ENDIF
 #IF(%AppTemplateFamily='ABC')
IF ReturnValue
  RETURN(ReturnValue)
END
  #ENDIF


%ThisObjectName.SetCopyToCB(%svBrowseCopyToClipboard)

%ThisObjectName.SETDB(%svDBObject.ADO_SQL)
  #FIX(%Control, %ListControl)
  #FOR(%ADOQueryFields)
    #FIX(%ControlField, %ADOQueryField)
    #FIX(%Field, %ControlField)
    #IF(%ControlFieldHasIcon)
      #IF(%ControlFieldIcon)
        #INSERT(%AddBrowseIcon,%ControlFieldIcon,%ControlFieldIconIsNumber)
      #ENDIF
      #FOR(%ConditionalIcons)
        #INSERT(%AddBrowseIcon,%ConditionalControlFieldIcon,%ConditionalControlFieldIconIsNumber)
      #ENDFOR
    #ENDIF
%ThisObjectName.FieldPair.ADDFields(%ListQueue.%ADOQueryField, %ADOQueryField)
  #ENDFOR
  #FOR(%HotFields)
    #FIX(%Field,%HotField)
%ThisObjectName.FieldPair.ADDFields(%ListQueue.%HotField, %HotField)
  #ENDFOR
  #IF(NOT %ADOBrowseControlSQLToFillSelectOverride)
  #! #IF(%ADOBrowseControlSQLToFill = '')
    #CALL(%SQLGenerateBrowseSQLSelect, %ADOBrowseControlSQLToFill)
  #ENDIF
  #SET(%svSQLStatement, %ADOBrowseControlSQLToFill)
  #IF(%ADOBrowseControlSQLToFillWhere)
    #SET(%svSQLStatement, %svSQLStatement &' '&%ADOBrowseControlSQLToFillWhere)
  #ENDIF
  #IF(%ADOBrowseControlSQLToFillOrderBy)
    #SET(%svSQLStatement , %svSQLStatement &' '&%ADOBrowseControlSQLToFillOrderBy)
  #ENDIF
#EMBED(%ADOBrowseCode, 'Before call to SetQuery()'), %ThisObjectName ,'Before call to SetQuery()',TREE('Local Objects|ADO Objects|Code Embed|'&%ThisObjectName&'|Before call to SetQuery()')
#IF(LEN(%svSQLStatement) < 512)
%ThisObjectName.SetQuery('%svSQLStatement')
#ELSE
  #PURGE(%ADOMultiLineSelect)
  #CALL(%ADOSplitStatement, %svSQLStatement, %ADOMultiLineSelect)
  #IF(ITEMS(%ADOMultiLineSelect))
    #SELECT(%ADOMultiLineSelect, 1)
%ThisObjectName.SetQuery('%ADOMultiLineSelect' &|
    #FOR(%ADOMultiLineSelect)
      #IF(INSTANCE(%ADOMultiLineSelect) = 1)
        #CYCLE
      #ELSE
        #IF(INSTANCE(%ADOMultiLineSelect) <> ITEMS(%ADOMultiLineSelect))
     '%ADOMultiLineSelect' &|
        #ELSE
     '%ADOMultiLineSelect')
        #ENDIF
      #ENDIF
    #ENDFOR
  #ENDIF
#ENDIF
  #!#PRIORITY(8050)
%ThisObjectName.Init(%ListControl, %ListQueue, %Window)
#declare(%ndx)
#declare(%tmpAttribute)
#fix(%Control, %ListControl)
#for(%ControlField)
  #find(%ADOQueryField, %ControlField)
  #if(%ADOQueryField)
    #if(%ADOQueryFieldType = 'Expression')
      #set(%ndx, instance(%Controlfield))
%ThisObjectName.SetSQLColQ(%ndx, '%ADOQueryFieldExpression')
    #else
      #find(%Field, %ControlField)
      #if(%Field)
        #set(%ndx, instance(%Controlfield))
        #if(%FieldName)
          #if(slice(%FieldName, 1, 1) = '''')
            #set(%AdoTmpFieldName, slice(%FieldName, 2, len(clip(%FieldName)) - 1))
            #if(instring('|', %AdoTmpFieldName, 1, 1))
              #set(%AdoTmpFieldName, slice(%AdoTmpFieldName, 1,  instring('|', %AdoTmpFieldName, 1, 1) - 1) )
              #set(%AdoTmpFieldName, clip(%AdoTmpFieldName))
            #endif
%ThisObjectName.SetSQLColQ(%ndx, '%AdoTmpFieldName')
          #else
            #if(instring('|', %FieldName, 1, 1))
              #set(%AdoTmpFieldName, slice(%FieldName, 1,  instring('|', %FieldName, 1, 1) - 1) )
              #set(%AdoTmpFieldName, clip(%AdoTmpFieldName))
            #endif
%ThisObjectName.SetSQLColQ(%ndx, '%AdoTmpFieldName')
          #endif
        #else
          #if(%FieldUserOptions)
            #set(%tmpAttribute, extract(%FieldUserOptions, 'DateTime', 1))
            #if(%tmpAttribute)
%ThisObjectName.SetSQLColQ(%ndx, '%tmpAttribute')
            #else
              #set(%TmpFileName, %SQLGetTrueFileName())
              #set(%TmpFieldName, %SQLGetTrueFieldNameNoPrefix(%Field))
%ThisObjectName.SetSQLColQ(%ndx, '%TmpFileName.%TmpFieldName')
            #endif
          #else
            #set(%TmpFileName, %SQLGetTrueFileName())
            #set(%TmpFieldName, %SQLGetTrueFieldNameNoPrefix(%Field))
%ThisObjectName.SetSQLColQ(%ndx, '%TmpFileName.%TmpFieldName')
          #endif
        #endif
      #endif
    #endif
  #endif
#endfor
#FOR(%IconList),WHERE(%IconListType <> 'Index' AND %IconListType <> 'VarIndex')
  #SET(%ValueConstruct,INSTANCE(%IconList))
  #IF(%IconListType = 'Built-In')
%ListControl{PROP:IconList,%ValueConstruct} = %IconList
  #ELSIF(%IconListType = 'Variable')
    #SET(%IconNameValue, SUB(%IconList, 2, LEN(%IconList) - 1))
%ListControl{PROP:IconList,%ValueConstruct} = %IconNameValue
  #ELSIF(%IconListType = 'File')
    #IF(SUB(%IconList,1,1) = '~')
%ListControl{PROP:IconList,%ValueConstruct} = '%IconList'
    #ELSE
%ListControl{PROP:IconList,%ValueConstruct} = '~%IconList'
    #ENDIF
  #ENDIF
#ENDFOR
%svDBObject.SetPageSize(%ListControl{prop:items})
  #FOR(%ADOQueryFields), WHERE(%CannotBeHidden = 1)
    #FIX(%ControlField, %ADOQueryField)
    #IF(%ControlField)
IF ~%ThisObjectName.SetAlwaysVisible('%ControlFieldHeader')
  #EMBED(%ADOBrowseCode, 'SetAlwaysVisible call failed'), %ThisObjectName ,'Columns',%ControlField,'SetAlwaysVisible call failed',TREE('Local Objects|ADO Objects|Code Embed|'&%ThisObjectName&'Columns'&%ControlField&'|SetAlwaysVisible call failed')
END
    #ENDIF
  #ENDFOR
  #FOR(%ADOQueryFields), WHERE(%CannotBeSorted = 1)
    #FIX(%ControlField, %ADOQueryField)
    #IF(%ControlField)
IF ~%ThisObjectName.SetNoSortOn('%ControlFieldHeader')
  #EMBED(%ADOBrowseCode, 'Call to SetNoSortOn failed'), %ThisObjectName ,'Columns',%ControlField,'Call to SetNoSortOn failed',TREE('Local Objects|ADO Objects|Code Embed|'&%ThisObjectName&'Columns'&%ControlField&'|Call to SetNoSortOn failed')
END
    #ENDIF
  #ENDFOR
#EMBED(%ADOBrowseCodeSetResync, 'Place holder for Resync settings'), %ActiveTemplateInstance, HIDE
  #FOR(%ADOQueryFields)
    #IF(%IsDefaultSort = 1)
      #FIND(%ControlField, %ADOQueryField)
      #SET(%svPosInString, instance(%ControlField))
if %ThisObjectName.ApplySort('%svPosInString+').
      #BREAK
    #ENDIF
  #ENDFOR
#IF(%svRSInQueue)
%svDBObject.SetMaxRecords(%svADORowsToRead)
#ENDIF
#IF(upper(%LoadMethod) = 'TABLE')
%ThisObjectName.TableLoad = true
#ENDIF
  #IF(%svBrowseGenerateRefresh = 1)
#EMBED(%ADOBrowseCode, 'Before first call to Refresh()'), %ThisObjectName ,'Before first call to Refresh()',TREE('Local Objects|ADO Objects|Code Embed|'&%ThisObjectName&'|Before first call to Refresh()')
%ThisObjectName.Refresh()
  #ENDIF
#!------------------------------------------------
#GROUP(%ADOBrowseManagerVirtuals, %TreeText, %DataText, %CodeText)
#EMBED(%ADOBrowseMethodDataSection,'ADOBrowse Method Data Section'),%ActiveTemplateInstance, %pClassMethod,%pClassMethodPrototype,LABEL,DATA,PREPARE(%FixClassName(%FixBaseClassToUse('Default'))),TREE(%TreeText & %DataText)
  #?CODE
  #EMBED(%ADOBrowseMethodCodeSection,'ADOBrowse Method Executable Code Section'),%ActiveTemplateInstance, %pClassMethod,%pClassMethodPrototype,PREPARE(%FixClassName(%FixBaseClassToUse('Default'))),TREE(%TreeText & %CodeText)
#!------------------------------------------------
#GROUP(%ADOSplitStatement, %pSVStatement, *%MValueSymbol)
#DECLARE(%svCommaPosition)
#DECLARE(%svTmpString)
#SET(%svTmpString, %pSVStatement)
#SET(%svCommaPosition, INSTRING(',', %svTmpString, 1, 1))
#IF(%svCommaPosition)
  #ADD(%MValueSymbol, slice(%svTmpString, 1 , %svCommaPosition))
  #CALL(%ADOSplitStatement, slice(%svTmpString, %svCommaPosition + 1, len(%svTmpString)), %MValueSymbol)
#ELSE
  #ADD(%MValueSymbol, %svTmpString)
#ENDIF
#!----------------------------------------------------
#GROUP(%GetFirstGlobalConnection)
 #FOR(%svGlobalConnections)
    #RETURN(%svGlobalConnectionName)
    #BREAK
 #ENDFOR
 #RETURN(0)
#!------------------------------------------------
#GROUP(%GetGlobalConnectionVariable,%pConnectionInstance),AUTO
#DECLARE(%LocConnectionName)
 #FIX(%svGlobalConnections,%pConnectionInstance)
 #IF(%svGlobalConnections)
    #RETURN(%svGlobalConnectionName)
 #ELSE
    #RETURN('')
 #ENDIF
#!------------------------------------------------
#GROUP(%GetFirstOBYFields)
 #FOR(%OBYFields)
    #RETURN(%OBYField)
    #BREAK
 #ENDFOR
 #RETURN(0)
#!------------------------------------------------
#GROUP(%GetFirstQueryFields)
 #FOR(%ADOQueryFields)
    #RETURN(%ADOQueryField)
    #BREAK
 #ENDFOR
 #RETURN(0)
#!------------------------------------------------
#GROUP(%LoadOBYFieldsFromFile,%parFile,%pReport=0),AUTO
#DECLARE(%ADOFound)
#DECLARE(%LocUniqueADOQueryFields),MULTI,UNIQUE
#SET(%ADOFound,0)
#FIX(%File,%parFile)
#IF(%pReport)
   #FOR(%ReportControl)
    #IF(%ReportControlType='LIST' OR %ReportControlType='COMBO' OR %ReportControlType='SPIN')
        #FOR(%ReportControlField)
            #ADD(%LocUniqueADOQueryFields,%ReportControlField)
        #ENDFOR
    #ELSIF(%ReportControlType='STRING' OR %ReportControlType='TEXT')
        #ADD(%LocUniqueADOQueryFields,%ReportControlUse)
    #ELSE
    #ENDIF
   #ENDFOR
#ELSE
   #FOR(%ControlField)
      #FOR(%Field)
         #IF(%ControlField=%Field)
            #ADD(%LocUniqueADOQueryFields,%ControlField)
         #ENDIF
      #ENDFOR
   #ENDFOR
#ENDIF
#FOR(%LocUniqueADOQueryFields)
     #ADD(%OBYFields, ITEMS(%OBYFields)+1)
     #SET(%OBYField, %LocUniqueADOQueryFields)
     #SET(%OBYFieldInstance,0)
#ENDFOR
#FOR(%HotFields)
   #FIX(%File,%parFile)
   #FOR(%Field)
      #IF(%HotField=%Field)
         #SET(%ADOFound,0)
         #FOR(%OBYFields),WHERE(%OBYField=%HotField)
             #SET(%ADOFound,1)
             #BREAK
         #ENDFOR
         #IF(%ADOFound=0)
             #ADD(%OBYFields, ITEMS(%OBYFields)+1)
             #SET(%OBYField, %HotField)
             #SET(%OBYFieldInstance,%HotFields)
         #ENDIF
      #ENDIF
   #ENDFOR
#ENDFOR
#!------------------------------------------------
#GROUP(%LoadOBYFields,%pReport=0),AUTO
  #FREE(%OBYFields)
  #CALL(%LoadOBYFieldsFromFile,%Primary,%pReport)
  #FOR(%Secondary)
        #CALL(%LoadOBYFieldsFromFile,%Secondary,%pReport)
  #ENDFOR
#!--------------------------------------------------------------
#GROUP(%OBYFieldNotPopulated,%pField,%pInstance=0),AUTO
         #DECLARE(%ADOFound)
         #SET(%ADOFound,1)
         #FOR(%OBYFields)
           #IF(%OBYField=%pField)
                #IF(%pInstance)
                   #IF(%pInstance<>%OBYFieldInstance)
                     #SET(%ADOFound,0)
                     #BREAK
                   #ENDIF
                #ELSE
                   #SET(%ADOFound,0)
                   #BREAK
                #ENDIF
           #ENDIF
         #ENDFOR
         #RETURN(%ADOFound)
#!--------------------------------------------------------------
#GROUP(%OBYFieldNotUsed)
  #FOR(%OBYFieldSort)
     #IF(%OBYFieldSortCol=%OBYField)
        #RETURN(0)
     #ENDIF
  #ENDFOR
  #RETURN(1)
#!--------------------------------------------------------------
#GROUP(%GetRangeName,%pSortField,%pUseStatic,%pNegate,%pRangeLimitType,%pVariable,%pVariableLow,%pVariableHigh,%pStatic,%pStaticLow,%pStaticHigh),AUTO
#DECLARE(%RV)
#DECLARE(%SingleVal)
#DECLARE(%LowVal)
#DECLARE(%HighVal)
#IF(%pUseStatic)
   #SET(%SingleVal,''''&%pStatic&'''')
   #SET(%LowVal,''''&%pStaticLow&'''')
   #SET(%HighVal,''''&%pStaticHigh&'''')
#ELSE
   #SET(%SingleVal,%pVariable)
   #SET(%LowVal,%pVariableLow)
   #SET(%HighVal,%pVariableHigh)
#ENDIF
#SET(%RV,'')
#IF(%pNegate)
    #SET(%RV,' NOT')
#ENDIF
#CASE(%pRangeLimitType)
#OF('Single Value')
    #SET(%RV,%RV&' = '&%SingleVal)
#OF('Range of Values')
    #SET(%RV,%RV&' >= '&%LowVal&' AND <<= '&%HighVal)
#OF('Less Than')
    #SET(%RV,%RV&' << '&%SingleVal)
#OF('Great Than')
    #SET(%RV,%RV&' > '&%SingleVal)
#OF('IN')
    #SET(%RV,%RV&' IN('&%SingleVal&')')
#OF('Begins With')
    #SET(%RV,%RV&' Begins With('&%SingleVal&')')
#OF('Ends With')
    #SET(%RV,%RV&' Ends With('&%SingleVal&')')
#OF('Contains')
    #SET(%RV,%RV&' Contains('&%SingleVal&')')
#ENDCASE
#RETURN(%RV)
#!------------------------------------------------
#GROUP(%LoadQueryFields,%pOnReport=0),AUTO, PRESERVE
#DECLARE(%ADOFound)
#DECLARE(%ADOCount)
#DECLARE(%LocUniqueADOQueryFields), MULTI, UNIQUE
#DECLARE(%LocADOQueryFields), MULTI
#DECLARE(%LocADOQueryFieldHotField, %LocADOQueryFields)
#DECLARE(%LocADOQueryField, %LocADOQueryFields)
#DECLARE(%LocADOQueryFieldType, %LocADOQueryFields)
#DECLARE(%LocADOQueryFieldAS, %LocADOQueryFields)
#DECLARE(%LocADOQueryFieldASLabel, %LocADOQueryFields)
#DECLARE(%LocADOQueryFieldExpression, %LocADOQueryFields)
#DECLARE(%LocADOQueryFieldExpressionType, %LocADOQueryFields)
#DECLARE(%LocCannotBeSorted, %LocADOQueryFields)
#DECLARE(%LocCannotBeHidden, %LocADOQueryFields)
#DECLARE(%LocIsDefaultSort, %LocADOQueryFields)
#! save the information
#FOR(%ADOQueryFields), WHERE(%ADOQueryFieldASLabel <> '' OR %ADOQueryFieldExpression <> '' OR %CannotBeSorted OR %CannotBeHidden OR %IsDefaultSort)
   #ADD(%LocADOQueryFields, ITEMS(%LocADOQueryFields))
   #SET(%LocADOQueryFieldHotField, %ADOQueryFieldHotField)
   #SET(%LocADOQueryField, %ADOQueryField)
   #SET(%LocADOQueryFieldType, %ADOQueryFieldType)
   #SET(%LocADOQueryFieldAS, %ADOQueryFieldAS)
   #SET(%LocADOQueryFieldASLabel, %ADOQueryFieldASLabel)
   #SET(%LocADOQueryFieldExpression, %ADOQueryFieldExpression)
   #SET(%LocADOQueryFieldExpressionType, %ADOQueryFieldExpressionType)
   #SET(%LocCannotBeSorted, %CannotBeSorted)
   #SET(%LocCannotBeHidden, %CannotBeHidden)
   #SET(%LocIsDefaultSort, %IsDefaultSort)
#ENDFOR
#FREE(%ADOQueryFields)
#IF(%pOnReport)
   #!  ADD all the Report Fields
   #FOR(%ReportControl)
#!
#!
#!%ReportControlStatement
#!
    #IF(%ReportControlType='LIST' OR %ReportControlType='COMBO' OR %ReportControlType='SPIN')
        #FOR(%ReportControlField)
            #ADD(%LocUniqueADOQueryFields,%ReportControlField)
        #ENDFOR
    #ELSIF(%ReportControlType='STRING' OR %ReportControlType='TEXT')
        #ADD(%LocUniqueADOQueryFields,%ReportControlUse)
    #ELSE
    #ENDIF
#!
   #ENDFOR
#ELSE
   #!  ADD all the Listbox
   #FOR(%Control), WHERE(%ControlInstance = %ActiveTemplateInstance)
     #FOR(%ControlField)
       #ADD(%LocUniqueADOQueryFields,%ControlField)
     #ENDFOR
   #ENDFOR
#ENDIF
#SET(%ADOCount, 1)
#FOR(%LocUniqueADOQueryFields)
   #ADD(%ADOQueryFields, %ADOCount)
   #SET(%ADOQueryField, %LocUniqueADOQueryFields)
   #SET(%ADOCount, %ADOCount + 1)
   #SET(%ADOQueryFieldHotField, 1)
   #SET(%ADOQueryFieldType, 'Table Column')
   #SET(%ADOQueryFieldAS, 0)
   #SET(%ADOQueryFieldASLabel, '')
   #SET(%ADOQueryFieldExpression, '')
   #SET(%ADOQueryFieldExpressionType, 'LONG')
   #FIND(%HotField, %LocUniqueADOQueryFields)
   #IF(%HotField)
      #DELETE(%HotFields)
   #ENDIF
#ENDFOR
#FOR(%ADOQueryFields)
   #SET(%ADOFound, 0)
   #FIX(%File,%Primary)
   #IF(INLIST(%ADOQueryField, %Field))
      #SET(%ADOQueryFieldHotField, 0)
   #ELSE
      #FOR(%Secondary)
         #FIX(%File, %Secondary)
         #IF(INLIST(%ADOQueryField, %Field))
            #SET(%ADOQueryFieldHotField, 0)
            #BREAK
         #ELSE
            #SET(%ADOQueryFieldHotField, 1)
         #ENDIF
      #ENDFOR
   #ENDIF
   #FOR(%LocADOQueryFields)
        #IF(%LocADOQueryField = %ADOQueryField)
            #SET(%ADOQueryField, %LocADOQueryField)
            #SET(%ADOQueryFieldType, %LocADOQueryFieldType)
            #SET(%ADOQueryFieldAS, %LocADOQueryFieldAS)
            #SET(%ADOQueryFieldASLabel, %LocADOQueryFieldASLabel)
            #SET(%ADOQueryFieldExpression, %LocADOQueryFieldExpression)
            #SET(%ADOQueryFieldExpressionType, %LocADOQueryFieldExpressionType)
            #SET(%CannotBeSorted, %LocCannotBeSorted)
            #SET(%CannotBeHidden, %LocCannotBeHidden)
            #SET(%IsDefaultSort, %LocIsDefaultSort)
            #SET(%ADOFound, 1)
        #ENDIF
   #ENDFOR
   #IF(%ADOFound = 0 AND %ADOQueryFieldHotField = 1)
      #SET(%ADOQueryFieldType, 'HotField')
   #ENDIF
#ENDFOR
#!--------------------------------------------------------------
#GROUP(%AddSortFieldsToHotField),AUTO
#FOR(%OrderBYFieldSort)
     #CALL(%AddHotField,%OrderBYFieldSortCol)
#ENDFOR
#FOR(%SortOrder)
     #FOR(%ConditionalOrderBYFieldSort)
          #CALL(%AddHotField,%ConditionalOrderBYFieldSortCol)
     #ENDFOR
#ENDFOR
#!--------------------------------------------------------------
#GROUP(%SortFieldNotUsed,%pKeyField,%pInstance=0,%pDefaultSort=1),PRESERVE
#DECLARE(%ADOFieldNotFound)
#SET(%ADOFieldNotFound,1)
        #IF(%pDefaultSort=1)
             #SET(%ADOFieldNotFound,1)
             #FOR(%OrderBYFieldSort)
                 #IF(%OrderBYFieldSortCol=%pKeyField)
                     #IF(%pInstance)
                        #IF(%OrderBYFieldSort<>%pInstance)
                            #SET(%ADOFieldNotFound,0)
                            #BREAK
                        #ENDIF
                     #ELSE
                         #SET(%ADOFieldNotFound,0)
                         #BREAK
                     #ENDIF
                 #ENDIF
             #ENDFOR
        #ELSE
             #FOR(%ConditionalOrderBYFieldSort)
                 #IF(%ConditionalOrderBYFieldSortCol=%pKeyField)
                     #IF(%pInstance)
                        #IF(%ConditionalOrderBYFieldSort<>%pInstance)
                            #SET(%ADOFieldNotFound,0)
                            #BREAK
                        #ENDIF
                     #ELSE
                        #SET(%ADOFieldNotFound,0)
                        #BREAK
                     #ENDIF
                 #ENDIF
             #ENDFOR
        #ENDIF
#RETURN(%ADOFieldNotFound)
#!--------------------------------------------------------------
#GROUP(%AddKeyToHotfield,%pKeyToAdd),AUTO
#FIX(%FILE,%Primary)
#FIX(%Key,%pKeyToAdd)
#IF(%Key)
   #FOR(%KeyField)
        #CALL(%AddHotField,%KeyField)
   #ENDFOR
#ENDIF
#!--------------------------------------------------------------
#GROUP(%AddPrimaryKeyToSort,%pDefaultSort=1)
#FIX(%FILE,%Primary)
#CALL(%AddKeyToSort,%FilePrimaryKey,%pDefaultSort)
#!--------------------------------------------------------------
#GROUP(%AddKeyToSort,%pKeyToAdd,%pDefaultSort=1),AUTO
#DECLARE(%ADOFieldNotFound)
#DECLARE(%MaxInstance)
#SET(%MaxInstance,0)
#FIX(%FILE,%Primary)
#FIX(%Key,%pKeyToAdd)
#IF(%Key)
   #FOR(%KeyField)
        #!If not on the Browse Columns and not in the Hot fields
        #!Add it to the hot fields
        #CALL(%AddHotField,%KeyField)
        #!
        #!If not already in the sort columns
        #!Add it to the sort columns
        #IF(%pDefaultSort=1)
             #SET(%ADOFieldNotFound,1)
             #FOR(%OrderBYFieldSort)
                 #IF(%OrderBYFieldSort>%MaxInstance)
                    #SET(%MaxInstance,%OrderBYFieldSort)
                 #ENDIF
                 #IF(%OrderBYFieldSortCol=%KeyField)
                     #SET(%ADOFieldNotFound,0)
                     #BREAK
                 #ENDIF
             #ENDFOR
             #IF(%ADOFieldNotFound)
                 #ADD(%OrderBYFieldSort,%MaxInstance+1)
                 #SET(%OrderBYFieldSortCol,%KeyField)
                 #IF(%KeyFieldSequence='ASCENDING')
                    #SET(%OrderBYFieldSortDirection,'ASC')
                 #ELSE
                    #SET(%OrderBYFieldSortDirection,'DESC')
                 #ENDIF
             #ENDIF
        #ELSE
             #SET(%ADOFieldNotFound,1)
             #SET(%MaxInstance,0)
             #FOR(%ConditionalOrderBYFieldSort)
                 #IF(%ConditionalOrderBYFieldSort>%MaxInstance)
                    #SET(%MaxInstance,%ConditionalOrderBYFieldSort)
                 #ENDIF
                 #IF(%ConditionalOrderBYFieldSortCol=%KeyField)
                     #SET(%ADOFieldNotFound,0)
                     #BREAK
                 #ENDIF
             #ENDFOR
             #IF(%ADOFieldNotFound)
                 #ADD(%ConditionalOrderBYFieldSort,%MaxInstance+1)
                 #SET(%ConditionalOrderBYFieldSortCol,%KeyField)
                 #IF(%KeyFieldSequence='ASCENDING')
                    #SET(%ConditionalOrderBYFieldSortDirection,'ASC')
                 #ELSE
                    #SET(%ConditionalOrderBYFieldSortDirection,'DESC')
                 #ENDIF
             #ENDIF
        #ENDIF
   #ENDFOR
#ENDIF
#!-------------------------------------------------------------------------
#! If the field to add doesn't exist on HotFields, add it and return 1 else return 0
#GROUP(%AddHotField,%pHotField),AUTO
#DECLARE(%MaxHotFields)
#DECLARE(%lHotFieldAdded)
#SET(%lHotFieldAdded,1)
#SET(%MaxHotFields,1)
#FOR(%ADOQueryFields)
    #IF(%ADOQueryField=%pHotField)
        #SET(%lHotFieldAdded,0)
        #BREAK
    #ENDIF
#ENDFOR
#IF(%lHotFieldAdded)
   #FOR(%HotFields)
       #IF(%HotField=%pHotField)
           #SET(%lHotFieldAdded,0)
           #BREAK
       #ENDIF
       #IF(%MaxHotFields<%HotFields)
           #SET(%MaxHotFields,%HotFields)
       #ENDIF
   #ENDFOR
#ENDIF
#IF(%lHotFieldAdded=1)
    #ADD(%HotFields,%MaxHotFields+1)
    #SET(%HotField,%pHotField)
    #SET(%ADOHotFieldPosibleType,'AUTO')
#ENDIF
#RETURN(%lHotFieldAdded)
#!--------------------------------------
#GROUP(%SearchUniqueKey,%pFile),PRESERVE
#FIX(%File,%pFile)
#IF(%File)
   #IF(%FilePrimaryKey)
       #RETURN(%FilePrimaryKey)
   #ELSE
       #FOR(%Key)
            #IF(NOT %KeyDuplicate)
               #RETURN(%Key)
            #ENDIF
       #ENDFOR
   #ENDIF
#ENDIF
#!--------------------------------------------------------------------------
#!--------------------------------------------------------------------------
#!----------------------------------------------------------------------------
#GROUP(%SQLGenerateBrowseSQLSelect,*%pSelectStatement), PRESERVE,AUTO
#DECLARE(%UsedTables),MULTI,UNIQUE
#DECLARE(%SQLPrimaryFileHolder)
#DECLARE(%SQLSecondaryFileHolder)
#DECLARE(%SQLSecondaryLoopControl)
#DECLARE(%SQLColumnName)
#DECLARE(%SQLRelationShipConstruct)
#DECLARE(%tmpFieldList), MULTI, UNIQUE
#DECLARE(%tmpFieldName)
#DECLARE(%tmpAttribute)
#SET(%pSelectStatement,'')
#PURGE(%tmpFieldList)
#FOR(%ADOQueryFields)
    #FIND(%Field,%ADOQueryField)
    #if(%FieldType = 'DATE' or %FieldType = 'TIME')
      #IF(%FieldUserOptions)
        #SET(%tmpAttribute, extract(%FieldUserOptions, 'ADOType', 1))
        #if(%TmpAttribute)
          #if(upper(%TmpAttribute) <> 'ADDBDATE' and upper(%TmpAttribute) <> 'ADDBTIME')
            #! Dealing with a datetime type field, look if col already populated
            #set(%tmpFieldName, %SQLGetTrueFieldNamenoPrefix(%Field))
            #FIND(%tmpFieldList, %tmpFieldName)
            #if(%tmpFieldList)
              #cycle
            #endif
          #endif
        #endif
      #endif
    #endif
    #CASE(%ADOQueryFieldType)
    #OF('Table Column')
        #IF(CLIP(%pSelectStatement))
          #if(%FieldType = 'DATE' or %FieldType = 'TIME')
            #IF(%FieldUserOptions)
              #SET(%tmpAttribute, extract(%FieldUserOptions, 'ADOType', 1))
              #if(%TmpAttribute)
                #case(upper(%tmpAttribute))
                #of('ADDBDATE')
                #orof('ADDBTIME')
                  #SET(%pSelectStatement,CLIP(%pSelectStatement) & ',' & %SQLGetTrueFieldNameNoPrefix(%Field))
                #else
                  #SET(%pSelectStatement,CLIP(%pSelectStatement) & ',' & %SQLGetTrueFieldNameNoPrefix(%Field))
                  #set(%tmpFieldName, %SQLGetTrueFieldNamenoPrefix(%Field))
                  #add(%tmpFieldList, %tmpFieldName)
                  #cycle
                #endcase
              #else
                #SET(%pSelectStatement,CLIP(%pSelectStatement) & ',' & %SQLGetTrueFieldName())
              #endif
            #ELSE
              #SET(%pSelectStatement,CLIP(%pSelectStatement) & ',' & %SQLGetTrueFieldName())
            #ENDIF
          #else
            #SET(%pSelectStatement,CLIP(%pSelectStatement) & ',' & %SQLGetTrueFieldName())
          #endif
        #ELSE
          #if(%FieldType = 'DATE' or %FieldType = 'TIME')
            #if(%FieldUserOptions)
              #set(%tmpAttribute, extract(%FieldUserOptions, 'ADOType', 1))
              #if(%tmpAttribute)
                #case(upper(%tmpAttribute))
                #of('ADDBDATE')
                #orof('ADDBTIME')
                  #SET(%pSelectStatement,CLIP(%pSelectStatement) & 'SELECT ' & %SQLGetTrueFieldNameNoPrefix(%Field))
                #else
                  #SET(%pSelectStatement,CLIP(%pSelectStatement) & 'SELECT ' & %SQLGetTrueFieldNameNoPrefix(%Field))
                  #set(%tmpFieldName, %SQLGetTrueFieldNamenoPrefix(%Field))
                  #add(%tmpFieldList, %tmpFieldName)
                  #cycle
                #endcase
              #else
                #SET(%pSelectStatement,CLIP(%pSelectStatement) & 'SELECT ' & %SQLGetTrueFieldName())
              #endif
            #else
              #SET(%pSelectStatement,CLIP(%pSelectStatement)&'SELECT '&%SQLGetTrueFieldName())
            #endif
          #else
            #SET(%pSelectStatement,CLIP(%pSelectStatement)&'SELECT '&%SQLGetTrueFieldName())
          #endif
        #ENDIF
        #IF(%ADOQueryFieldAS)
          #SET(%pSelectStatement, CLIP(%pSelectStatement) & ' AS ' & %ADOQueryFieldASLabel)
        #ENDIF
    #OF('Expression')
        #IF(CLIP(%pSelectStatement))
            #SET(%pSelectStatement,CLIP(%pSelectStatement)&','&%ADOQueryFieldExpression&' AS '&%ADOQueryFieldASLabel)
        #ELSE
            #SET(%pSelectStatement,CLIP(%pSelectStatement)&'SELECT '&%ADOQueryFieldExpression&' AS '&%ADOQueryFieldASLabel)
        #ENDIF
    #ENDCASE
    #IF(%File)
        #ADD(%UsedTables,%File)
    #ENDIF
#ENDFOR
#FOR(%HotFields)
    #FIND(%Field,%HotField)
    #if(%Field)
      #set(%tmpFieldName, %SQLGetTrueFieldNamenoPrefix(%Field))
      #FIND(%tmpFieldList, %tmpFieldName)
      #if(%tmpFieldList)
        #cycle
      #endif
    #endif
    #IF(CLIP(%pSelectStatement))
        #CASE(%ADOHotFieldType)
        #OF('Table Column')
            #SET(%pSelectStatement,CLIP(%pSelectStatement)&','&%SQLGetTrueFieldName())
            #IF(%ADOHotFieldAS)
               #SET(%pSelectStatement,CLIP(%pSelectStatement)&' AS '&%ADOHotFieldASLabel)
            #ENDIF
        #OF('Expression')
            #SET(%pSelectStatement,CLIP(%pSelectStatement)&','&%ADOHotFieldExpression&' AS '&%ADOHotFieldASLabel)
        #OF('HotField')
        #ENDCASE
    #ELSE
        #CASE(%ADOHotFieldType)
        #OF('Table Column')
            #!CALL(%SQLGetTrueColumnName,%HotField,%SQLColumnName)
            #!SET(%pSelectStatement,CLIP(%pSelectStatement)&'SELECT '&%SQLColumnName)
            #SET(%pSelectStatement,CLIP(%pSelectStatement)&'SELECT '&%SQLGetTrueFieldName())
            #IF(%ADOHotFieldAS)
               #SET(%pSelectStatement,CLIP(%pSelectStatement)&' AS '&%ADOHotFieldASLabel)
            #ENDIF
        #OF('Expression')
            #SET(%pSelectStatement,CLIP(%pSelectStatement)&'SELECT '&%ADOHotFieldExpression&' AS '&%ADOHotFieldASLabel)
        #OF('HotField')
        #ENDCASE
    #ENDIF
    #IF(%File)
        #ADD(%UsedTables,%File)
    #ENDIF
    #ADD(%tmpFieldList, %Field)
#ENDFOR
#IF(CLIP(%pSelectStatement))
    #CALL(%SQLConstructView,%pSelectStatement)
#ENDIF
#!----------------------------------------------------------------------------
#GROUP(%SQLGetConditionStatement,*%pStatement,%pField,%pRangeLimitType,%pSingleVal,%pLowVal,%pHighVal, %pUseStatic),AUTO
#declare(%svTmpLow)
#declare(%svTmpHigh)
#declare(%svTmpString)
#declare(%svStrPos)
#declare(%svValueList), multi
        #FIND(%Field,%pField)
        #CASE(%pRangeLimitType)
        #OF('Single Value')
          #IF(%FieldType = 'CSTRING' or %FIeldType = 'STRING')
            #if(%pUseStatic)
              #! Check if the first char is a quote
              #IF(slice(%pSingleVal, 1, 1) = '''')
                #SET(%pStatement, %SQLGetTrueFieldName() & ' = ''''' & quote( slice(%pSingleVal, 2 , len(%pSingleVal) - 1) ) & '''''')
              #else
                #SET(%pStatement, %SQLGetTrueFieldName() & ' = ''''' & quote(%pSingleVal) & '''''')
              #endif
            #else
               #SET(%pStatement, %SQLGetTrueFieldName() & ' = ' & %pSingleVal)
            #endif
          #ELSE
            #SET(%pStatement, %SQLGetTrueFieldName() & ' = ' & %pSingleVal)
          #ENDIF
        #OF('Range of Values')
          #IF(%FieldType = 'CSTRING' or %FieldType = 'STRING')
            #if(%pUseStatic)
              #if(slice(%pLowVal, 1, 1) = '''')
                #set(%svTmpLow, slice(%pLowVal, 2, len(%pLowVal) - 1))
              #else
                #set(%svTmpLow, %pLowVal)
              #endif
              #if(slice(%pHighVal, 1, 1) = '''')
                #set(%svTmpHigh, slice(%pHighVal, 2, len(%pHighVal) - 1))
              #else
                #set(%svTmpHigh, %pHighVal)
              #endif
              #SET(%pStatement, %SQLGetTrueFieldName() & ' BETWEEN ''''' & quote(%svTmpLow) & ''''' AND ''''' & quote(%svTmpHigh) & '''''' )
            #else
              #SET(%pStatement, %SQLGetTrueFieldName() & ' BETWEEN ' & %pLowVal & ' AND ' & %pHighVal)
            #endif
          #ELSE
            #SET(%pStatement, %SQLGetTrueFieldName() & ' BETWEEN ' & %pLowVal & ' AND ' & %pHighVal)
          #ENDIF
        #OF('Less Than')
          #IF(%FieldType = 'CSTRING' or %FieldType = 'STRING')
            #if(slice(%pSingleVal, 1, 1) = '''')
              SET(%pStatement, %SQLGetTrueFieldName() &' << ''''' & quote( slice(%pSingleVal, 2 , len(%pSingleVal) - 1) ) & '''''' )
            #else
              #SET(%pStatement,%SQLGetTrueFieldName()&' << ''''' & quote(%pSingleVal) & '''''' )
            #endif
          #ELSE
            #SET(%pStatement,%SQLGetTrueFieldName()&' << ' & %pSingleVal)
          #ENDIF
        #OF('Greater Than')
        #OROF('Great Than')
          #IF(%FieldType = 'CSTRING' or %FieldType = 'STRING')
            #if(slice(%pSingleVal, 1, 1) = '''')
              #SET(%pStatement, %SQLGetTrueFieldName() & ' > ''''' & quote( slice(%pSingleVal, 2 , len(%pSingleVal) - 1) ) & '''''' )
            #else
              #SET(%pStatement, %SQLGetTrueFieldName() & ' > ''''' & quote(%pSingleVal) & '''''' )
            #endif
          #ELSE
            #SET(%pStatement, %SQLGetTrueFieldName() & ' > ' & %pSingleVal )
          #ENDIF
        #OF('IN')
            #if(%FieldType = 'CSTRING' or %FieldType = 'STRING')
              #purge(%svValueList)
              #set(%svTmpString, %pSingleVal)
              #loop
                #set(%svStrPos, instring(',', %svTmpString, 1, 1))
                #if(%svStrPos)
                  #add(%svValueList, left(slice(%svTmpString, 1, %svStrPos - 1)))
                  #set(%svTmpString, left(slice(%svTmpString, %svStrPos + 1, len(%svTmpString))))
                #else
                  #add(%svValueList, left(clip(%svTmpString)))
                  #break
                #endif
              #endloop
              #set(%svTmpString, '')
              #for(%svValueList)
                #if(slice(%svValueList, 1, 1) = '''')
                  #set(%svTmpString, %svTmpString &  '''''' & quote(slice(%svValueList, 2, len(%svValueList) - 1)) & '''''')
                #else
                  #set(%svTmpString, %svTmpString & '''''' & quote(%svValueList) & '''''')
                #endif
                #if(instance(%svValueList) <> items(%svValueList))
                  #set(%svTmpString, %svTmpString & ', ' )
                #endif
              #endfor
              #SET(%pStatement,%SQLGetTrueFieldName() & ' IN (' & %svTmpString & ')')
            #else
              #SET(%pStatement,%SQLGetTrueFieldName() & ' IN (' & %pSingleVal & ')')
            #endif
        #OF('Begins With')
            #if(%FieldType = 'CSTRING' or %FieldType = 'STRING')
              #IF(slice(%pSingleVal, 1, 1) = '''')
                #SET(%pStatement,%SQLGetTrueFieldName() & ' LIKE ''''' & quote( slice(%pSingleVal, 2 , len(%pSingleVal) - 1) ) & '%' & '''''')
              #else
                #SET(%pStatement,%SQLGetTrueFieldName() & ' LIKE ''''' & quote(%pSingleVal) & '%' & '''''')
              #endif
            #endif
        #OF('Ends With')
            #if(%FieldType = 'CSTRING' or %FieldType = 'STRING')
              #IF(slice(%pSingleVal, 1, 1) = '''')
                #SET(%pStatement,%SQLGetTrueFieldName() & ' LIKE ''''' & '%' & quote( slice(%pSingleVal, 2 , len(%pSingleVal) - 1) ) & '''''')
              #else
                #SET(%pStatement,%SQLGetTrueFieldName() & ' LIKE ''''' & '%' & quote(%pSingleVal) & '''''')
              #endif
            #endif
        #OF('Contains')
            #if(%FieldType = 'CSTRING' or %FieldType = 'STRING')
              #IF(slice(%pSingleVal, 1, 1) = '''')
                #SET(%pStatement,%SQLGetTrueFieldName() & ' LIKE ''''' & '%' & quote( slice(%pSingleVal, 2 , len(%pSingleVal) - 1) ) & '%' & '''''')
              #else
                #SET(%pStatement,%SQLGetTrueFieldName() & ' LIKE ''''' & '%' & quote(%pSingleVal) & '%' & '''''')
              #endif
            #endif
        #ENDCASE
#!----------------------------------------------------------------------------
#GROUP(%SQLGenerateBrowseSQLWhere,*%pWhereStatement,%pConditional=0),AUTO
#DECLARE(%SingleVal)
#DECLARE(%LowVal)
#DECLARE(%HighVal)
#DECLARE(%lStatement)
#SET(%pWhereStatement,'')
#IF(%pConditional=0)
    #FOR(%WHEREFieldSort)
        #FIND(%Field, %WHEREFieldSortCol)
        #IF(%Field)
          #IF(%FieldSortColRangeUseStatic)
            #! #if(%FieldType = 'CSTRING' or %FieldType = 'STRING')
            #!   #SET(%SingleVal,%FieldSortColRangeStatic)
            #!   #SET(%LowVal,%FieldSortColRangeStaticLow)
            #!   #SET(%HighVal,%FieldSortColRangeStaticHigh)
            #! #else
              #SET(%SingleVal,%FieldSortColRangeStatic)
              #SET(%LowVal,%FieldSortColRangeStaticLow)
              #SET(%HighVal,%FieldSortColRangeStaticHigh)
            #! #endif
          #ELSE
            #if(%FieldType = 'CSTRING' or %FieldType = 'STRING')
               #SET(%SingleVal,'''''''' & ' & quote(' & %FieldSortColRangeVariable & ') & ' & '''''''')
               #SET(%LowVal,'''''''' & ' & quote(' & %FieldSortColRangeVariableLow & ') & ' & '''''''')
               #SET(%HighVal,'''''''' & ' & quote(' & %FieldSortColRangeVariableHigh & ') & ' & '''''''')
            #else
              #SET(%SingleVal,''' & ' & %FieldSortColRangeVariable & ' & ''')
              #SET(%LowVal,''' & ' & %FieldSortColRangeVariableLow & ' & ''')
              #SET(%HighVal,''' & ' & %FieldSortColRangeVariableHigh & ' & ''')
            #endif
          #ENDIF
        #ENDIF
        #IF(CLIP(%pWhereStatement))
            #SET(%pWhereStatement,CLIP(%pWhereStatement)&' AND')
        #ENDIF
        #SET(%lStatement,'')
        #CALL(%SQLGetConditionStatement,%lStatement,%WHEREFieldSortCol,%RangeLimitType,%SingleVal,%LowVal,%HighVal, %FieldSortColRangeUseStatic)
        #IF(%FieldSortColRangeNegate)
            #SET(%pWhereStatement,CLIP(%pWhereStatement)&' NOT ('&%lStatement&')')
        #ELSE
            #SET(%pWhereStatement,CLIP(%pWhereStatement)&' '&%lStatement)
        #ENDIF
    #ENDFOR
#ELSE
    #FOR(%ConditionalWHEREFieldSort)
        #IF(%ConditionalSortColRangeUseStatic)
           #SET(%SingleVal,%ConditionalSortColRangeStatic)
           #SET(%LowVal,%ConditionalSortColRangeStaticLow)
           #SET(%HighVal,%ConditionalSortColRangeStaticHigh)
        #ELSE
           #SET(%SingleVal,'''&'&%ConditionalSortColRangeVariable&'&''')
           #SET(%LowVal,'''&'&%ConditionalSortColRangeVariableLow&'&''')
           #SET(%HighVal,'''&'&%ConditionalSortColRangeVariableHigh&'&''')
        #ENDIF
        #IF(CLIP(%pWhereStatement))
            #SET(%pWhereStatement,CLIP(%pWhereStatement)&' AND')
        #ENDIF
        #SET(%lStatement,'')
        #CALL(%SQLGetConditionStatement,%lStatement,%ConditionalWHEREFieldSortCol,%ConditionalRangeLimitType,%SingleVal,%LowVal,%HighVal, %ConditionalSortColRangeUseStatic)
        #IF(%ConditionalSortColRangeNegate)
            #SET(%pWhereStatement,CLIP(%pWhereStatement)&' NOT ('&%lStatement&')')
        #ELSE
            #SET(%pWhereStatement,CLIP(%pWhereStatement)&' '&%lStatement)
        #ENDIF
    #ENDFOR
#ENDIF
#IF(CLIP(%pWhereStatement))
    #SET(%pWhereStatement,'WHERE '&CLIP(%pWhereStatement))
#ENDIF
#!
#!----------------------------------------------------------------------------
#GROUP(%SQLGenerateBrowseSQLOrderBy,*%pOrderStatement,%pConditional=0), PRESERVE,AUTO
#SET(%pOrderStatement,'')
#IF(%pConditional=0)
    #FOR(%OrderBYFieldSort)
        #IF(CLIP(%pOrderStatement))
            #SET(%pOrderStatement,CLIP(%pOrderStatement)&',')
        #ENDIF
        #FIND(%Field,%OrderBYFieldSortCol)
        #SET(%pOrderStatement,CLIP(%pOrderStatement) & ' ' & %SQLGetTrueFieldName() & ' ' & %OrderBYFieldSortDirection & ' ')
    #ENDFOR
#ELSE
    #FOR(%ConditionalOrderBYFieldSort)
        #IF(CLIP(%pOrderStatement))
            #SET(%pOrderStatement,CLIP(%pOrderStatement)&',')
        #ENDIF
        #FIND(%Field,%ConditionalOrderBYFieldSortCol)
        #SET(%pOrderStatement,CLIP(%pOrderStatement) & ' ' & %SQLGetTrueFieldName() & ' ' & %ConditionalOrderBYFieldSortDirection & ' ')
    #ENDFOR
#ENDIF
#IF(CLIP(%pOrderStatement))
    #SET(%pOrderStatement,'ORDER BY '&CLIP(%pOrderStatement))
#ENDIF
#!----------------------------------------------------------------------------
#GROUP(%SQLReplaceBadChars, *%pSQLString)
#INSERT(%ReplaceSubString,%pSQLString,'."', '.[')
#INSERT(%ReplaceSubString,%pSQLString,'".', '].')
#INSERT(%ReplaceSubString,%pSQLString,'"', ']')
#!----------------------------------------------------------------------------
#GROUP(%SQLGetTrueFileName),AUTO
#DECLARE(%SQLReturnValueConstruct)
#IF(%FileName)
    #SET(%SQLReturnValueConstruct,SUB(%FileName,2,LEN(%FileName) - 2))
    #if( sub(%SQLReturnValueConstruct, 1, 1) = '"' and sub(%SQLReturnValueConstruct, len(%SQLReturnValueConstruct), 1) = '"')
      #SET(%SQLReturnValueConstruct,'[' & SUB(%SQLReturnValueConstruct,2,LEN(%SQLReturnValueConstruct) - 2) & ']')
    #else
      #INSERT(%SQLReplaceBadChars,%SQLReturnValueConstruct)
    #endif
#ELSE
  #IF(upper(%FileType) = 'ALIAS')
    #SET(%SQLReturnValueConstruct,%AliasFile)
  #ELSE
    #SET(%SQLReturnValueConstruct,%File)
  #ENDIF
#ENDIF
#RETURN(%SQLReturnValueConstruct)
#!----------------------------------------------------------------------------
#GROUP(%SQLGetTrueFieldName),AUTO
#DECLARE(%SQLColumnNameConstruct)
#DECLARE(%SQLTableNameConstruct)
#DECLARE(%SQLReturnValueConstruct)
#DECLARE(%svPOSinStr)
#SET(%SQLReturnValueConstruct,'')
#IF(%Field AND %File)
    #CALL(%SQLGetTrueFileName),%SQLTableNameConstruct
    #IF(NOT LEN(CLIP(%FieldName)))
        #SET(%SQLReturnValueConstruct,%SQLTableNameConstruct & '.' & %FieldID)
    #ELSE
        #IF(SUB(%FieldName,2,1) = '"')
            #SET(%SQLColumnNameConstruct,'[' & SUB(%FieldName,3,LEN(%FieldName) - 4) & ']')
        #ELSE
          #SET(%svPosInStr, instring('|', %FieldName, 1, 1))
          #if(%svPosInstr)
            #set(%SQLColumnNameConstruct, slice(%FieldName, 2, %svPosInStr - 1))
          #else
            #SET(%SQLColumnNameConstruct,SUB(%FieldName,2,LEN(%FieldName) - 2))
          #endif
        #ENDIF
        #SET(%SQLReturnValueConstruct,%SQLTableNameConstruct & '.' & %SQLColumnNameConstruct)
    #ENDIF
#ELSE
    #ASSERT(%False, %Procedure & ': Bad Field selection '&%Field)
    #SET(%SQLReturnValueConstruct,'ERROR')
#ENDIF
#CALL(%SQLReplaceBadChars,%SQLReturnValueConstruct)
#RETURN(%SQLReturnValueConstruct)
#!--------------------------------------------------------------------------------------------
#GROUP(%SQLGetTrueFieldNameNoPrefix, %pField),AUTO, PRESERVE
#DECLARE(%SQLColumnNameConstruct)
#DECLARE(%SQLTableNameConstruct)
#DECLARE(%SQLReturnValueConstruct)
#DECLARE(%svPOSinStr)
#SET(%SQLReturnValueConstruct,'')
#FIND(%Field, %pField)
#IF(%Field AND %File)
  #IF(NOT LEN(CLIP(%FieldName)))
    #SET(%SQLReturnValueConstruct, %FieldID)
  #ELSE
    #IF(SUB(%FieldName,2,1) = '"')
      #SET(%SQLColumnNameConstruct,'[' & SUB(%FieldName,3,LEN(%FieldName) - 4) & ']')
    #ELSE
      #SET(%svPosInStr, instring('|', %FieldName, 1, 1))
      #if(%svPosInstr)
        #set(%SQLColumnNameConstruct, slice(%FieldName, 2, %svPosInStr - 1))
      #else
        #SET(%SQLColumnNameConstruct, SUB(%FieldName,2,LEN(%FieldName) - 2))
      #endif
    #ENDIF
    #SET(%SQLReturnValueConstruct, %SQLColumnNameConstruct)
  #ENDIF
#ELSE
    #ASSERT(%False, %Procedure & ': Bad Field selection '&%Field)
    #SET(%SQLReturnValueConstruct,'ERROR')
#ENDIF
#CALL(%SQLReplaceBadChars,%SQLReturnValueConstruct)
#RETURN(%SQLReturnValueConstruct)
#!----------------------------------------------------------------------------
#GROUP(%SQLConstructView,*%pFromStatement),AUTO
#DECLARE(%lFromStatement)
#SET(%lFromStatement,'')
#FIX(%File,%Primary)
#FREE(%ADONonQueryFields)
#CALL(%SQLConstructSecondaries, %Primary,%lFromStatement)
#FOR(%ADONonQueryFields)
    #FIND(%Field,%ADONonQueryField)
    #IF(%Field AND %File)
        #SET(%pFromStatement,CLIP(%pFromStatement)&','&%SQLGetTrueFieldName())
    #ENDIF
#ENDFOR
#FIX(%File,%Primary)
#SET(%pFromStatement,CLIP(%pFromStatement)&' FROM '&%SQLGetTrueFileName()&' '&CLIP(%lFromStatement))
#!----------------------------------------------------------------------------
#!
#!
#GROUP(%IsFieldPopulate,%pField)
#DECLARE(%pValueReturn)
#SET(%pValueReturn,0)
#FOR(%ADOQueryFields),WHERE(%ADOQueryField=%pField)
    #SET(%pValueReturn,1)
#ENDFOR
#FOR(%HotFields),WHERE(%HotField=%pField)
    #SET(%pValueReturn,1)
#ENDFOR
#RETURN(%pValueReturn)
#!----------------------------------------------------------------------------
#GROUP(%FieldIsTableColumn,%pHotField,%pADOHotFieldType),PRESERVE
#IF(%pADOHotFieldType='Table Column')
    #FIND(%Field,%pHotField)
    #IF(%File)
       #RETURN(1)
    #ELSE
       #RETURN(0)
    #ENDIF
#ELSE
    #RETURN(1)
#ENDIF
#!----------------------------------------------------------------------------
#!
#!
#GROUP(%SQLConstructSecondaries, %To,*%pFromStatement),AUTO
#DECLARE(%lRelationFields),MULTI
#DECLARE(%lRelationFieldLeft,%lRelationFields)
#DECLARE(%lRelationFieldRight,%lRelationFields)
#FOR(%Secondary),WHERE(%SecondaryTo = %To)
  #FREE(%lRelationFields)
  #FIX(%File,%Secondary)
  #FIX(%Relation,%To)
  #IF(%SecondaryInner)
    #SET(%pFromStatement,CLIP(%pFromStatement)&' INNER JOIN '&%SQLGetTrueFileName()&' ON')
  #ELSE
    #SET(%pFromStatement,CLIP(%pFromStatement)&' LEFT OUTER JOIN '&%SQLGetTrueFileName()&' ON')
  #ENDIF
  #IF(%SecondaryCustomJoin)
    #SET(%pFromStatement,CLIP(%pFromStatement)&' '&%SecondaryCustomText)
  #ELSE
     #FOR(%RelationKeyField),WHERE(%RelationKeyFieldLink <> '' AND %RelationKeyField <> '')
          #ADD(%lRelationFields,ITEMS(%lRelationFields)+1)
          #SET(%lRelationFieldLeft,%RelationKeyField)
          #SET(%lRelationFieldRight,%RelationKeyFieldLink)
          #CALL(%AddNonQueryFields,%RelationKeyField)
          #CALL(%AddNonQueryFields,%RelationKeyFieldLink)
     #ENDFOR
     #FOR(%lRelationFields)
          #IF(INSTANCE(%lRelationFields)<>1)
              #SET(%pFromStatement,CLIP(%pFromStatement)&' AND')
          #ENDIF
          #FIND(%Field,%lRelationFieldLeft)
          #SET(%pFromStatement,CLIP(%pFromStatement)&' '&%SQLGetTrueFieldName()&' = ')
          #FIND(%Field,%lRelationFieldRight)
          #SET(%pFromStatement,CLIP(%pFromStatement)&' '&%SQLGetTrueFieldName())
     #ENDFOR
  #ENDIF
#ENDFOR
#FOR(%Secondary),WHERE(%SecondaryTo = %To)
  #CALL(%SQLConstructSecondaries, %Secondary,%pFromStatement)
#ENDFOR
#!----------------------------------------------------------------------------
#GROUP(%AddNonQueryFields,%pField)
#DECLARE(%pExist)
#IF(NOT %IsFieldPopulate(%pField))
   #SET(%pExist,0)
   #FOR(%ADONonQueryFields),WHERE(%ADONonQueryField=%pField)
       #SET(%pExist,1)
       #BREAK
   #ENDFOR
   #IF(%pExist=0)
       #ADD(%ADONonQueryFields,ITEMS(%ADONonQueryFields)+1)
       #SET(%ADONonQueryField,%pField)
   #ENDIF
#ENDIF
#!----------------------------------------------------------------------------
#! ---------------------------------------------------------------------------------------------------------------------
#GROUP(%ADOConstructPrimaryGroup,%pGName,%pFile,%parKey),PRESERVE,AUTO
#DECLARE(%lGName)
#FIND(%Key,%parKey)
#IF(%pFile=%File)
#SET(%lGName,%pGName)
%[20]lGName GROUP
#FOR(%KeyField)
%[23]KeyField LIKE(%KeyField)
#ENDFOR
%[20]NULL END
#ELSE
   #ASSERT(%False, %Procedure & ':(ADOConstructPrimaryGroup) Bad Key selection '&%parKey)
#ENDIF
#!----------------------------------------------------------------------------
#group(%ContructGroupStructure)
%[20]svADORSGrp GROUP
#FIX(%Control, %ListControl)
#FOR(%ControlField)
  #FIND(%Field, %ControlField)
  #IF(%Field)
    #FIND(%ADOBrowseDataColumn, %Field)
      #IF(%ADOBrowseDataColumn)
        #IF(%svColType = 'Table Column' and %svColumnAS = 1)
%[22]svColumnASLabel %FieldStatement
        #ELSE
          #IF(%svColType = 'Table Column')
%[22]FieldID %FieldStatement
          #ELSE
%[22]svExpressionAS %svColExpressionType        
          #ENDIF
        #ENDIF
      #ELSE
%[22]FieldID %FieldStatement
      #ENDIF
  #ENDIF
#ENDFOR
#FOR(%svADOExtraFields)
  #FIND(%Field, %svADOExtraFields)
  #IF(%Field)
%[22]FieldID %FieldStatement  
  #ENDIF
#ENDFOR
%[20]null END
#! ---------------------------------------------------------------------------------------------------------------------
#GROUP(%ADOConstructListQueue),AUTO
  #DECLARE(%Lb,LONG)
  #DECLARE(%QFieldName)
  #DECLARE(%QFieldType)
  #DECLARE(%QFieldTipComment)
  #DECLARE(%svDataInfo)
  #SET(%svDataInfo, 'DataInfo')
  #INSERT(%MakeDeclr,22,%OOPConstruct,%ListQueue,'QUEUE')
%[53]OOPConstruct !Queue declaration for ADO browse/combo box using %ListControl
  #FIND(%ModuleProcedure, %Procedure)
  #FIX(%Control, %ListControl)
  #FOR(%ControlField)
    #FIND(%ADOQueryField,%ControlField)
    #SET(%QFieldTipComment,'')
    #CALL(%GetQueueDataType(ABC),%ADOQueryField, %QFieldTipComment),%QFieldType
    #SET(%QFieldName,%ADOQueryField)
        #CASE(%ADOQueryFieldType)
        #OF('Table Column')
            #IF(%ADOQueryFieldAS = 1)
                #SET(%QFieldTipComment,'Table Column - AS '&%ADOQueryFieldASLabel&CLIP(%QFieldTipComment))
            #ELSE
                #SET(%QFieldTipComment,'Table Column'&CLIP(%QFieldTipComment))
            #ENDIF
        #OF('Expression')
            #SET(%QFieldTipComment,'Expression - AS '&%ADOQueryFieldASLabel&CLIP(%QFieldTipComment))
        #OF('HotField')
            #SET(%QFieldTipComment,'HotField'&CLIP(%QFieldTipComment))
        #ENDCASE
#INSERT(%MakeField, %QFieldName, '', %QFieldType, %QFieldTipComment)
    #EMBED(%AfterCalculatingQueueDataType, ''),%ActiveTemplateInstance, %ADOQueryField,HIDE
    #IF(%ControlFieldHasColor)
#INSERT(%MakeField, %QFieldName, 'NormalFG', 'LONG', 'Normal forground color')
#INSERT(%MakeField, %QFieldName, 'NormalBG', 'LONG', 'Normal background color')
#INSERT(%MakeField, %QFieldName, 'SelectedFG', 'LONG', 'Selected forground color')
#INSERT(%MakeField, %QFieldName, 'SelectedBG', 'LONG', 'Selected background color')
    #ENDIF
    #IF(%ControlFieldHasIcon)
#INSERT(%MakeField, %QFieldName, 'Icon', 'LONG', 'Entry''s icon ID')
    #ENDIF
    #IF(%ControlFieldHasTree)
#INSERT(%MakeField, %QFieldName, 'Level', 'LONG', 'Tree level')
    #ENDIF
    #IF(%ControlFieldHasStyle)
#INSERT(%MakeField, %QFieldName, 'Style', 'LONG', 'Field style')
    #ENDIF
    #IF(%ControlFieldHasTip)
      #FIX(%ControlField,%ADOQueryField)
      #SET(%QFieldTipComment, 'Field tooltip')
      #IF(%ControlFieldTipField)
        #SET(%Lb, INSTRING('[', %ControlFieldTipField, 1, 1))
        #IF(%Lb > 0)
          #CALL(%GetQueueDataType(ABC),SLICE(%ControlFieldTipField, 1, %Lb - 1), %QFieldTipComment),%QFieldType
        #ELSE
          #CALL(%GetQueueDataType(ABC),%ControlFieldTipField, %QFieldTipComment),%QFieldType
        #ENDIF
      #ELSE
        #SET(%QFieldType, 'STRING(80)')
      #ENDIF
#INSERT(%MakeField, %QFieldName, 'Tip', %QFieldType, %QFieldTipComment)
    #ENDIF
  #ENDFOR
  #FOR(%HotFields)
    #SET(%QFieldTipComment,'')
    #CALL(%GetQueueDataType(ABC),%HotField, %QFieldTipComment),%QFieldType
    #SET(%QFieldName,%HotField)
        #CASE(%ADOHotFieldType)
        #OF('Table Column')
            #IF(%ADOHotFieldAS = 1)
               #SET(%QFieldTipComment,'Table Column - '&%HotField&' - AS '&%ADOHotFieldASLabel&CLIP(%QFieldTipComment))
            #ELSE
               #SET(%QFieldTipComment,'Table Column - '&%HotField&CLIP(%QFieldTipComment))
            #ENDIF
        #OF('Expression')
            #SET(%QFieldTipComment,'Expression - '&%HotField&' - AS '&%ADOHotFieldASLabel&CLIP(%QFieldTipComment))
        #ELSE
            #SET(%QFieldTipComment,'HotField'&CLIP(%QFieldTipComment))
        #ENDCASE
#INSERT(%MakeField, %QFieldName, '', %QFieldType, %QFieldTipComment)
  #ENDFOR
#INSERT(%MakeField, %svDataInfo, '', 'GROUP(TRowInfoGrp).' ,'ADO Info Group')
%[20]NULL END
#! ---------------------------------------------------------------------------------------------------------------------
#GROUP(%AddFieldsToMapper,%pObject, %psvMapperBlankBaseTable = 0),AUTO, PRESERVE
#DECLARE(%UsedTables),MULTI,UNIQUE
#DECLARE(%lTableName)
#declare(%tmpFieldName)
#declare(%svLocPos)
#declare(%svDateTimeID)
#declare(%tmpFieldList), multi, unique
#declare(%tmpAttribute)
#declare(%groupName)
#FOR(%ADOQueryFields)
    #FIND(%Field,%ADOQueryField)
    #IF(%Field)
      #set(%tmpFieldName, %SQLGetTrueFieldNameNoPrefix(%Field))
      #if(%FieldType = 'DATE' or %FieldType = 'TIME')
        #if(%FieldUserOptions)
          #set(%tmpAttribute, EXTRACT(%FieldUserOptions, 'ADOType', 1))
          #if(%tmpAttribute)
            #if(upper(%TmpAttribute) <> 'ADDBDATE' and upper(%TmpAttribute) <> 'ADDATE' and upper(%TmpAttribute) <> 'ADDBTIME')
              #find(%tmpFieldList, %tmpFieldName)
              #if(%tmpFieldList)
                #cycle
              #else
                #! #set(%tmpFieldName, %tmpAttribute)
                #set(%groupName, %File & '.' & %tmpFieldName & '_GROUP')
                #if(%psvMapperBlankBaseTable)
%pObject.AddFieldsInfo('', '%'tmpFieldName', %groupName, adDBTimeStamp)    ! SET the buffer that will receive a column OF data
                #else
                  #if(upper(%FileType) = 'ALIAS')
%pObject.AddFieldsInfo('%AliasFile', '%'tmpFieldName', %groupName, adDBTimeStamp)    ! SET the buffer that will receive a column OF data
                  #else
%pObject.AddFieldsInfo('%File', '%'tmpFieldName', %groupName, adDBTimeStamp)    ! SET the buffer that will receive a column OF data
                  #endif
                #endif
                #add(%tmpFieldList, %tmpFieldName)
                #cycle
              #endif
            #else
              #CASE(%FieldType)
              #OF('DATE')
                #SET(%svDateTimeID, 'adDBDate')
              #OF('TIME')
                #SET(%svDateTimeID, 'adDBTime')
              #ELSE
                #SET(%svDateTimeID, '0')
              #ENDCASE
            #endif
          #else
            #CASE(%FieldType)
              #OF('DATE')
                #SET(%svDateTimeID, 'adDBDate')
              #OF('TIME')
                #SET(%svDateTimeID, 'adDBTime')
              #ELSE
                #SET(%svDateTimeID, '0')
            #ENDCASE
          #endif
        #ELSE
          #CASE(%FieldType)
            #OF('DATE')
              #SET(%svDateTimeID, 'adDBDate')
            #OF('TIME')
              #SET(%svDateTimeID, 'adDBTime')
            #ELSE
              #SET(%svDateTimeID, '0')
          #ENDCASE
        #ENDIF
      #ELSE
        #SET(%svDateTimeID, '0')
      #ENDIF
    #ELSE
      #SET(%svDateTimeID, '0')
    #ENDIF
    #CASE(%ADOQueryFieldType)
    #OF('Table Column')
        #IF(%ADOQueryFieldAS)
          #IF(%psvMapperBlankBaseTable)
%pObject.AddFieldsInfo('', '%'ADOQueryFieldASLabel', %ADOQueryField, %svDateTimeID)    ! SET the buffer that will receive a column OF data
          #ELSE
            #if(upper(%FileType) = 'ALIAS')
%pObject.AddFieldsInfo('%AliasFile', '%'ADOQueryFieldASLabel', %ADOQueryField, %svDateTimeID)    ! SET the buffer that will receive a column OF data
            #else
%pObject.AddFieldsInfo('%File', '%'ADOQueryFieldASLabel', %ADOQueryField, %svDateTimeID)    ! SET the buffer that will receive a column OF data
            #endif
          #ENDIF
        #ELSE
          #SET(%tmpFieldName, %SQLGetTrueFieldNameNoPrefix(%Field))
          #SET(%tmpFieldName, clip(%tmpFieldName))
          #IF(%psvMapperBlankBaseTable)
%pObject.AddFieldsInfo('', '%tmpFieldName', %ADOQueryField, %svDateTimeID)    ! SET the buffer that will receive a column OF data
          #ELSE
            #if(upper(%FileType) = 'ALIAS')
%pObject.AddFieldsInfo('%AliasFile', '%tmpFieldName', %ADOQueryField, %svDateTimeID)    ! SET the buffer that will receive a column OF data
            #else
%pObject.AddFieldsInfo('%File', '%tmpFieldName', %ADOQueryField, %svDateTimeID)    ! SET the buffer that will receive a column OF data
            #endif
          #ENDIF
        #ENDIF
    #OF('Expression')
%pObject.AddFieldsInfo('', '%'ADOQueryFieldASLabel', %ADOQueryField, %svDateTimeID)    ! SET the buffer that will receive a column OF data
    #OF('HotField')
#!%pObject.AddFieldsInfo('', '%'ADOQueryFieldASLabel', %ADOQueryField)    ! SET the buffer that will receive a column OF data
    #ENDCASE
    #IF(%File)
        #ADD(%UsedTables,%File)
    #ENDIF
#ENDFOR
#FOR(%HotFields)
    #FIND(%Field,%HotField)
    #IF(%Field)
      #CASE(%FieldType)
        #OF('DATE')
          #SET(%svDateTimeID, 'adDBDate')
        #OF('TIME')
          #SET(%svDateTimeID, 'adDBTime')
        #ELSE
          #SET(%svDateTimeID, '0')
      #ENDCASE
    #ELSE
      #SET(%svDateTimeID, '0')
    #ENDIF
        #CASE(%ADOHotFieldType)
        #OF('Table Column')
            #IF(%ADOHotFieldAS)
              #IF(%psvMapperBlankBaseTable)
%pObject.AddFieldsInfo('', '%'ADOHotFieldASLabel', %HotField, %svDateTimeID)    ! SET the buffer that will receive a column OF data
              #ELSE
%pObject.AddFieldsInfo('%File', '%'ADOHotFieldASLabel', %HotField, %svDateTimeID)    ! SET the buffer that will receive a column OF data
              #ENDIF
            #ELSE
              #SET(%tmpFieldName, %SQLGetTrueFieldNameNoPrefix(%Field))
              #IF(%psvMapperBlankBaseTable)
%pObject.AddFieldsInfo('', '%tmpFieldName', %HotField, %svDateTimeID)    ! SET the buffer that will receive a column OF data
              #ELSE
%pObject.AddFieldsInfo('%File', '%tmpFieldName', %HotField, %svDateTimeID)    ! SET the buffer that will receive a column OF data
              #ENDIF
            #ENDIF
        #OF('Expression')
%pObject.AddFieldsInfo('', '%'ADOHotFieldASLabel', %HotField, %svDateTimeID)    ! SET the buffer that will receive a column OF data
        #OF('HotField')
#!%pObject.AddFieldsInfo('', '%'ADOHotFieldASLabel', %HotField)    ! SET the buffer that will receive a column OF data
        #ENDCASE
    #IF(%File)
        #ADD(%UsedTables,%File)
    #ENDIF
#ENDFOR
#FOR(%UsedTables)
    #FIX(%File,%UsedTables)
    #IF(%File)
        #SET(%lTableName,%File) #!%SQLGetTrueFileName())
#! %pObject.AddFieldsInfo('%'lTableName', %File.Record)    ! SET the buffer that will receive a column OF data
    #ENDIF
#ENDFOR
#!---------------------------------------------------------
#GROUP(%MakeField, %Lbl, %PostFix, %dType, %Cmt)
  #CALL(%MakeDeclr, 24, %OOPConstruct, %Lbl & CHOOSE(%PostFix = '', '', '_' & %PostFix), %dType)
  #IF(%Cmt <> '')
    #CALL(%MakeDeclr, 55, %OOPConstruct, %OOPConstruct, '!' & %Cmt)
  #ENDIF
%OOPConstruct
#!
#!
#GROUP(%MakeDeclr, %Indent, *%Dest, %Label, %Declr, %Cmt ='')
#IF(LEN(%Label)<%Indent-1)
  #SET(%Dest,%Label&ALL(' ',%Indent-LEN(%Label)-1)&%Declr)
#ELSE
  #SET(%Dest,%Label&' '&%Declr)
#ENDIF
#IF(%Cmt)
  #IF(LEN(CLIP(%Dest)) < 53)
    #SET(%Dest, %Dest & ALL(' ', 53 - LEN(CLIP(%Dest))))
  #ENDIF
  #SET(%Dest, %Dest & ' ! ' & %Cmt)
#ENDIF
#!
#!
#!---------------------------------------------------------------------
#GROUP(%ASFieldNotPopulated,%pField,%pInstance=0,%pIsHotField=0),AUTO
#DECLARE(%ADOFound)
#SET(%ADOFound,1)
#!ERROR(%pField&'-'&%pInstance)
#FOR(%ADOQueryFields)
    #IF(UPPER(%pField)=UPPER(%ADOQueryFieldASLabel))
    #IF((%ADOQueryFieldType='Table Column' OR %ADOQueryFieldType='Expression') AND %ADOQueryFieldAS)
           #!ERROR(%pIsHotField&'F '&%pField&'-'&%ADOHotFieldASLabel&'-'&%pInstance&'-'&%ADOQueryFields)
           #IF((%pInstance<>%ADOQueryFields) OR %pIsHotField)
                #SET(%ADOFound,0)
                #BREAK
           #ENDIF
    #ENDIF
    #ENDIF
#ENDFOR
#IF(%ADOFound=1)
    #FOR(%HotFields)
    #IF(UPPER(%pField)=UPPER(%ADOHotFieldASLabel))
        #IF((%ADOHotFieldType='Table Column' OR %ADOHotFieldType='Expression') AND %ADOHotFieldAS)
               #!ERROR(%pIsHotField&'H '&%pField&'-'&%ADOHotFieldASLabel&'-'&%pInstance&'-'&%HotFields)
               #IF((%pInstance<>%HotFields) OR NOT %pIsHotField)
                    #SET(%ADOFound,0)
                    #BREAK
               #ENDIF
        #ENDIF
    #ENDIF
    #ENDFOR
#ENDIF
#RETURN(%ADOFound)
#!----------------------------------------------------------------------------
#GROUP(%ADOGenerateUniqueID),AUTO
#RETURN
#DECLARE(%ASUsed),MULTI,UNIQUE
#DECLARE(%lUniqueNames),MULTI,UNIQUE
#DECLARE(%TempFieldID)
#DECLARE(%TempFieldIDCount)
#FOR(%ADOQueryFields)
    #IF((%ADOQueryFieldType='Table Column' OR %ADOQueryFieldType='Expression') AND %ADOQueryFieldAS)
       #ADD(%ASUsed,UPPER(%ADOQueryFieldASLabel))
    #ENDIF
#ENDFOR
#FOR(%HotFields)
    #IF((%ADOHotFieldType='Table Column' OR %ADOHotFieldType='Expression') AND %ADOHotFieldAS)
       #ADD(%ASUsed,UPPER(%ADOHotFieldASLabel))
    #ENDIF
#ENDFOR
#!
#FOR(%ADOQueryFields),WHERE(NOT %ADOQueryFieldAS)
    #IF(%ADOQueryFieldType='Table Column')
       #FIND(%Field,%ADOQueryField)
       #SET(%TempFieldID,%FieldID)
       #SET(%TempFieldIDCount,0)
       #LOOP
           #IF(INLIST(UPPER(%TempFieldID),%lUniqueNames) OR INLIST(UPPER(%TempFieldID),%ASUsed))
               #SET(%TempFieldIDCount,%TempFieldIDCount+1)
               #SET(%TempFieldID,%FieldID&%TempFieldIDCount)
           #ELSE
               #BREAK
           #ENDIF
       #ENDLOOP
       #SET(%ADOQueryFieldID,%TempFieldID)
       #ADD(%lUniqueNames,UPPER(%TempFieldID))
    #ENDIF
#ENDFOR
#FOR(%HotFields),WHERE(NOT %ADOHotFieldAS)
    #IF(%ADOHotFieldType='Table Column')
       #FIND(%Field,%HotField)
       #SET(%TempFieldID,%FieldID)
       #SET(%TempFieldIDCount,0)
       #LOOP
           #IF(INLIST(UPPER(%TempFieldID),%lUniqueNames) OR INLIST(UPPER(%TempFieldID),%ASUsed))
               #SET(%TempFieldIDCount,%TempFieldIDCount+1)
               #SET(%TempFieldID,%FieldID&%TempFieldIDCount)
           #ELSE
               #BREAK
           #ENDIF
       #ENDLOOP
       #SET(%ADOHotFieldID,%TempFieldID)
       #ADD(%lUniqueNames,UPPER(%TempFieldID))
    #ENDIF
#ENDFOR
#!--------------------------------------------------------------------------
#GROUP(%AddBrowseIcon,%CurrentIcon,%IsNumber=%False)
#ADD(%IconList,%CurrentIcon)
#IF(UPPER(SUB(%CurrentIcon,1,5)) = 'ICON:')
  #SET(%IconListType,'Built-In')
#ELSIF(NUMERIC(%CurrentIcon))
  #SET(%IconListType,'Index')
#ELSIF(SUB(%CurrentIcon,1,1) <> '!')
  #SET(%IconListType,'File')
#ELSIF(%IsNumber)
  #SET(%IconListType,'VarIndex')
#ELSE
  #SET(%IconListType,'Variable')
#ENDIF
#!--------------------------------------------------------------------------
#GROUP(%GetBrowseUseGreenBar)
  #FOR(%ADOQueryFields)
      #FIX(%ControlField,%ADOQueryField)
      #IF(%ControlFieldHasColor)
        #IF(%UseSameColorForAll)
           #IF(%AllControlGreenBarColor)
              #RETURN %True
              #BREAK
           #ENDIF
        #ELSE
           #IF(%ControlGreenBarColor)
              #RETURN %True
              #BREAK
           #ENDIF
        #ENDIF
      #ENDIF
  #ENDFOR
  #FOR(%ADOQueryFields)
      #FIX(%ControlField,%ADOQueryField)
      #IF(%ControlFieldHasStyle)
        #IF(%UseSameStyleForAll)
           #IF(%AllControlGreenBarStyle)
              #RETURN %True
              #BREAK
           #ENDIF
        #ELSE
           #IF(%ControlGreenBarStyle)
              #RETURN %True
              #BREAK
           #ENDIF
        #ENDIF
      #ENDIF
  #ENDFOR
  #RETURN %False
#!--------------------------------------------------------------------------
#GROUP(%BrowseRoutineFillGreenBar)
#FIX(%Control,%ListControl)
#DECLARE(%LocAlternate)
#IF(%GetBrowseUseGreenBar())
!----------------------------------------------------------------------
      GreenBarIndex = CHOOSE(GreenBarIndex % 2,2,1)
#SET(%LocAlternate,1)
#IF(%UseSameColorForAll)
    #IF(NOT(ITEMS(%ConditionalColorsAll) AND NOT %AllControlGreenBarColor))
       #FOR(%ADOQueryFields)
           #FIX(%ControlField,%ADOQueryField)
         #SET(%ValueConstruct,%ADOQueryField)
         #IF(%ControlFieldHasColor)
            #IF(%AllControlGreenBarColor)
               #IF(%AllControlGreenBarColorAlternate)
                  #SET(%LocAlternate,CHOOSE(%LocAlternate,2,1))
                  #IF(%LocAlternate=1)
      %ListQueue.%ValueConstruct_NormalFG   = CHOOSE(GreenBarIndex % 2,%AllGreenBarOffForegroundNormal,%AllGreenBarOnForegroundNormal)               #<! Set color values for %ValueConstruct
      %ListQueue.%ValueConstruct_NormalBG   = CHOOSE(GreenBarIndex % 2,%AllGreenBarOffBackgroundNormal,%AllGreenBarOnBackgroundNormal)
      %ListQueue.%ValueConstruct_SelectedFG = CHOOSE(GreenBarIndex % 2,%AllGreenBarOffForegroundSelected,%AllGreenBarOnForegroundSelected)
      %ListQueue.%ValueConstruct_SelectedBG = CHOOSE(GreenBarIndex % 2,%AllGreenBarOffBackgroundSelected,%AllGreenBarOnBackgroundSelected)
                  #ELSE
      %ListQueue.%ValueConstruct_NormalFG   = CHOOSE(GreenBarIndex % 2,%AllGreenBarOnForegroundNormal,%AllGreenBarOffForegroundNormal)               #<! Set color values for %ValueConstruct
      %ListQueue.%ValueConstruct_NormalBG   = CHOOSE(GreenBarIndex % 2,%AllGreenBarOnBackgroundNormal,%AllGreenBarOffBackgroundNormal)
      %ListQueue.%ValueConstruct_SelectedFG = CHOOSE(GreenBarIndex % 2,%AllGreenBarOnForegroundSelected,%AllGreenBarOffForegroundSelected)
      %ListQueue.%ValueConstruct_SelectedBG = CHOOSE(GreenBarIndex % 2,%AllGreenBarOnBackgroundSelected,%AllGreenBarOffBackgroundSelected)
                  #ENDIF
               #ELSE
      %ListQueue.%ValueConstruct_NormalFG   = CHOOSE(GreenBarIndex % 2,%AllGreenBarOnForegroundNormal,%AllGreenBarOffForegroundNormal)               #<! Set color values for %ValueConstruct
      %ListQueue.%ValueConstruct_NormalBG   = CHOOSE(GreenBarIndex % 2,%AllGreenBarOnBackgroundNormal,%AllGreenBarOffBackgroundNormal)
      %ListQueue.%ValueConstruct_SelectedFG = CHOOSE(GreenBarIndex % 2,%AllGreenBarOnForegroundSelected,%AllGreenBarOffForegroundSelected)
      %ListQueue.%ValueConstruct_SelectedBG = CHOOSE(GreenBarIndex % 2,%AllGreenBarOnBackgroundSelected,%AllGreenBarOffBackgroundSelected)
               #ENDIF
            #ENDIF
         #ENDIF
       #ENDFOR
    #ENDIF
#ELSE
  #FOR(%ADOQueryFields)
    #IF(%ControlFieldHasColor AND NOT %UseSameColorForAll)
      #FIX(%ControlField,%ADOQueryField)
      #SET(%ValueConstruct,%ADOQueryField)
      #IF(NOT(ITEMS(%ConditionalColors) AND NOT %ControlGreenBarColor))
         #IF(%ControlGreenBarColor)
      %ListQueue.%ValueConstruct_NormalFG   = CHOOSE(GreenBarIndex % 2,%GreenBarOnForegroundNormal,%GreenBarOffForegroundNormal)               #<! Set color values for %ValueConstruct
      %ListQueue.%ValueConstruct_NormalBG   = CHOOSE(GreenBarIndex % 2,%GreenBarOnBackgroundNormal,%GreenBarOffBackgroundNormal)
      %ListQueue.%ValueConstruct_SelectedFG = CHOOSE(GreenBarIndex % 2,%GreenBarOnForegroundSelected,%GreenBarOffForegroundSelected)
      %ListQueue.%ValueConstruct_SelectedBG = CHOOSE(GreenBarIndex % 2,%GreenBarOnBackgroundSelected,%GreenBarOffBackgroundSelected)
         #ENDIF
      #ENDIF
    #ENDIF
  #ENDFOR
#ENDIF
#SET(%LocAlternate,1)
#IF(%UseSameStyleForAll)
    #IF(NOT(ITEMS(%ConditionalStylesAll) AND NOT %AllControlGreenBarStyle))
       #FOR(%ADOQueryFields)
           #FIX(%ControlField,%ADOQueryField)
           #SET(%ValueConstruct,%ADOQueryField)
         #IF(%ControlFieldHasStyle)
            #IF(%AllControlGreenBarStyle)
               #IF(%AllControlGreenBarStyleAlternate)
                  #SET(%LocAlternate,CHOOSE(%LocAlternate,2,1))
                  #IF(%LocAlternate=1)
      %ListQueue.%ValueConstruct_Style = CHOOSE(GreenBarIndex % 2,%(%GetStyleNumber(%AllGreenBarOffStyleType,%AllGreenBarOffStyle,%AllGreenBarOffStyleLocalList)),%(%GetStyleNumber(%AllGreenBarOnStyleType,%AllGreenBarOnStyle,%AllGreenBarOnStyleLocalList))) ! %GreenBarOffStyle - %GreenBarOnStyle
                  #ELSE
      %ListQueue.%ValueConstruct_Style = CHOOSE(GreenBarIndex % 2,%(%GetStyleNumber(%AllGreenBarOnStyleType,%AllGreenBarOnStyle,%AllGreenBarOnStyleLocalList)),%(%GetStyleNumber(%AllGreenBarOffStyleType,%AllGreenBarOffStyle,%AllGreenBarOffStyleLocalList))) ! %GreenBarOnStyle - %GreenBarOffStyle
                  #ENDIF
               #ELSE
      %ListQueue.%ValueConstruct_Style = CHOOSE(GreenBarIndex % 2,%(%GetStyleNumber(%AllGreenBarOnStyleType,%AllGreenBarOnStyle,%AllGreenBarOnStyleLocalList)),%(%GetStyleNumber(%AllGreenBarOffStyleType,%AllGreenBarOffStyle,%AllGreenBarOffStyleLocalList))) ! %GreenBarOnStyle - %GreenBarOffStyle
               #ENDIF
            #ENDIF
         #ENDIF
       #ENDFOR
    #ENDIF
#ELSE
  #FOR(%ADOQueryFields)
    #IF(%ControlFieldHasStyle AND NOT %UseSameStyleForAll)
      #FIX(%ControlField,%ADOQueryField)
      #SET(%ValueConstruct,%ADOQueryField)
      #IF(NOT(ITEMS(%ConditionalStyles) AND NOT %ControlGreenBarStyle))
         #IF(%ControlGreenBarStyle)
      %ListQueue.%ValueConstruct_Style = CHOOSE(GreenBarIndex % 2,%(%GetStyleNumber(%GreenBarOnStyleType,%GreenBarOnStyle,%GreenBarOnStyleLocalList)),%(%GetStyleNumber(%GreenBarOffStyleType,%GreenBarOffStyle,%GreenBarOffStyleLocalList))) ! %GreenBarOnStyle - %GreenBarOffStyle
         #ENDIF
      #ENDIF
    #ENDIF
  #ENDFOR
#ENDIF
!----------------------------------------------------------------------
#ENDIF
#!---------------------------------------------------------------------
#GROUP(%GetStyleNumber,%pStyleType,%pStyleNumber,%pStyleString),AUTO
#DECLARE(%lStyleString)
#CALL(%GetStyleNumber(ABC),%pStyleType,%pStyleNumber,%pStyleString),%lStyleString
#RETURN %lStyleString
#! ---------------------------------------------------------------------------------------------------------------------
#GROUP(%SQLGenerateSelect, *%svColumnList, *%pStatement),AUTO,PRESERVE
#DECLARE(%lStatement)
#declare(%tmpDate)
#declare(%tmpTime)
#declare(%tmpFieldList), multi, unique
#declare(%tmpAttribute)
#declare(%dateTimeValueFields), multi
#declare(%DateTimeValueSQLCol, %dateTimeValueFields)
#declare(%DateTimeAppField, %dateTimeValueFields)
#declare(%DateTimeAppFieldType, %dateTimeValueFields)
!----------------------------------------------------
#purge(%tmpFieldList)
#purge(%dateTimeValueFields)
#for(%svColumnList)
  #FIND(%Field, %svColumnList)
  #IF(%Field)
    #IF(%FieldUserOptions and (%FieldType = 'DATE' or %FieldType = 'TIME'))
      #set(%tmpAttribute, extract(%FieldUserOptions, 'ADOType',  1))
      #if(%tmpAttribute and (upper(%tmpAttribute) <> 'ADDBDATE' and upper(%TmpAttribute) <> 'ADDBTIME'))
        #add(%dateTimeValueFields, %FieldIdent)
        #set(%DateTimeValueSQLCol, %SQLGetTrueFieldNameNoPrefix(%Field))
        #set(%DateTimeAppField, %Field)
        #set(%DateTimeAppFieldType, %FieldType)
      #ENDIF
    #ENDIF
  #ENDIF  
#endfor
#SET(%lStatement, 'SELECT ')
#FOR(%svColumnList)
  #FIND(%Field, %svColumnList)
  #IF(%Field)
    #if(%FieldUserOptions and (%FieldType = 'DATE' or %FieldType = 'TIME'))
      #set(%tmpAttribute, extract(%FieldUserOptions, 'ADOType', 1))
      #if(%tmpAttribute and ( upper(%tmpAttribute) <> 'ADDBDATE' and upper(%TmpAttribute) <> 'ADDBTIME'))
        #find(%tmpFieldList, %SQLGetTrueFieldNameNoPrefix(%Field))
        #if(%tmpFieldList)
          #cycle
        #endif
        #set(%lStatement, %lStatement & ' ' & %SQLGetTrueFieldNameNoPrefix(%Field) & ',')
        #add(%tmpFieldList, %SQLGetTrueFieldNameNoPrefix(%Field))
        #cycle
      #else
        #SET(%lStatement, %lStatement & %FieldID & ',')
      #endif
    #else
      #SET(%lStatement, %lStatement & %FieldID & ',')
    #endif
  #ENDIF
#ENDFOR
#SET(%lStatement, SLICE(%lStatement, 1, LEN(CLIP(%lStatement)) - 1))
#SET(%pStatement, %lStatement & ' FROM ' & %SQLGetTrueFileName())
#! ---------------------------------------------------------------------------------------------------------------------
#GROUP(%SQLGenerateInsert, *%svColumnList,*%pStatement),AUTO,PRESERVE
#DECLARE(%lStatement)
#declare(%tmpDate)
#declare(%tmpTime)
#declare(%tmpFieldList), multi, unique
#declare(%tmpAttribute)
#declare(%dateTimeValueFields), multi
#declare(%DateTimeValueSQLCol, %dateTimeValueFields)
#declare(%DateTimeAppField, %dateTimeValueFields)
#declare(%DateTimeAppFieldType, %dateTimeValueFields)
#! ----------------------------------------------------
#purge(%tmpFieldList)
#purge(%dateTimeValueFields)
#for(%svColumnList)
  #FIND(%Field, %svColumnList)
  #IF(%Field)
    #if(%FieldType = 'DATE' or %FieldType = 'TIME')
      #IF(%FieldUserOptions)
        #set(%tmpAttribute, extract(%FieldUserOptions, 'ADOType',  1))
        #if(%tmpAttribute)
          #if(upper(%tmpAttribute) <> 'ADDBDATE' and upper(%tmpAttribute) <> 'ADDBTIME' and upper(%tmpAttribute) <> 'ADDBTIMESTAMP')
            #add(%dateTimeValueFields, %FieldIdent)
            #set(%DateTimeValueSQLCol, %SQLGetTrueFieldNameNoPrefix(%Field))
            #set(%DateTimeAppField, %Field)
            #set(%DateTimeAppFieldType, %FieldType)
          #else
            #if(upper(%tmpAttribute) = 'ADDBTIMESTAMP')
              #add(%dateTimeValueFields, %FieldIdent)
              #set(%DateTimeValueSQLCol, %SQLGetTrueFieldNameNoPrefix(%Field))
              #set(%DateTimeAppField, %Field)
              #set(%DateTimeAppFieldType, %FieldType)
            #endif
          #endif
        #ENDIF
      #ENDIF
    #ENDIF
  #ENDIF  
#endfor
#FIX(%File,%Primary)
#SET(%lStatement, '''INSERT INTO ' & %SQLGetTrueFileName() & ' (')
#FOR(%svColumnList)
  #FIND(%Field, %svColumnList)
  #IF(%Field)
    #if(instring('READONLY', upper(%FieldName), 1, 1))
      #cycle
    #endif
    #IF(%FieldUserOptions and (%FieldType = 'DATE' or %FieldType = 'TIME'))
      #set(%tmpAttribute, extract(%FieldUserOptions, 'ADOType',  1))
      #if(%tmpAttribute)
        #if(upper(%tmpAttribute) = 'ADDBTIMESTAMP' or ( upper(%tmpAttribute) <> 'ADDBDATE' and upper(%tmpAttribute) <> 'ADDBTIME') )
          #find(%tmpFieldList, %SQLGetTrueFieldNameNoPrefix(%Field))
          #if(%tmpFieldList)
            #cycle
          #else
            #SET(%lStatement, CLIP(%lStatement) & ' ' & %SQLGetTrueFieldNameNoPrefix(%Field))
            #add(%tmpFieldList, %SQLGetTrueFieldNameNoPrefix(%Field))
            #IF(INSTANCE(%svColumnList) <> ITEMS(%svColumnList))
              #SET(%lStatement, CLIP(%lStatement) & ',')
            #ENDIF
            #cycle
          #endif
        #else
          #SET(%lStatement, CLIP(%lStatement)&' ' & %SQLGetTrueFieldNameNoPrefix(%Field))
          #IF(INSTANCE(%svColumnList) <> ITEMS(%svColumnList))
            #SET(%lStatement, CLIP(%lStatement) & ',')
          #ENDIF
        #endif
      #else
        #SET(%lStatement, CLIP(%lStatement)&' ' & %SQLGetTrueFieldNameNoPrefix(%Field))
        #IF(INSTANCE(%svColumnList) <> ITEMS(%svColumnList))
          #SET(%lStatement, CLIP(%lStatement) & ',')
        #ENDIF
      #endif
    #ELSE
      #SET(%lStatement, CLIP(%lStatement)&' ' & %SQLGetTrueFieldNameNoPrefix(%Field))
      #IF(INSTANCE(%svColumnList) <> ITEMS(%svColumnList))
        #SET(%lStatement, CLIP(%lStatement) & ',')
      #ENDIF
    #ENDIF
  #ENDIF  
#ENDFOR
#IF( SLICE(%lStatement, LEN(%lStatement), LEN(%lStatement)) = ',')
  #SET(%lStatement, SLICE(%lStatement, 1, LEN(%lStatement) - 1))
#ENDIF
#purge(%tmpFieldList)
#SET(%lStatement, %lStatement & ') VALUES (''&')
#FOR(%svColumnList)
  #FIND(%Field, %svColumnList)
  #IF(%FieldID)
    #if(instring('READONLY', upper(%FieldName), 1, 1))
      #cycle
    #endif
    #if(%FieldUserOptions and (%FieldType = 'DATE' or %FieldType = 'TIME'))
      #set(%tmpAttribute, extract(%FieldUserOptions, 'ADOType', 1))
      #if(%tmpAttribute)
        #if(upper(%tmpAttribute) = 'ADDBTIMESTAMP')
          #find(%tmpFieldList, %SQLGetTrueFieldNameNoPrefix(%Field))
          #if(%tmpFieldList)
            #cycle
          #endif
          #if(%svOracleUsed)
            #SET(%lStatement, CLIP(%lStatement) & '''TO_DATE('''''' &')
          #else
            #! #SET(%lStatement, CLIP(%lStatement) & ''''''''' &')
          #endif
          #for(%dateTimeValueFields), where(%DateTimeValueSQLCol = %SQLGetTrueFieldNameNoPrefix(%Field))
            #case(%DateTimeAppFieldType)
            #of('DATE')
              #set(%tmpDate, %DateTimeAppField)
            #of('TIME')
              #set(%tmpTime, %DateTimeAppField)
            #endcase
          #endfor
          #IF(%svOracleUsed)
            #if(%tmpDate <> '' and %tmpTime <> '')
              #SET(%lStatement, CLIP(%lStatement) & ' format(' & %tmpDate & ', ' & %svOracleCWDatePic & ') & '' '' & '  & ' format(' & %tmpTime & ', ' & %svOracleCWTimePic & ')')
            #else
              #if(%tmpDate <> '')
                #SET(%lStatement, CLIP(%lStatement) & ' format(' & %tmpDate & ', ' & %svOracleCWDatePic & ')')
              #else
                #SET(%lStatement, CLIP(%lStatement) & ' format(' & %tmpTime & ', ' & %svOracleCWTimePic & ')')
              #endif
            #endif
          #ELSE
            #if(%tmpDate <> '' and %tmpTime <> '')
              #SET(%lStatement, CLIP(%lStatement) & ' '''''''' & format(' & %tmpDate & ', @d10-) & '' '' & '  & ' format(' & %tmpTime & ', @t4) & ''''''''')
            #else
              #if(%tmpDate <> '')
                #SET(%lStatement, CLIP(%lStatement) & ' choose(' & %tmpDate & ' > 0, '''''''' & format(' & %tmpDate & ', @d10-) & '''''''', ''NULL'')')
              #else
                #SET(%lStatement, CLIP(%lStatement) & ' choose(' & %tmpTime & ' > 0, '''''''' & format(' & %tmpTime & ', @t4) & '''''''', ''NULL'')')
              #endif
            #endif
          #ENDIF
          #if(%svOracleUsed)
            #SET(%lStatement, CLIP(%lStatement) & '&''''''' & ',''''' & %svOracleTODATE & ''''')''')
          #endif
          #add(%tmpFieldList, %SQLGetTrueFieldNameNoPrefix(%Field))
          #SET(%lStatement, CLIP(%lStatement) & ' & '','' &')
          #cycle
        #else
          #case(upper(%tmpAttribute))
          #of('ADDBDATE')
          #orof('ADDATE')
            #set(%tmpDate, %Field)
            #SET(%lStatement, CLIP(%lStatement) & ' choose(' & %tmpDate & ' > 0, '''''''' & format(' & %tmpDate &',@d10-) & '''''''', ''NULL'')')
            #IF(INSTANCE(%svColumnList) <> ITEMS(%svColumnList))
              #SET(%lStatement, CLIP(%lStatement) & ' & '','' &')
            #ENDIF
          #of('ADDBTIME')
            #set(%tmpTime, %Field)
            #SET(%lStatement, CLIP(%lStatement) & ' choose(' & %tmpTime & ' > 0, '''''''' & format(' & %tmpTime &',@t04) & '''''''', ''NULL'')')
            #IF(INSTANCE(%svColumnList) <> ITEMS(%svColumnList))
              #SET(%lStatement, CLIP(%lStatement) & ' & '','' &')
            #ENDIF
          #endcase
        #endif
      #else
        #case(upper(%FieldType))
        #of('DATE')
          #set(%tmpDate, %FieldID)
          #SET(%lStatement, CLIP(%lStatement) & ' choose(' & %tmpDate & ' > 0, '''''''' & format(' & %tmpDate &',@d10-) & '''''''', ''NULL'')')
          #IF(INSTANCE(%svColumnList) <> ITEMS(%svColumnList))
            #SET(%lStatement, CLIP(%lStatement) & ' & '','' &')
          #ENDIF
        #of('TIME')
          #set(%tmpTime, %FieldID)
          #SET(%lStatement, CLIP(%lStatement) & ' choose(' & %tmpTime & ' > 0, '''''''' & format(' & %tmpTime &',@t04) & '''''''', ''NULL'')')
          #IF(INSTANCE(%svColumnList) <> ITEMS(%svColumnList))
            #SET(%lStatement, CLIP(%lStatement) & ' & '','' &')
          #ENDIF
        #else
          #CASE(%FieldType)
          #OF('STRING')
          #OROF('CSTRING')
            #SET(%lStatement, CLIP(%lStatement) & ''''''''' &')
            #SET(%lStatement, CLIP(%lStatement) & ' quote(CLIP(' & %File & '.' & %FieldID&'),1)')
            #SET(%lStatement, CLIP(%lStatement) & '&''''''''')
          #ELSE
            #SET(%lStatement, CLIP(%lStatement) & %File & '.' & %FieldID)
          #ENDCASE
          #IF(INSTANCE(%svColumnList) <> ITEMS(%svColumnList))
            #SET(%lStatement, CLIP(%lStatement) & ' & '','' &')
          #ENDIF
        #endcase
      #endif
    #else
      #CASE(%FieldType)
        #OF('STRING')
        #OROF('CSTRING')
          #SET(%lStatement, CLIP(%lStatement) & ''''''''' &')
          #SET(%lStatement, CLIP(%lStatement) & ' quote(CLIP(' & %File & '.' & %FieldID&'),1)')
          #SET(%lStatement, CLIP(%lStatement) & '&''''''''')
        #OF('DATE')
          #SET(%lStatement, CLIP(%lStatement) & ' choose(' & %File & '.' & %FieldID & ' > 0, '''''''' & format(' & %File & '.' & %FieldID &',@d10-) & '''''''', ''NULL'')')
        #OF('TIME')
          #SET(%lStatement, CLIP(%lStatement) & ' choose(' & %File & '.' & %FieldID & ' > 0, '''''''' & format(' & %File & '.' & %FieldID &',@T4) & '''''''', ''NULL'')')
        #ELSE
          #SET(%lStatement, CLIP(%lStatement) & %File & '.' & %FieldID)
      #ENDCASE
      #IF(INSTANCE(%svColumnList) <> ITEMS(%svColumnList))
        #SET(%lStatement, CLIP(%lStatement) & ' & '','' &')
      #ENDIF
    #endif
  #ENDIF
#ENDFOR
#IF(slice(%lStatement, len(%lStatement) - 7, len(%lStatement)) = ' & '','' &')
  #set(%lStatement, slice(%lStatement, 1, len(%lStatement) - 8))
#endif
#SET(%lStatement, %lStatement & ' & '') ''')
#SET(%pStatement,%lStatement)
#! -----------------------------------------------------------------------------------------------------------------------
#GROUP(%SQLGenerateUpdate, *%svColumnList,*%pStatement),AUTO,PRESERVE
#! -----------------------------------------------------------------------------------------------------------------------
#DECLARE(%lStatement)
#declare(%tmpDate)
#declare(%tmpTime)
#declare(%tmpFieldList), multi, unique
#declare(%tmpAttribute)
#declare(%dateTimeValueFields), multi
#declare(%DateTimeValueSQLCol, %dateTimeValueFields)
#declare(%DateTimeAppField, %dateTimeValueFields)
#declare(%DateTimeAppFieldType, %dateTimeValueFields)
#purge(%tmpFieldList)
#purge(%dateTimeValueFields)
#for(%svColumnList)
  #FIND(%Field, %svColumnList)
  #IF(%Field)
    #IF(%FieldUserOptions and (%FieldType = 'DATE' or %FieldType = 'TIME'))
      #set(%tmpAttribute, extract(%FieldUserOptions, 'ADOType',  1))
      #if(%tmpAttribute and (upper(%TmpAttribute) <> 'ADDBDATE' and upper(%TmpAttribute) <> 'ADDBTIME') )
        #add(%dateTimeValueFields, %FieldIdent)
        #set(%DateTimeValueSQLCol, %SQLGetTrueFieldNameNoPrefix(%Field))
        #set(%DateTimeAppField, %Field)
        #set(%DateTimeAppFieldType, %FieldType)
      #ENDIF
    #ENDIF
  #ENDIF  
#endfor
#FIX(%File, %Primary)
#SET(%lStatement, '''UPDATE ' & %SQLGetTrueFileName() & ' SET''&')
#FOR(%svColumnList)
  #FIND(%Field, %svColumnList)
  #IF(%Field AND %Primary=%File)
     #if(instring('READONLY', upper(%FieldName), 1, 1))
       #cycle
     #endif
    #if(%FieldUserOptions and (%FieldType = 'DATE' or %FieldType = 'TIME'))
      #set(%tmpAttribute, extract(%FieldUserOptions, 'ADOType', 1))
      #if(%tmpAttribute and (upper(%TmpAttribute) <> 'ADDBDATE' and upper(%TmpAttribute) <> 'ADDBTIME') )
        #find(%tmpFieldList, %SQLGetTrueFieldNameNoPrefix(%Field))
        #if(%tmpFieldList)
          #cycle
        #endif
        #SET(%lStatement, CLIP(%lStatement) & ''' ' & %SQLGetTrueFieldNameNoPrefix(%Field) & ' =')
        #if(%svOracleUsed)
          #SET(%lStatement, CLIP(%lStatement) & ' TO_DATE('''''' & ' )
        #else
          #!#SET(%lStatement, CLIP(%lStatement) & ' '''''' & ' )
        #endif
        #for(%dateTimeValueFields), where(%DateTimeValueSQLCol = %SQLGetTrueFieldNameNoPrefix(%Field))
          #case(%DateTimeAppFieldType)
          #of('DATE')
            #set(%tmpDate, %DateTimeAppField)
          #of('TIME')
            #set(%tmpTime, %DateTimeAppField)
          #endcase
        #endfor
        #if(%svOracleUsed)
          #if(%tmpDate <> '' and %tmpTime <> '')
            #SET(%lStatement, CLIP(%lStatement) & ' format(' & %tmpDate & ', ' & %svOracleCWDatePic & ') & '' '' & '  & ' format(' & %tmpTime & ', ' & %svOracleCWTimePic & ')')
          #else
            #if(%tmpDate <> '')
              #SET(%lStatement, CLIP(%lStatement) & ' format(' & %tmpDate & ', ' & %svOracleCWDatePic & ')')
            #else
              #SET(%lStatement, CLIP(%lStatement) & ' format(' & %tmpTime & ', ' & %svOracleCWTimePic & ')')
            #endif
          #endif
        #else
          #if(%tmpDate <> '' and %tmpTime <> '')
            #SET(%lStatement, CLIP(%lStatement) & ''' & '''''''' & format(' & %tmpDate & ', ' & '@d10-' & ') & '' '' & '  & ' format(' & %tmpTime & ', ' & '@t4' & ')' & ' & ''''''''')
          #else
            #if(%tmpDate <> '')
              #SET(%lStatement, CLIP(%lStatement) & ''' & choose(' & %tmpDate & ' > 0, '''''''' & format(' & %tmpDate & ',@d10-) & '''''''', ''NULL'')')
            #else
              #SET(%lStatement, CLIP(%lStatement) & ''' & choose(' & %tmpTime & ' > 0, '''''''' & format(' & %tmpTime & ',@t4)& '''''''', ''NULL'')')
            #endif
          #endif
        #endif
        #if(%svOracleUsed)
          #SET(%lStatement, CLIP(%lStatement) & ' & ''''''' & ', ''''' & %svOracleTODATE & ''''')''')
        #end
        #add(%tmpFieldList, %SQLGetTrueFieldNameNoPrefix(%Field))
        #SET(%lStatement, CLIP(%lStatement) & ' & '','' &')
        #cycle
      #else
        #SET(%lStatement, CLIP(%lStatement)&''' ' & %SQLGetTrueFieldName() & ' =')
        #CASE(%FieldType)
          #OF('STRING')
          #OROF('CSTRING')
            #SET(%lStatement, CLIP(%lStatement) & ''' & '''''''' &')
            #SET(%lStatement, CLIP(%lStatement) & ' quote(CLIP(' & %File & '.' & %FieldID&'),1)')
            #SET(%lStatement, CLIP(%lStatement) & ' & ''''''''')
          #OF('DATE')
            #SET(%lStatement, CLIP(%lStatement) & ''' &  choose(' & %File & '.' & %FieldID & ' > 0, '''''''' & format(' & %File & '.' & %FieldID &',@d10-) & '''''''', ''NULL'')')
          #OF('TIME')
            #SET(%lStatement, CLIP(%lStatement) & ''' &  choose(' & %File & '.' & %FieldID & ' > 0, '''''''' & format(' & %File & '.' & %FieldID &',@T4) & '''''''', ''NULL'')')
          #ELSE
            #SET(%lStatement, CLIP(%lStatement) & ''' & ' & %File & '.' & %FieldID)
        #ENDCASE
      #endif
    #else
      #SET(%lStatement, CLIP(%lStatement)&''' ' & %SQLGetTrueFieldName() & ' =')
      #CASE(%FieldType)
        #OF('STRING')
        #OROF('CSTRING')
          #SET(%lStatement, CLIP(%lStatement) & ''' & '''''''' &')
          #SET(%lStatement, CLIP(%lStatement) & ' quote(CLIP(' & %File & '.' & %FieldID&'),1)')
          #SET(%lStatement, CLIP(%lStatement) & ' & ''''''''')
        #OF('DATE')
          #SET(%lStatement, CLIP(%lStatement) & ''' &  choose(' & %File & '.' & %FieldID & ' > 0, '''''''' & format(' & %File & '.' & %FieldID &',@d10-) & '''''''', ''NULL'')')
        #OF('TIME')
          #SET(%lStatement, CLIP(%lStatement) & ''' &  choose(' & %File & '.' & %FieldID & ' > 0, '''''''' & format(' & %File & '.' & %FieldID &',@T4) & '''''''', ''NULL'')')
        #ELSE
          #SET(%lStatement, CLIP(%lStatement) & ''' & ' & %File & '.' & %FieldID)
      #ENDCASE
    #endif
    #IF(INSTANCE(%svColumnList) <> ITEMS(%svColumnList))
        #SET(%lStatement, CLIP(%lStatement) & ' & '','' &')
    #ENDIF
  #ENDIF
#ENDFOR
#IF(slice(%lStatement, len(%lStatement) - 7, len(%lStatement)) = ' & '','' &')
  #set(%lStatement, slice(%lStatement, 1, len(%lStatement) - 8))
#endif
#SET(%pStatement,%lStatement)
#!---------------------------------------------------------------------
#GROUP(%SQLTestBrowseSQL,*%pSelectStatement,*%pWhereStatement,*%pOrderByStatement, %pConnection)
#declare(%svTmpConnectStr)
#declare(%svQuery)
#set(%svQuery, clip(%pSelectStatement) & ' ' & clip(%pWhereStatement) & ' ' & clip(%pOrderByStatement))
#set(%svQuery, clip(%svQuery))
#find(%svGlobalConnectionName, %pConnection)
#case(%svConnectStrSource)
#of('From Dictionary')
  #set(%svTmpConnectStr, %svConnectStrFromDCT)
#of('UDL File picked and read in the template')
  #set(%svTmpConnectStr, %svStrUDL)
#of('Connection Builder')
  #set(%svTmpConnectStr, %svStrFromCnBld)
#else
  #set(%svTmpConnectStr, %svGetConnectionFromDCT())
#endcase
#set(%svTmpConnectStr, %svTmpConnectStr & '## SELECT ##' & %svQuery)
#rundll('ClaADOtp.dll', 'CheckQuery', %svTmpConnectStr), release
#!
#GROUP(%SQLCreateBrowseSQL,*%pSelectStatement,*%pWhereStatement,*%pOrderByStatement)
#!--------------------------------------------------------------------------
#!--------------------------------------------------------------------------
#!----------------------------------------------------------------------------
#!--------------------------------------------------------------------------
#!--------------------------------------------------------------------------
#!----------------------------------------------------------------------------
#!--------------------------------------------------------------------------
#!--------------------------------------------------------------------------
#!----------------------------------------------------------------------------
#!--------------------------------------------------------------------------
#!--------------------------------------------------------------------------
#INCLUDE('oleDBCB.tpw')
#INCLUDE('SVFnGrp.TPW')
#! ********************************************************************************
#CONTROL(PauseProcessControl,'Pause ADOProcess'),DESCRIPTION('Pause ADOProcess '&%ActiveTemplateInstance),REQ(ProcessControl),WINDOW,REPORT,HLP('~TPLADOPauseProcessControl')
  CONTROLS
       BUTTON('Pause'),AT(,,50,15),USE(?Progress:Pause)
  END
#PROMPT('Start Paused?',CHECK),%StartPaused
#PROMPT('Pause Text',@S20),%PauseText,DEFAULT('Pause')
#PROMPT('Restart Text',@S20),%RestartText,DEFAULT('Restart')
#ENABLE(%StartPaused)
#PROMPT('Start Text',@S20),%StartText,DEFAULT('Start')
#ENDENABLE
#ATSTART
  #DECLARE(%PauseProcessControl)
  #FOR(%Control),WHERE(%ControlInstance = %ActiveTemplateInstance)
    #SET(%PauseProcessControl,%Control)
  #ENDFOR
#ENDAT
#AT(%ControlEventHandling,%PauseProcessControl,'Accepted'),PRIORITY(4000)
#! IF %ThisObjectName.IsPaused() THEN
IF %ProgressObjectName.IsPaused() THEN
#PRIORITY(4100)
  #! %ThisObjectName.SetPause(False)
  %ProgressObjectName.SetPause(False)
  %PauseProcessControl{PROP:Text} = '%'PauseText'
#PRIORITY(4150)
ELSE
#PRIORITY(4160)
  %ProgressObjectName.SetPause(True)
  %PauseProcessControl{PROP:Text} = '%'RestartText'
#PRIORITY(4170)
END
#ENDAT
#AT (%SetPaused,%ThisObjectName,'SetPaused'),WHERE(%StartPaused)
%ProgressObjectName.SetPause(True)
%PauseProcessControl{PROP:Text} = '%'StartText'
#ENDAT
#! ******************************************************************************
#! ******************************************************************************
#! ******************************************************************************
#! ******************************************************************************
#! ******************************************************************************
#CONTROL(ProcessControl, 'SoftVelocity ADO Process Control'), PRIMARY('Primary table of the ADO Process('&%ThisObjectName&')'), WINDOW,REPORT,MULTI,REQ(ADOSupport),DESCRIPTION('ADO Process('&%ProgressObjectName&')'),HLP('~TPLControlADOProcess')
  CONTROLS
       STRING(''),AT(,,141,10),USE(?Progress:UserString),CENTER
       PROGRESS,USE(Progress:Thermometer),AT(15,12,111,12),RANGE(0,100)
       STRING(''),AT(-15,15,141,10),USE(?Progress:PctText),CENTER
       BUTTON('Cancel'),AT(45,12,50,15),USE(?Progress:Cancel)
  END
#PREPARE
  #CALL(%ReadABCFiles(ABC))
  #CALL(%SetClassDefaults(ABC), 'ADOProcess'&%ActiveTemplateInstance,'ADOProcess'&%ActiveTemplateInstance,%svADOProcessManagerClassType)
  #SET(%ProgressObjectName,%ThisObjectName)
  #CALL(%SetClassDefaults(ABC), 'Previewer'&%ActiveTemplateInstance,'ADOProcess'&%ActiveTemplateInstance&'_Previewer',%PrintPreviewType)
  #SET(%PreviewerObjectName,%ThisObjectName)
#ENDPREPARE
#BUTTON('&Process Behavior'),AT(10,,180)
  #SHEET,HSCROLL
     #PREPARE
       #FIND(%ControlInstance,%ActiveTemplateInstance,%Control)
       #IF(NOT VAREXISTS(%ValueConstruct))
         #DECLARE(%ValueConstruct)
       #ENDIF      
       #IF(~%ADOBrowseControlUniqueKey)
         #SET(%ADOBrowseControlUniqueKey,%SearchUniqueKey(%Primary))
       #ENDIF
       #IF(%Report)
          #IF(%EnableReport)
             #CALL(%LoadQueryFields,1)
             #CALL(%LoadOBYFields,1)
          #ENDIF
       #ELSE
          #CALL(%LoadOBYFields)
       #ENDIF
       #CALL(%AddSortFieldsToHotField)
       #IF(~%svDBObject or %svDBObject = 'Set')
          #SET(%svDBObject, %primary & 'Set')
       #ENDIF
     #ENDPREPARE
     #TAB('Hiden Prompts'),WHERE(%False)
           #BOXED('Hidden Prompts'),HIDE
               #PROMPT('ControlName',FROM(%Control)),%LocalControlName
               #PROMPT('LocalBaseClassToUse',@S255),%LocalBaseClassToUse
               #PROMPT('LocalParentCallValid',@s1),%LocalParentCallValid
               #PROMPT('LocalMethodEmbedPointValid',@s1),%LocalMethodEmbedPointValid
               #PROMPT('LocalEmbedTreeDesc',@s1),%LocalEmbedTreeDesc
               #INSERT(%OOPHiddenPrompts(ABC))
               #PROMPT('ProgressObjectName:',@S255),%ProgressObjectName
               #PROMPT('PreviewerObjectName:',@S255),%PreviewerObjectName
           #ENDBOXED
           #BUTTON('List and hotfields'),MULTI(%OBYFields,%OBYFieldInstance&'-'&%OBYField),INLINE
             #PROMPT('OBYField=',FIELD),%OBYField
             #PROMPT('OBYFieldInstance=',@N7),%OBYFieldInstance
           #ENDBUTTON
           #BUTTON('Posible OrderBy'),MULTI(%OBYFieldSort,%OBYFieldSortCol)
             #PROMPT('Initial sort column: ',FROM(%OBYFields,%OBYFieldNotUsed(),%OBYField)), %OBYFieldSortCol
             #PROMPT('Direction: ',DROP('ASC|DESC')), %OBYFieldSortDirection
           #ENDBUTTON
           #BUTTON('All the Query fields'),MULTI(%ADOQueryFields,%ADOQueryField)
             #PROMPT('Field:',FIELD),%ADOQueryField
           #ENDBUTTON
           #BUTTON('Non pupulated fields'),MULTI(%ADONonQueryFields,%ADONonQueryField)
             #PROMPT('Field:',FIELD),%ADONonQueryField
           #ENDBUTTON
     #ENDTAB
     #TAB('General')
       #BOXED
        #SHEET,HSCROLL
        #TAB('Process')
          #PROMPT('Processed Text:', @S100), %ProcessText, DEFAULT('Processed')
          #PROMPT('Timer value:', @n_4), %ProcessTimerValue, DEFAULT(50)
          #PROMPT('Rows to fetch per timer:', @N_4), %RecordsPerTimer, DEFAULT(10)
          #PROMPT('Close Window on finish?',CHECK),%CloseWindowAtFinish,DEFAULT(1),AT(10)
          #BOXED,WHERE(%Report)
          #PROMPT('Enable Report',CHECK),%EnableReport,DEFAULT(1),AT(10)
          #BOXED,WHERE(%EnableReport)
          #PROMPT('Print Preview',CHECK),%EnablePrintPreview,DEFAULT(1),AT(10)
          #ENDBOXED
          #ENDBOXED
        #ENDTAB
          #TAB('Detail &Filters'),HLP('~TPLProcReport_Detail_Filters'),WHERE(%Report AND %EnableReport)
            #BUTTON('&Detail Filters'),FROM(%ReportControl,%ReportControlLabel),WHERE(%ReportControlType = 'DETAIL'),INLINE,HLP('~TPLProcReport_Detail_Filters')
              #PROMPT('Filter:',EXPR),%DetailFilter
              #ENABLE(%DetailFilter)
                #PROMPT('Exclude unfiltered:',CHECK),%DetailFilterExclusive
              #ENDENABLE
            #ENDBUTTON
          #ENDTAB
          #TAB('&Preview Options'),WHERE(%Report AND %EnableReport AND %EnablePrintPreview),HLP('~TPLProcReport_Print_Preview')
            #PROMPT('Initial Zoom Setting:',DROP('No Zoom|Page Width|50%|75%|100%|200%|300%')),%InitialZoom,DEFAULT('No Zoom')
            #PROMPT('Allow User Variable Zooms?',CHECK),%AllowUserZooms,DEFAULT(%True),AT(10)
            #PROMPT('Set Initial Window &Position',CHECK),%InitWindowPosition,DEFAULT(%False),AT(10)
            #ENABLE(%InitWindowPosition)
              #PROMPT('&X Position:',SPIN(@N5,0,65535)),%WinXPos,AT(,,40),REQ
              #PROMPT('&Y Position:',SPIN(@N5,0,65535)),%WinYPos,AT(,,40),REQ
              #PROMPT('&Width:',SPIN(@N5,0,65535)),%WinWidth,AT(,,40),DEFAULT(315),REQ
              #PROMPT('&Height:',SPIN(@N5,0,65535)),%WinHeight,AT(,,40),DEFAULT(200),REQ
            #ENDENABLE
            #PROMPT('&Maximize Preview Window:',CHECK),%MaximizePreviewWindow,DEFAULT(%False),AT(10)
          #ENDTAB
        #ENDSHEET
        #ENDBOXED
     #ENDTAB
     #TAB('Data')
       #PROMPT('Process Recordset is a parameter?', CHECK), %RecordsetIsParameter, DEFAULT(0), AT(10)
       #ENABLE(NOT %RecordsetIsParameter)
       #BOXED('Connection')
         #PROMPT('Connection object: ', FROM(%svGlobalConnections,,%svGlobalConnectionName)), %svConnectionObject,DEFAULT(%GetFirstGlobalConnection())
         #PROMPT('Use a New Connection', CHECK), %svNewConnection, DEFAULT(0), AT(20)
         #ENABLE(%svNewConnection = 1), CLEAR
           #BUTTON('New Connection')
              #PROMPT('Connection string: ', Text), %svConnectionString
              #BUTTON('Call Connection Builder'),WHENACCEPTED(%OleDBConnectionBuilder(%svConnectionString))
              #ENDBUTTON
           #ENDBUTTON
         #ENDENABLE
       #ENDBOXED
       #BOXED('DB Interface')
         #PROMPT('DB Interface object:', @s50), %svDBObject,REQ,DEFAULT('Set')
         #BUTTON('CRecordset Attributes')
           #PROMPT('Cursor Location: ', DROP('adUseNone|adUseServer|adUseClient|adUseClientBatch')), %svADOCursorLocationEnum, default('adUseClient')
           #PROMPT('Cursor Type: ', DROP('adOpenUnspecified|adOpenForwardOnly|adOpenKeyset|adOpenDynamic|adOpenStatic')), %svADOCursorType, default('adOpenForwardOnly')
           #PROMPT('Lock type: ', DROP('adLockUnspecified|adLockReadOnly|adLockPessimistic|adLockOptimistic|adLockBatchOptimistic')), %svADOLockType, default('adLockOptimistic')
           #PROMPT('Command Type: ', DROP('adCmdUnspecified|adCmdUnknown|adCmdText|adCmdTable|adCmdStoredProc|adCmdFile|adCmdTableDirect')), %svCommandTypeEnum, default('adCmdText')
           #PROMPT('Execute Options', DROP('(None)|adAsyncExecute|adAsyncFetch|adAsyncFetchNonBlocking|adExecuteNoRecords|adOptionUnspecified')), %svExecuteOption, DEFAULT('(None)')
           #ENABLE(%svCommandTypeEnum = 'adCmdTable'), CLEAR
           #BOXED('Select a table')
             #PROMPT('Table: ', FILE), %svADOTable, DEFAULT(%Primary)
           #ENDBOXED
           #ENDENABLE
         #ENDBUTTON
         #BOXED('Table Mapper')
           #PROMPT('BASETABLENAME is not supported', CHECK), %svMapperBlankBaseTable, at(10), default(0)
         #ENDBOXED
       #ENDBOXED
       #ENDENABLE
    #ENDTAB
    #TAB('&Data Columns\Hot Fields')
      #BOXED('"Hot" Fields')
         #BUTTON('"Hot" Fields'),MULTI(%HotFields,%HotField),INLINE
              #PROMPT('Hot Field:',FIELD),%HotField,REQ
              #VALIDATE(%OBYFieldNotPopulated(%HotField,%HotFields)=1,'Field already in use')
              #VALIDATE(%FieldIsTableColumn(%HotField,%ADOHotFieldType)=1,'Field need to be a Table Column')
              #BOXED,WHERE(NOT %RecordsetIsParameter)
                 #PROMPT('Column is a: ', DROP(CHOOSE(%ADOHotFieldPosibleType='MANUAL' ,'Table Column|Expression','Table Column'))), %ADOHotFieldType, DEFAULT('Table Column')
              #ENDBOXED
              #ENABLE(%ADOHotFieldType = 'Table Column' OR %RecordsetIsParameter),CLEAR
                 #PROMPT('Use AS?', check), %ADOHotFieldAS, DEFAULT(0)
              #ENDENABLE
              #BOXED,SECTION
                 #BOXED,WHERE(%ADOHotFieldAS = 1 OR %ADOHotFieldType = 'Expression')
                      #PROMPT('', @s250), %ADOHotFieldASLabel,REQ,AT(100,0)
                      #VALIDATE(%ASFieldNotPopulated(%ADOHotFieldASLabel,%HotFields,1)=1,'The Field AS value is already in use')
                      #DISPLAY('AS:'),AT(10,0)
                 #ENDBOXED
              #ENDBOXED
              #BOXED,WHERE(NOT %RecordsetIsParameter)
                 #ENABLE(%ADOHotFieldType = 'Expression')
                    #PROMPT('Expression: ', @s250), %ADOHotFieldExpression,REQ
                    #PROMPT('Expression data type: ', DROP('LONG|STRING|DATETIME')), %ADOHotFieldExpressionType,REQ
                 #ENDENABLE
              #ENDBOXED
              #BOXED,WHERE(%False),AT(0,0,0,0)
                #PROMPT('FieldType',OPTION),%ADOHotFieldPosibleType,DEFAULT('MANUAL')
                #PROMPT('AUTO',RADIO)
                #PROMPT('MANUAL',RADIO)
              #ENDBOXED
         #ENDBUTTON
      #ENDBOXED
      #BOXED('Data Columns'),WHERE(%Report AND %EnableReport)
         #BUTTON('Fields/Data Columns'),FROM(%ADOQueryFields,%ADOQueryField),INLINE
              #BOXED,HIDE
                 #PROMPT('Can be a HotField:',CHECK),%ADOQueryFieldHotField,DEFAULT(1)
              #ENDBOXED
              #ENABLE(%False)
                 #PROMPT('Query Field:',@S100),%ADOQueryField
              #ENDENABLE
              #BOXED,WHERE(NOT %RecordsetIsParameter)
                 #PROMPT('Column is a: ', DROP(CHOOSE(%ADOQueryFieldHotField=1,'Expression','Table Column|Expression'))), %ADOQueryFieldType, default('Table Column')
              #ENDBOXED
              #ENABLE((%ADOQueryFieldType = 'Table Column' AND NOT %ADOQueryFieldHotField) OR %RecordsetIsParameter),CLEAR
                 #PROMPT('Use AS?', check), %ADOQueryFieldAS, DEFAULT(0)
              #ENDENABLE
              #BOXED,SECTION
                 #BOXED,WHERE(%ADOQueryFieldAS OR (%ADOQueryFieldType = 'Expression' OR (%ADOQueryFieldHotField AND %ADOQueryFieldType = 'Table Column')))
                      #PROMPT('', @s250), %ADOQueryFieldASLabel,REQ,AT(100,0)
                      #VALIDATE(%ASFieldNotPopulated(%ADOQueryFieldASLabel,%ADOQueryFields)=1,'The Field AS value is already in use')
                      #DISPLAY('AS:'),AT(10,0)
                 #ENDBOXED
              #ENDBOXED
              #BOXED,WHERE(NOT %RecordsetIsParameter)
                 #ENABLE(%ADOQueryFieldType = 'Expression')
                    #PROMPT('Expression: ', @s250), %ADOQueryFieldExpression,REQ
                    #BOXED,WHERE(%False)
                      #PROMPT('Expression data type: ', DROP('LONG|STRING|DATETIME')), %ADOQueryFieldExpressionType,REQ
                    #ENDBOXED
                 #ENDENABLE
              #ENDBOXED
              #BOXED,WHERE(%False)
                 #PROMPT('This column cannot be hidden.', CHECK), %CannotBeHidden, AT(10)
                 #PROMPT('This column cannot be sorted.', CHECK), %CannotBeSorted, AT(10)
                 #PROMPT('This column is the Default sort column', CHECK), %IsDefaultSort, AT(10)
              #ENDBOXED
         #ENDBUTTON
      #ENDBOXED
    #ENDTAB
    #TAB('&Default SQL'),HLP('~ASPBrowse_DefaultSQL'),WHERE(NOT %RecordsetIsParameter)
               #PREPARE
                    #IF(NOT %ADOBrowseControlSQLToFillWhereOverride)
                        #CALL(%SQLGenerateBrowseSQLWhere,%ADOBrowseControlSQLToFillWhere)
                    #ENDIF
                    #IF(NOT %ADOBrowseControlSQLToFillOrderByOverride)
                        #CALL(%SQLGenerateBrowseSQLOrderBy,%ADOBrowseControlSQLToFillOrderBy)
                    #ENDIF
               #ENDPREPARE
         #ENABLE(%ADOBrowseControlSQLToFillSelectOverride)
            #BOXED('SQL Generation')
               #!Forces The Regeneration For The SQL Statements For This List
               #BUTTON(' Regenerate SQL '),WHENACCEPTED(%SQLGenerateBrowseSQLSelect(%ADOBrowseControlSQLToFill))
               #ENDBUTTON
            #ENDBOXED
         #ENDENABLE
         #PROMPT('Override SELECT SQL',CHECK),%ADOBrowseControlSQLToFillSelectOverride,AT(6)
         #DISPLAY('Enter an SQL SELECT statement'),AT(6)
         #PROMPT('SQL to issue on page open',TEXT),%ADOBrowseControlSQLToFill,AT(6)
         #DISPLAY
         #PROMPT('Unique Key:',KEY(%Primary)),%ADOBrowseControlUniqueKey,DEFAULT(%SearchUniqueKey(%Primary)),REQ
         #DISPLAY('ADO/SQL requires a unique Id to identify the record,')
         #DISPLAY('this can be a single field or many fields.')
         #DISPLAY('All the key fields will be added')
         #DISPLAY('to the Hot Fields if they are')
         #DISPLAY('not already poulated into the listbox columns')
    #ENDTAB
    #TAB('&Default Behavior'),WHERE(NOT %RecordsetIsParameter)
         #PREPARE
            #CALL(%AddKeyToHotfield,%ADOBrowseControlUniqueKey)
            #IF(NOT %ADOBrowseControlSQLToFillSelectOverride)
                #CALL(%SQLGenerateBrowseSQLSelect,%ADOBrowseControlSQLToFill)
            #ENDIF
         #ENDPREPARE
      #BOXED
         #SHEET
            #TAB('Fields')
               #BOXED('Range or Filter Columns')
               #BUTTON('Range Columns'),MULTI(%WHEREFieldSort,%WHEREFieldSortCol&'   '&%GetRangeName(%WHEREFieldSortCol,%FieldSortColRangeUseStatic,%FieldSortColRangeNegate,%RangeLimitType,%FieldSortColRangeVariable,%FieldSortColRangeVariableLow,%FieldSortColRangeVariableHigh,%FieldSortColRangeStatic,%FieldSortColRangeStaticLow,%FieldSortColRangeStaticHigh)),INLINE,AT(,,,50)
                   #PROMPT('Column: ',FROM(%OBYFields,,%OBYField)), %WHEREFieldSortCol,DEFAULT(%GetFirstQueryFields())
                   #PROMPT('Use Static Values?',CHECK),%FieldSortColRangeUseStatic,AT(10)
                   #PROMPT('Negate the Range or Filter (NOT)?',CHECK),%FieldSortColRangeNegate,AT(10)
                   #PROMPT('Range Limit &Type:',DROP('Single Value|Range of Values|Less Than|Great Than|IN|Begins With|Ends With|Contains')),%RangeLimitType,DEFAULT('Single Value')
                   #BOXED,AT(,50),WHERE(%RangeLimitType<>'Range of Values' AND NOT %FieldSortColRangeUseStatic)
                        #PROMPT('Range Limit Value: ', FIELD), %FieldSortColRangeVariable
                   #ENDBOXED
                   #BOXED,AT(,50),WHERE(%RangeLimitType='Range of Values' AND NOT %FieldSortColRangeUseStatic)
                        #PROMPT('&Low Limit Value:',FIELD),%FieldSortColRangeVariableLow
                        #PROMPT('&High Limit Value:',FIELD),%FieldSortColRangeVariableHigh
                   #ENDBOXED
                   #BOXED,AT(,50),WHERE(%RangeLimitType<>'Range of Values' AND %FieldSortColRangeUseStatic)
                        #PROMPT('Range Limit Value: ', EXPR), %FieldSortColRangeStatic
                   #ENDBOXED
                   #BOXED,AT(,50),WHERE(%RangeLimitType='Range of Values' AND %FieldSortColRangeUseStatic)
                        #PROMPT('&Low Limit Value:',EXPR),%FieldSortColRangeStaticLow
                        #PROMPT('&High Limit Value:',EXPR),%FieldSortColRangeStaticHigh
                   #ENDBOXED
               #ENDBUTTON
               #ENDBOXED
               #BOXED('Sort Columns')
               #BUTTON('Sort Columns'),MULTI(%OrderBYFieldSort,CHOOSE(%OrderBYFieldSortDirection='ASC','+','-')&' '&%OrderBYFieldSortCol),INLINE,AT(,,,50)
                   #PROMPT('Column: ',FROM(%OBYFields,,%OBYField)), %OrderBYFieldSortCol,DEFAULT(%GetFirstOBYFields())
                   #VALIDATE(%SortFieldNotUsed(%OrderBYFieldSortCol,%OrderBYFieldSort)=1,'Field already in use')
                   #PROMPT('Direction: ',DROP('ASC|DESC')), %OrderBYFieldSortDirection,DEFAULT('ASC')
               #ENDBUTTON
               #BUTTON('Add Primary Key Fields'),WHENACCEPTED(%AddPrimaryKeyToSort())
               #ENDBUTTON
               #BUTTON('Add A Key Fields')
                   #PROMPT('Key To Add:',KEY(%Primary)),%KeyToAdd
                   #BUTTON('Add Fields'),WHENACCEPTED(%AddKeyToSort(%KeyToAdd))
                   #ENDBUTTON
               #ENDBUTTON
               #ENDBOXED
            #ENDTAB
            #TAB('SQL')
               #ENABLE(%ADOBrowseControlSQLToFillWhereOverride)
                 #BUTTON(' Regenerate WHERE SQL '),WHENACCEPTED(%SQLGenerateBrowseSQLWhere(%ADOBrowseControlSQLToFillWhere)),AT(6,,170)
                 #ENDBUTTON
               #ENDENABLE
               #PROMPT('Override WHERE SQL',CHECK),%ADOBrowseControlSQLToFillWhereOverride,AT(6)
               #DISPLAY('Enter a WHERE clause to filter this list'),AT(6)
               #PROMPT('SQL Default WHERE statement',TEXT),%ADOBrowseControlSQLToFillWhere,AT(6)
               #ENABLE(%ADOBrowseControlSQLToFillOrderByOverride)
                 #BUTTON(' Regenerate ORDER BY SQL '),WHENACCEPTED(%SQLGenerateBrowseSQLOrderBy(%ADOBrowseControlSQLToFillOrderBy)),AT(6,,170)
                 #ENDBUTTON
               #ENDENABLE
               #PROMPT('Override ORDER BY SQL',CHECK),%ADOBrowseControlSQLToFillOrderByOverride,AT(6)
               #DISPLAY('Enter the ORDER BY clause'),AT(6)
               #PROMPT('SQL Default ORDER BY statement',TEXT),%ADOBrowseControlSQLToFillOrderBy,AT(6)
               #BUTTON('Test SQL Query'),WHENACCEPTED(%SQLTestBrowseSQL(%ADOBrowseControlSQLToFill,%ADOBrowseControlSQLToFillWhere,%ADOBrowseControlSQLToFillOrderBy, %svConnectionObject)),AT(6,,170)
               #ENDBUTTON
            #ENDTAB
         #ENDSHEET
      #ENDBOXED
    #ENDTAB
    #TAB('&Conditional Behavior'),HLP('~TPLControlBrowseBox_Conditional_Behavior'),WHERE(NOT %RecordsetIsParameter)
      #BUTTON('Conditional Browse Behavior'),MULTI(%SortOrder,%SortCondition),AT(,35),INLINE,HLP('~TPLControlBrowseBox_Conditional_Behavior')
         #PROMPT('Condition:',EXPR),%SortCondition,REQ
         #BOXED
         #SHEET
            #TAB('Fields')
               #BOXED('Range or Filter Columns')
                 #BUTTON('Range Columns'),MULTI(%ConditionalWHEREFieldSort,%ConditionalWHEREFieldSortCol&'   '&%GetRangeName(%ConditionalWHEREFieldSortCol,%ConditionalSortColRangeUseStatic,%ConditionalSortColRangeNegate,%ConditionalRangeLimitType,%ConditionalSortColRangeVariable,%ConditionalSortColRangeVariableLow,%ConditionalSortColRangeVariableHigh,%ConditionalSortColRangeStatic,%ConditionalSortColRangeStaticLow,%ConditionalSortColRangeStaticHigh)),INLINE,AT(,,,50)
                   #PROMPT('Column: ',FROM(%OBYFields,,%OBYField)), %ConditionalWHEREFieldSortCol,DEFAULT(%GetFirstQueryFields())
                   #PROMPT('Use Static Values?',CHECK),%ConditionalSortColRangeUseStatic,AT(10)
                   #PROMPT('Negate the Range or Filter (NOT)?',CHECK),%ConditionalSortColRangeNegate,AT(10)
                   #PROMPT('Range Limit &Type:',DROP('Single Value|Range of Values|Less Than|Great Than|IN|Begins With|Ends With|Contains')),%ConditionalRangeLimitType,DEFAULT('Single Value')
                   #BOXED,AT(,50),WHERE(%ConditionalRangeLimitType<>'Range of Values' AND NOT %ConditionalSortColRangeUseStatic)
                        #PROMPT('Range Limit Value: ', FIELD), %ConditionalSortColRangeVariable
                   #ENDBOXED
                   #BOXED,AT(,50),WHERE(%ConditionalRangeLimitType='Range of Values' AND NOT %ConditionalSortColRangeUseStatic)
                        #PROMPT('&Low Limit Value:',FIELD),%ConditionalSortColRangeVariableLow
                        #PROMPT('&High Limit Value:',FIELD),%ConditionalSortColRangeVariableHigh
                   #ENDBOXED
                   #BOXED,AT(,50),WHERE(%ConditionalRangeLimitType<>'Range of Values' AND %ConditionalSortColRangeUseStatic)
                        #PROMPT('Range Limit Value: ', EXPR), %ConditionalSortColRangeStatic
                   #ENDBOXED
                   #BOXED,AT(,50),WHERE(%ConditionalRangeLimitType='Range of Values' AND %ConditionalSortColRangeUseStatic)
                        #PROMPT('&Low Limit Value:',EXPR),%ConditionalSortColRangeStaticLow
                        #PROMPT('&High Limit Value:',EXPR),%ConditionalSortColRangeStaticHigh
                   #ENDBOXED
                 #ENDBUTTON
               #ENDBOXED
               #BOXED('Sort Columns')
                 #BUTTON('Sort Columns'),MULTI(%ConditionalOrderBYFieldSort,CHOOSE(%ConditionalOrderBYFieldSortDirection='ASC','+','-')&' '&%ConditionalOrderBYFieldSortCol),INLINE,AT(,,,50)
                   #VALIDATE(%SortFieldNotUsed(%ConditionalOrderBYFieldSortCol,%ConditionalOrderBYFieldSort)=1,'Field already in use')
                   #PROMPT('Column: ',FROM(%OBYFields,,%OBYField)), %ConditionalOrderBYFieldSortCol,DEFAULT(%GetFirstOBYFields())
                   #PROMPT('Direction: ',DROP('ASC|DESC')), %ConditionalOrderBYFieldSortDirection,DEFAULT('ASC')
                 #ENDBUTTON
                 #BUTTON('Add Primary Key Fields'),WHENACCEPTED(%AddPrimaryKeyToSort(0))
                 #ENDBUTTON
                 #BUTTON('Add A Key Fields')
                   #PROMPT('Key To Add:',KEY(%Primary)),%ConditionalKeyToAdd
                   #BUTTON('Add Fields'),WHENACCEPTED(%AddKeyToSort(%ConditionalKeyToAdd,0))
                   #ENDBUTTON
                 #ENDBUTTON
               #ENDBOXED
            #ENDTAB
            #TAB('SQL')
               #PREPARE
                    #IF(INSTANCE(%SortOrder))
                       #IF(NOT %ADOBrowseControlConditionalSQLToFillWhereOverride)
                           #CALL(%SQLGenerateBrowseSQLWhere,%ADOBrowseControlConditionalSQLToFillWhere,%True)
                       #ENDIF
                       #IF(NOT %ADOBrowseControlConditionalSQLToFillOrderByOverride)
                           #CALL(%SQLGenerateBrowseSQLOrderBy,%ADOBrowseControlConditionalSQLToFillOrderBy,%True)
                       #ENDIF
                    #ENDIF
               #ENDPREPARE
               #ENABLE(%ADOBrowseControlConditionalSQLToFillWhereOverride)
                  #BUTTON(' Regenerate WHERE SQL '),WHENACCEPTED(%SQLGenerateBrowseSQLWhere(%ADOBrowseControlConditionalSQLToFillWhere,%True)),AT(6,,170)
                  #ENDBUTTON
               #ENDENABLE
               #PROMPT('Override WHERE SQL',CHECK),%ADOBrowseControlConditionalSQLToFillWhereOverride,AT(6)
               #DISPLAY('Enter a WHERE clause to filter this list'),AT(6)
               #PROMPT('SQL Default WHERE statement',TEXT),%ADOBrowseControlConditionalSQLToFillWhere,AT(6)
               #ENABLE(%ADOBrowseControlConditionalSQLToFillOrderByOverride)
                  #BUTTON(' Regenerate ORDER BY SQL '),WHENACCEPTED(%SQLGenerateBrowseSQLOrderBy(%ADOBrowseControlConditionalSQLToFillOrderBy,%True)),AT(6,,170)
                  #ENDBUTTON
               #ENDENABLE
               #PROMPT('Override ORDER BY SQL',CHECK),%ADOBrowseControlConditionalSQLToFillOrderByOverride,AT(6)
               #DISPLAY('Enter the ORDER BY clause'),AT(6)
               #PROMPT('SQL Default ORDER BY statement',TEXT),%ADOBrowseControlConditionalSQLToFillOrderBy,AT(6)
               #BUTTON('Test SQL Query'),WHENACCEPTED(%SQLTestBrowseSQL(%ADOBrowseControlSQLToFill,%ADOBrowseControlConditionalSQLToFillWhere,%ADOBrowseControlConditionalSQLToFillOrderBy, %svConnectionObject)),AT(6,,170)
               #ENDBUTTON
            #ENDTAB
         #ENDSHEET
         #ENDBOXED
      #ENDBUTTON
    #ENDTAB
    #TAB('&Classes'),HLP('~TPLProcReport_Classes')
      #WITH(%ClassItem,'ADOProcess'&%ActiveTemplateInstance)
        #INSERT(%ClassPrompts(ABC))
      #ENDWITH
      #ENABLE(NOT %RecordsetIsParameter)
         #PROMPT('ADORecordSet Class: ', FROM(%pClassName)), %svADORecordSetClass, DEFAULT(%svDefaultRecordsetClass),REQ
         #PROMPT('DB Interface class: ', FROM(%pClassName)), %svDBClass, DEFAULT(%DBInterfaceType),REQ
         #ENABLE(%svNewConnection = 1), CLEAR
            #PROMPT('Connection Class: ', FROM(%pClassName)), %svConnectionClass, DEFAULT(%svDefaultConnectionClass)
         #ENDENABLE
      #ENDENABLE
      #BOXED,WHERE(%Report AND %EnableReport AND %EnablePrintPreview)
         #BUTTON('P&reviewer Class'),AT(,,180),WHERE(%Report AND %EnableReport AND %EnablePrintPreview)
            #WITH(%ClassItem,'Previewer'&%ActiveTemplateInstance)
               #INSERT(%ClassPrompts(ABC))
            #ENDWITH
         #ENDBUTTON
      #ENDBOXED
    #ENDTAB
  #ENDSHEET
#ENDBUTTON
#ATSTART
#CALL(%SetClassDefaults(ABC), 'ADOProcess'&%ActiveTemplateInstance,'ADOProcess'&%ActiveTemplateInstance,%svADOProcessManagerClassType)
#CALL(%SetClassItem(ABC),'ADOProcess'&%ActiveTemplateInstance)
#SET(%ProgressObjectName,%ThisObjectName)
  #EQUATE(%InstancePrefix,'ADOProcess'&%ActiveTemplateInstance&':')
#CALL(%SetClassDefaults(ABC), 'Previewer'&%ActiveTemplateInstance,'ADOProcess'&%ActiveTemplateInstance&'_Previewer',%PrintPreviewType)
#CALL(%SetClassItem(ABC),'Previewer'&%ActiveTemplateInstance)
#SET(%PreviewerObjectName,%ThisObjectName)
  #DECLARE(%ThermometerControl)
  #DECLARE(%PctTextControl)
  #DECLARE(%CancelControl)
  #DECLARE(%svSQLStatement)
  #DECLARE(%GenerateReport)
  #IF(%Report AND %EnableReport)
    #SET(%GenerateReport,%True)
  #ELSE
    #SET(%GenerateReport,%False)
  #ENDIF
  #DECLARE(%GeneratePrintPreview)
  #IF(%Report AND %EnableReport AND %EnablePrintPreview)
    #SET(%GeneratePrintPreview,%True)
  #ELSE
    #SET(%GeneratePrintPreview,%False)
  #ENDIF
  #FOR(%Control), WHERE(%ControlInstance = %activeTemplateInstance)
    #CASE(%ControlOriginal)
    #OF('?Progress:Thermometer')
    #OROF('Progress:Thermometer')
    #OROF('Progress:Thermometer,,?Progress:Thermometer')
      #SET(%ThermometerControl, %Control)
    #OF('?Progress:PctText')
      #SET(%PctTextControl, %Control)
    #OF('?Progress:Cancel')
      #SET(%CancelControl, %Control)
    #ENDCASE
  #ENDFOR
  #DECLARE(%InitialZoomValue)
#ENDAT
#AT(%DataSection), PRIORITY(1000)
  #DECLARE(%ThermometerControlUse)
  #DECLARE(%ThermometerControlUseFound)
  #SET(%ThermometerControlUseFound,%False)
  #FIX(%Control, %ThermometerControl)
  #IF(%ControlUse)
     #FIX(%LocalData,%ControlUse)
     #IF(NOT %LocalData)
        #FIX(%GlobalData,%ControlUse)
        #IF(NOT %GlobalData)
           #FIND(%Field,%ControlUse)
           #IF(%Field)
              #SET(%ThermometerControlUseFound,%True)
           #ENDIF
        #ELSE
           #SET(%ThermometerControlUseFound,%True)
        #ENDIF
     #ELSE
        #SET(%ThermometerControlUseFound,%True)
     #ENDIF
     #IF(NOT %ThermometerControlUseFound)
%[20]ControlUse LONG !Template declared control variable
     #ENDIF
  #ELSE
    #SET(%ThermometerControlUse,%ThermometerControl)
    #IF(LEFT(%ThermometerControlUse,1)='?')
#ERROR('The thermometer control is not using a variable on the procedure: '&%Procedure)
    #ELSE
       #FIX(%LocalData,%ThermometerControlUse)
       #IF(NOT %LocalData)
%ThermometerControlUse LONG !Template declared Thermometer Control variable
       #ENDIF
    #ENDIF
  #ENDIF
#ENDAT
#AT(%GatherObjects)
#CALL(%AddObjectList(ABC), 'ADOProcess'&%ActiveTemplateInstance)
#IF(%GeneratePrintPreview)
  #CALL(%AddObjectList(ABC), 'Previewer'&%ActiveTemplateInstance)
#ENDIF
#ENDAT
#!
#AT(%CustomGlobalDeclarations)
#CALL(%AddFilesToDeclare)
#ENDAT
#!
#AT(%ADOProcessMethodCodeSection,%ActiveTemplateInstance), PRIORITY(5000),DESCRIPTION('Parent Call')
  #CALL(%ParentCallValid(ABC)),%LocalParentCallValid
  #IF(%LocalParentCallValid)
  #CALL(%GenerateParentCall(ABC))
  #ENDIF
#END
#!
#!
#AT(%PreviewerManagerMethodCodeSection),PRIORITY(5000),DESCRIPTION('Parent Call')
  #CALL(%ParentCallValid(ABC)),%LocalParentCallValid
  #IF(%LocalParentCallValid)
  #CALL(%GenerateParentCall(ABC))
  #ENDIF
#ENDAT
#!
#!
#AT(%LocalProcedures)
 #IF(%AppTemplateFamily='CLARION')
  #CALL(%GenerateVirtuals(ABC), 'ADOProcess'&%ActiveTemplateInstance, 'Local Objects|Abc Objects|ADOProcess Manager '&%ActiveTemplateInstance, '%ADOProcessManagerVirtuals(Clarion_ADO)')
  #IF(%GeneratePrintPreview)
    #CALL(%GenerateVirtuals(ABC), 'Previewer'&%ActiveTemplateInstance, 'Local Objects|Abc Objects|ADOProcess Previewer '&%ActiveTemplateInstance, '%ADOProcessPreviewerVirtuals(Clarion_ADO)')
  #ENDIF
 #ELSE
  #CALL(%GenerateVirtuals(ABC), 'ADOProcess'&%ActiveTemplateInstance, 'Local Objects|Abc Objects|ADOProcess Manager '&%ActiveTemplateInstance, '%ADOProcessManagerVirtuals(ABC_ADO)')
  #IF(%GeneratePrintPreview)
    #CALL(%GenerateVirtuals(ABC), 'Previewer'&%ActiveTemplateInstance, 'Local Objects|Abc Objects|ADOProcess Previewer '&%ActiveTemplateInstance, '%ADOProcessPreviewerVirtuals(ABC_ADO)')
  #ENDIF
 #ENDIF
#ENDAT
#!
#!
#AT(%LocalDataClasses)
#INSERT(%GenerateClass(ABC), 'ADOProcess'&%ActiveTemplateInstance, 'ADOProcess Manager')
#IF(%GeneratePrintPreview)
#INSERT(%GenerateClass(ABC), 'Previewer'&%ActiveTemplateInstance, 'Print Previewer')
#ENDIF
#ENDAT
#!
#!
#!------------------
#AT(%DataSection),DESCRIPTION('ADO Form Object Declaration'),PRIORITY(8300),WHERE(%RecordsetIsParameter)
%Primary_UpdateCalled    %svADOProcCalledType
#CALL(%AddModuleIncludeFile(ABC),%svADOProcCalledType)
#ENDAT
#AT(%DataSection)
  #IF(NOT %RecordsetIsParameter)
    #CALL(%AddModuleIncludeFile(ABC),%svADORecordSetClass)
    #CALL(%AddModuleIncludeFile(ABC),%svDBClass)
    #CALL(%AddModuleIncludeFile(ABC),%svConnectionClass)
    #CALL(%AddModuleIncludeFile(ABC),%svADOTableMapperClassType)
    #IF(%svNewConnection)
      #SET(%ValueConstruct,%ProgressObjectName&'_Conn')
%[20]ValueConstruct &%svConnectionClass
    #ENDIF
  #ENDIF
#ENDAT
#at(%DerivedEmbedAfterStandardWindowOpening)
#!%ProgressObjectName.Init(%ProcessQueue)
%ProgressObjectName.SetControls('%'ProcessText',%ThermometerControl,%CancelControl,%PctTextControl)
%ProgressObjectName.SetProgressLimits(%ProcessTimerValue,%RecordsPerTimer)
  #PRIORITY(9150),DESCRIPTION('Open Process '&%ProgressObjectName)
  #IF(%RecordsetIsParameter)
%Primary_UpdateCalled.Init()
IF %Primary_UpdateCalled.GetRequest()=ProcessRecord THEN
   %ProgressObjectName.Init(%Primary_UpdateCalled.GetRecordSet())
   %ProgressObjectName.Open()
END
  #ELSE
#!
#!
#!
#!
%ProgressObjectName.Init()
    #IF(ITEMS(%SortOrder))
      #FOR(%SortOrder),WHERE(%SortCondition)
        #IF(INSTANCE(%SortOrder)=1)
IF %SortCondition THEN
        #ELSE
ELSIF %SortCondition THEN
        #ENDIF
        #SET(%svSQLStatement, %ADOBrowseControlSQLToFill)
        #IF(%ADOBrowseControlSQLToFillWhere)
          #SET(%svSQLStatement, %svSQLStatement &' '& %ADOBrowseControlConditionalSQLToFillWhere)
        #ENDIF
        #IF(%ADOBrowseControlSQLToFillOrderBy)
          #SET(%svSQLStatement , %svSQLStatement &' '& %ADOBrowseControlConditionalSQLToFillOrderBy)
        #ENDIF
  %ProgressObjectName.SetQuery('%svSQLStatement')
      #ENDFOR
ELSE
      #SET(%svSQLStatement, %ADOBrowseControlSQLToFill)
      #IF(%ADOBrowseControlSQLToFillWhere)
        #SET(%svSQLStatement, %svSQLStatement & ' ' & %ADOBrowseControlSQLToFillWhere)
      #ENDIF
      #IF(%ADOBrowseControlSQLToFillOrderBy)
        #SET(%svSQLStatement , %svSQLStatement & ' ' & %ADOBrowseControlSQLToFillOrderBy)
      #ENDIF
  %ProgressObjectName.SetQuery('%svSQLStatement')
END
    #ELSE
      #SET(%svSQLStatement, %ADOBrowseControlSQLToFill)
      #IF(%ADOBrowseControlSQLToFillWhere)
        #SET(%svSQLStatement, %svSQLStatement & ' ' & %ADOBrowseControlSQLToFillWhere)
      #ENDIF
      #IF(%ADOBrowseControlSQLToFillOrderBy)
        #SET(%svSQLStatement , %svSQLStatement & ' ' & %ADOBrowseControlSQLToFillOrderBy)
      #ENDIF
%ProgressObjectName.SetQuery('%svSQLStatement')
    #ENDIF
#!
#! Add Mapped fields
#INSERT(%AddFieldsToMapper,%ProgressObjectName, %svMapperBlankBaseTable)
#!
#! Load the SQL Query
#!
#!
#!
    #IF(%svNewConnection)
%ProgressObjectName.Open(%ProgressObjectName_Conn, %svADOCursorLocationEnum, %svADOLockType,%svCommandTypeEnum)
    #ELSE
%ProgressObjectName.Open(%svConnectionObject, %svADOCursorLocationEnum, %svADOLockType,%svCommandTypeEnum)
    #ENDIF
  #ENDIF
  #PRIORITY(9155),DESCRIPTION('Run Process '&%ProgressObjectName)
%ProgressObjectName.Run()
  #IF(NOT %CloseWindowAtFinish)
%ProgressObjectName.SetCloseWindow(False)
  #ENDIF
#EMBED(%SetPaused,'SetPaused'),%ProgressObjectName,'SetPaused',HIDE
#endat
#AT (%WindowManagerMethodCodeSection,'Init', '(),BYTE'),PRIORITY(9100),DESCRIPTION('Init Process '&%ProgressObjectName)
#!%ProgressObjectName.Init(%ProcessQueue)
%ProgressObjectName.SetControls('%'ProcessText',%ThermometerControl,%CancelControl,%PctTextControl)
%ProgressObjectName.SetProgressLimits(%ProcessTimerValue,%RecordsPerTimer)
  #PRIORITY(9150),DESCRIPTION('Open Process '&%ProgressObjectName)
  #IF(%RecordsetIsParameter)
%Primary_UpdateCalled.Init()
IF %Primary_UpdateCalled.GetRequest()=ProcessRecord THEN
   %ProgressObjectName.Init(%Primary_UpdateCalled.GetRecordSet())
   %ProgressObjectName.Open()
END
  #ELSE
#!
#!
#!
#!
%ProgressObjectName.Init()
    #IF(ITEMS(%SortOrder))
      #FOR(%SortOrder),WHERE(%SortCondition)
        #IF(INSTANCE(%SortOrder)=1)
IF %SortCondition THEN
        #ELSE
ELSIF %SortCondition THEN
        #ENDIF
        #SET(%svSQLStatement, %ADOBrowseControlSQLToFill)
        #IF(%ADOBrowseControlSQLToFillWhere)
          #SET(%svSQLStatement, %svSQLStatement &' '& %ADOBrowseControlConditionalSQLToFillWhere)
        #ENDIF
        #IF(%ADOBrowseControlSQLToFillOrderBy)
          #SET(%svSQLStatement , %svSQLStatement &' '& %ADOBrowseControlConditionalSQLToFillOrderBy)
        #ENDIF
  %ProgressObjectName.SetQuery('%svSQLStatement')
      #ENDFOR
ELSE
      #SET(%svSQLStatement, %ADOBrowseControlSQLToFill)
      #IF(%ADOBrowseControlSQLToFillWhere)
        #SET(%svSQLStatement, %svSQLStatement & ' ' & %ADOBrowseControlSQLToFillWhere)
      #ENDIF
      #IF(%ADOBrowseControlSQLToFillOrderBy)
        #SET(%svSQLStatement , %svSQLStatement & ' ' & %ADOBrowseControlSQLToFillOrderBy)
      #ENDIF
  %ProgressObjectName.SetQuery('%svSQLStatement')
END
    #ELSE
      #SET(%svSQLStatement, %ADOBrowseControlSQLToFill)
      #IF(%ADOBrowseControlSQLToFillWhere)
        #SET(%svSQLStatement, %svSQLStatement & ' ' & %ADOBrowseControlSQLToFillWhere)
      #ENDIF
      #IF(%ADOBrowseControlSQLToFillOrderBy)
        #SET(%svSQLStatement , %svSQLStatement & ' ' & %ADOBrowseControlSQLToFillOrderBy)
      #ENDIF
%ProgressObjectName.SetQuery('%svSQLStatement')
    #ENDIF
#!
#! Add Mapped fields
#INSERT(%AddFieldsToMapper,%ProgressObjectName, %svMapperBlankBaseTable)
#!
#! Load the SQL Query
#!
#!
#!
    #IF(%svNewConnection)
%ProgressObjectName.Open(%ProgressObjectName_Conn, %svADOCursorLocationEnum, %svADOLockType,%svCommandTypeEnum)
    #ELSE
%ProgressObjectName.Open(%svConnectionObject, %svADOCursorLocationEnum, %svADOLockType,%svCommandTypeEnum)
    #ENDIF
  #ENDIF
  #PRIORITY(9155),DESCRIPTION('Run Process '&%ProgressObjectName)
%ProgressObjectName.Run()
  #IF(NOT %CloseWindowAtFinish)
%ProgressObjectName.SetCloseWindow(False)
  #ENDIF
#EMBED(%SetPaused,'SetPaused'),%ProgressObjectName,'SetPaused',HIDE
#ENDAT
#!
#AT(%WindowOtherEventHandling)
  #IF(%AppTemplateFamily='CLARION')
if %ProgressObjectName.TakeEvent().
  #ENDIF
#ENDAT
#AT (%WindowManagerMethodCodeSection,'TakeEvent','(),BYTE'),PRIORITY(2600)
ReturnValue = %ProgressObjectName.TakeEvent()
IF ReturnValue THEN
   RETURN ReturnValue
END
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'Kill','(),BYTE'),PRIORITY(7750)
#IF(%RecordsetIsParameter)
%Primary_UpdateCalled.Kill()
#ENDIF
%ProgressObjectName.Kill()
#ENDAT
#!
#!
#!
#!
#!
#! REPORT
#!
#!
#!
#AT(%DataSection),PRIORITY(8320)
  #IF(%GeneratePrintPreview)
    #SET(%ValueConstruct,%PreviewerObjectName&'_PreviewQueue')
%[20]ValueConstruct QUEUE(PreviewQueue)
                          END
    #SET(%ValueConstruct,%PreviewerObjectName&'_SkipPreview')
%[20]ValueConstruct BYTE(%False)
  #ENDIF
#ENDAT
#!
#AT(%ADOProcessMethodCodeSection,%ActiveTemplateInstance,'TakeCompleted','()'),PRIORITY(5051),WHERE(%GenerateReport)
#IF(%GeneratePrintPreview)
  #CASE(%InitialZoom)
  #OF('Page Width')
#SET(%InitialZoomValue,'PageWidth')
  #OF('50%')
#SET(%InitialZoomValue,'50')
  #OF('75%')
#SET(%InitialZoomValue,'75')
  #OF('100%')
#SET(%InitialZoomValue,'100')
  #OF('200%')
#SET(%InitialZoomValue,'200')
  #OF('300%')
#SET(%InitialZoomValue,'300')
  #ELSE
#SET(%InitialZoomValue,'100')
  #ENDCASE
DoFlush = CHOOSE (NOT %PreviewerObjectName_SkipPreview, %PreviewerObjectName.Display(%InitialZoomValue), TRUE)
#ENDIF
#PRIORITY(5100)
%Report{PROP:FlushPreview} = DoFlush
#PRIORITY(5150)
FREE(%PreviewerObjectName_PreviewQueue)
#ENDAT
#!
#AT(%ADOProcessMethodCodeSection,%ActiveTemplateInstance,'Init','()'),PRIORITY(7500),WHERE(%GeneratePrintPreview)
%PreviewerObjectName.Init(%PreviewerObjectName_PreviewQueue)
  #IF(%AppTemplateFamily='ABC')
%PreviewerObjectName.SetINIManager(INIMgr)
  #ENDIF
  #IF(%AllowUserZooms)
%PreviewerObjectName.AllowUserZoom=True
  #ENDIF
  #IF(%EnableRunTimeTranslator)
%PreviewerObjectName.AddItem(Translator)
  #ENDIF
  #IF(%InitWindowPosition)
%PreviewerObjectName.SetPosition(%WinXPos,%WinYPos,%WinWidth,%WinHeight)
  #ENDIF
  #IF(%MaximizePreviewWindow)
%PreviewerObjectName.Maximize=True
  #ENDIF
#ENDAT
#!
#AT(%ADOProcessMethodCodeSection,%ActiveTemplateInstance,'Open','()'),WHERE(%GenerateReport)
OPEN(%Report)
%Report{PROP:Preview} = %PreviewerObjectName_PreviewQueue
#ENDAT
#!
#AT(%ADOProcessMethodCodeSection,%ActiveTemplateInstance,'Kill','()'),PRIORITY(7500),WHERE(%GeneratePrintPreview)
%PreviewerObjectName.Kill()
#ENDAT
#!
#AT(%ADOProcessMethodCodeSection,%ActiveTemplateInstance,'TakeCompleted','()'),PRIORITY(5001),WHERE(%GenerateReport)
ENDPAGE(%Report)
  #IF(%CloseWindowAtFinish = 1)
Target{prop:hide} = true
  #ENDIF
#ENDAT
#!
#AT(%ADOProcessMethodDataSection,%ActiveTemplateInstance,'TakeCompleted','()'),WHERE(%GenerateReport)
DoFlush BYTE(1)
#ENDAT
#!
#AT(%ADOProcessMethodCodeSection,%ActiveTemplateInstance,'Close','()'),PRIORITY(5001),WHERE(%GenerateReport)
CLOSE(%Report)
#ENDAT
#!
#AT(%ADOProcessMethodDataSection,%ActiveTemplateInstance,'TakeRecord','()'),WHERE(%GenerateReport)
#?SkipDetails BYTE
#ENDAT
#!
#AT(%ADOProcessMethodCodeSection,%ActiveTemplateInstance,'TakeRecord','()'),PRIORITY(1000),WHERE(%GenerateReport)
#DECLARE(%ReportPrefix)
#SET(%ReportPrefix,EXTRACT(%ReportStatement,'PRE'))
#IF(%ReportPrefix)
  #SET(%ReportPrefix,SUB(%ReportPrefix,5,LEN(%ReportPrefix)-5))
#ENDIF
#EMBED(%BeforePrint,'Before Printing Detail Section'),LEGACY
#FOR(%ReportControl),WHERE(~%ReportControl AND %ReportControlType = 'DETAIL' AND %DetailFilter)
  #ERROR(%Procedure & ': A filtered report detail section must have a field equate label')
  #BREAK
#ENDFOR
#! Do the filtered detail printing
#PRIORITY(6000)
#SET(%ByteCount,%BytesOutput)
#SUSPEND
#FOR (%ReportControl),WHERE(%ReportControlType = 'DETAIL' AND %DetailFilter AND UPPER(%DetailFilter)<>'FALSE')
IF %DetailFilter
  #IF (%DetailFilterExclusive)
  SkipDetails = TRUE
  #ENDIF
  #IF (%ReportPrefix)
  PRINT(%ReportPrefix:%ReportControlLabel)
  #ELSE
  PRINT(%ReportControlLabel)
  #ENDIF
END
#ENDFOR
#RESUME
#! Print any unfiltered details if allowed
#SET(%ByteCount,%BytesOutput-%ByteCount)
#SUSPEND
#IF(%ByteCount)
#?IF ~SkipDetails
#FOR (%ReportControl),WHERE(%ReportControlType = 'DETAIL' AND ~%DetailFilter)
  #IF (%ReportPrefix)
  PRINT(%ReportPrefix:%ReportControlLabel)
  #ELSE
  PRINT(%ReportControlLabel)
  #ENDIF
#ENDFOR
#?END
#ELSE
  #FOR (%ReportControl),WHERE(%ReportControlType = 'DETAIL' AND ~%DetailFilter)
    #IF (%ReportPrefix)
PRINT(%ReportPrefix:%ReportControlLabel)
    #ELSE
PRINT(%ReportControlLabel)
    #ENDIF
  #ENDFOR
#ENDIF
#RESUME
#EMBED(%AfterPrint,'After Printing Detail Section'),LEGACY
#ENDAT
#!
#AT(%WindowManagerMethodCodeSection,'AskPreview','()'),PRIORITY(2500)
#EMBED(%BeforePrintPreview,'Before Print Preview'),LEGACY
#PRIORITY(7500)
#EMBED(%BeforeClosingReport,'Before Closing Report'),LEGACY
#ENDAT
#!
#!
#!
#!
#GROUP(%ADOProcessManagerVirtuals, %TreeText, %DataText, %CodeText)
#EMBED(%ADOProcessMethodDataSection,'ADOProcess Method Data Section'),%ActiveTemplateInstance, %pClassMethod,%pClassMethodPrototype,LABEL,DATA,PREPARE(%FixClassName(%FixBaseClassToUse('Default'))),TREE(%TreeText & %DataText)
  #?CODE
  #EMBED(%ADOProcessMethodCodeSection,'ADOProcess Method Executable Code Section'),%ActiveTemplateInstance, %pClassMethod,%pClassMethodPrototype,PREPARE(%FixClassName(%FixBaseClassToUse('Default'))),TREE(%TreeText & %CodeText)
#GROUP(%ADOProcessPreviewerVirtuals, %TreeText, %DataText, %CodeText)
#EMBED(%PreviewerManagerMethodDataSection,'ADOPreview Method Data Section'),%ActiveTemplateInstance, %pClassMethod,%pClassMethodPrototype,LABEL,DATA,PREPARE(%FixClassName(%FixBaseClassToUse('Default'))),TREE(%TreeText & %DataText)
  #?CODE
  #EMBED(%PreviewerManagerMethodCodeSection,'ADOPreview Method Executable Code Section'),%ActiveTemplateInstance, %pClassMethod,%pClassMethodPrototype,PREPARE(%FixClassName(%FixBaseClassToUse('Default'))),TREE(%TreeText & %CodeText)
#!
#!
#!
#!
#!*******************************************************
#!*******************************************************
#!*******************************************************
#!*******************************************************
#!*******************************************************
#!*******************************************************
#!
#!
#EXTENSION(AddADOFile, 'AddADOFile'),PROCEDURE,PRIMARY('Other ADO File',OPTKEY),HLP('~TPLCodeAddADOFile'),DESCRIPTION('ADO - Add File:' & %Primary), req(ADOSupport)
#DISPLAY('Add the file structure to the app')
#DISPLAY('without adding it to the file open statement.')
#PROMPT('Add Other Files too?',CHECK),%AddADOOtherFiles,DEFAULT(1),AT(10)
#!
#AT(%CustomGlobalDeclarations)
#CALL(%AddFilesToDeclare,%AddADOOtherFiles)
#ENDAT
#!
#GROUP(%AddFilesToDeclare,%pAddOtherFiles=0),PRESERVE
#IF(%Primary)
  #FIX(%File,%Primary)
  #ADD(%UsedFile,%File)
  #FOR(%Secondary)
    #FIX(%File,%Secondary)
    #ADD(%UsedFile,%File)
  #ENDFOR
#ENDIF
#IF(%pAddOtherFiles)
  #FOR(%OtherFiles)
    #ADD(%UsedFile,%OtherFiles)
  #ENDFOR
#ENDIF
#!
#!*******************************************************
#!*******************************************************
#!*******************************************************
#!*******************************************************
#!*******************************************************
#!*******************************************************
#!
#!
#CONTROL(ADOBrwLocator, 'ADO Browse Locator'), req(BrowseBox), HLP('~TplADOBrowseLocator')
  CONTROLS
    PROMPT('Locate:'), USE(?ADOLocatorPromtp), at(,,35,10)
    ENTRY(@s50),AT(40,0,183,10), USE(ADOLocator)
  END
#ATSTART
  #DECLARE(%svADOLocatorControl)
  #DECLARE(%svADOLocatorVar)
  #FOR(%Control), where(%ControlInstance = %ActiveTemplateInstance)
    #IF(%ControlOriginal = 'ADOLocator')
      #SET(%svADOLocatorControl, %Control)
      #SET(%svADOLocatorVar, %ControlUse)
    #ENDIF
  #ENDFOR
#ENDAT
#AT(%DataSection), PRIORITY(2000)
%[20]svADOLocatorVar string(50)
#ENDAT
#AT(%DerivedEmbedAfterStandardWindowOpening)
%ThisObjectName.InitLocator(%svADOLocatorVar)
#ENDAT
#AT(%WindowManagerMethodCodeSection,'Init','(),BYTE'),PRIORITY(7750)
%ThisObjectName.InitLocator(%svADOLocatorVar)
#ENDAT
#AT(%ControlEventHandling, %svADOLocatorControl, 'Accepted')
%ThisObjectName.Locate()
#ENDAT
#! --------------------------------------------------------------------------------------------------------------------------------------------
#EXTENSION(QCenterSupport, 'Pragma definition for Exception Group selection in TRN'), req(ADOSupport), APPLICATION, HLP('~TPLADOGlobalQCenter')
#SHEET
  #TAB('General')
    #PREPARE
      #DECLARE(%svQCenterPragmas), MULTI
      #DECLARE(%svLineRecord)
      #DECLARE(%svCompilePos)
      #DECLARE(%svCommaPos)
      #DECLARE(%svLastParPos)
      #OPEN('cFilterList.TRN'), READ
      #LOOP
        #READ(%svLineRecord)
        #IF(%svLineRecord = %eof)
          #BREAK
        #ELSE
          #SET(%svCompilePos, INSTRING('COMPILE(''***''', upper(%svLineRecord), 1, 1))
          #IF(%svCompilePos <> 0)
            #SET(%svCommaPos, INSTRING(',', upper(%svLineRecord), 1, %svCompilePos))
            #SET(%svLastParPos, INSTRING(')', upper(%svLineRecord), 1, %svCommaPos))
            #ADD(%svQCenterPragmas, clip(left(slice(%svLineRecord, %svCommaPos + 1, %svLastParPos - 1))))
          #ENDIF
        #ENDIF
      #ENDLOOP
      #CLOSE('cFilterList.TRN')
    #ENDPREPARE
    #! #PROMPT('Pragma Name: ', @s50), %QCenterPragmaNameExt
    #PROMPT('Pragma Name: ', FROM(%svQCenterPragmas)), %QCenterPragmaNameExt
  #ENDTAB
#ENDSHEET
#at(%BeforeGlobalIncludes)
  #FOR(%svQCenterPragmas), WHERE(%svQCenterPragmas <> %QCenterPragmaNameExt)
    #PDEFINE(%svQCenterPragmas, 0)
  #ENDFOR
  #PDEFINE(%QCenterPragmaNameExt, 1)
#ENDAT

#!*******************************************************
#!*******************************************************
#!
#!
#include('qcenter.tpw')
#include('ADOlog.tpw')
#include('ADOErr.tpw')
#include('ADOObj.tpw')
