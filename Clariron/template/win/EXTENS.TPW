#!----------------------------------------------------------------
#EXTENSION(RecordValidation,'Validate a record against the dictionary'),HLP('~TPLExtensionRecordValidation.htm'),PROCEDURE
#BOXED('Record Validation')
  #DISPLAY('Control Value Validation Conditions..')
  #PROMPT('Validate when the control is Accepted',CHECK),%ValidateOnAccept,AT(10,,150),DEFAULT(1)
  #PROMPT('Validate during Non-Stop Select',CHECK),%ValidateOnNonStopSelect,DEFAULT(1),AT(10,,150)
  #BUTTON('Do Not Validate...'),MULTI(%ControlsExcluded,%ControlToExclude),AT(10,,180),HLP('~TPLExtensionRecordValidation.htm')
    #PROMPT('Control to Exclude',CONTROL),%ControlToExclude
  #ENDBUTTON
#ENDBOXED
#AT(%GatherSymbols)
  #FOR(%Control)                               #! FOR each screen field
    #FIND(%Field,%ControlUse)                  #! FIX to process field
    #IF(%Field)
      #IF(%FieldLookup)                        #! IF Must Be In File
        #ADD(%ProcFilesUsed,%FieldLookup)      #! FIX for file processing
      #ENDIF                                   #! END (IF Must Be In File)
    #ENDIF
  #ENDFOR                                      #! END (FOR each screen field)
#ENDAT
#AT(%ControlPostEventHandling)
  #SUSPEND
    #IF(%ControlEvent = 'Accepted')
      #IF(%ValidateOnAccept OR %ValidateOnNonStopSelect)
        #IF(%ValidateOnAccept AND %validateOnNonStopSelect)
#INSERT(%RecordValidationCode)
        #ELSIF(%ValidateOnAccept)
#?IF NOT %Window{PROP:AcceptAll}
  #INSERT(%RecordValidationCode)
#?END
        #ELSE
#?IF %Window{PROP:AcceptAll}
  #INSERT(%RecordValidationCode)
#?END
        #ENDIF
      #ENDIF
    #ENDIF
  #RESUME
#ENDAT
#!----------------------------------------------------------------
#GROUP(%RecordValidationCode)
  #FIND(%ControlToExclude,%Control)
  #IF(NOT %ControlToExclude)
    #CASE(%ControlType)
    #OF('ENTRY')
    #OROF('SPIN')
    #OROF('DROP')
    #OROF('COMBO')
      #FIND(%Field,%ControlUse)
      #IF(%FieldLookup)
        #FIX(%Relation,%FieldLookup)
        #FOR(%FileKeyField)
%FileKeyFieldLink = %FileKeyField
        #ENDFOR
GET(%Relation,%RelationKey)
IF ERRORCODE()
        #IF(%FieldDescription)
  IF StandardWarning(Warn:NotInFile,'%'FieldDescription','%Relation')
        #ELSE
  IF StandardWarning(Warn:NotInFile,'%Field','%Relation')
        #ENDIF
    SELECT(%Control)
        #IF(%ValidateOnNonStopSelect)
    %Window{PROP:AcceptAll} = False
        #ENDIF
    CYCLE
  END
END
      #ENDIF
      #IF(%FieldRangeLow <> '' OR %FieldRangeHigh <> '')
        #IF(%FieldDescription)
          #IF(%FieldRangeLow <> '' AND %FieldRangeHigh <> '')
IF NOT INRANGE(%Field,%FieldRangeLow,%FieldRangeHigh)
  IF StandardWarning(Warn:OutOfRange,'%'FieldDescription','%FieldRangeLow and %FieldRangeHigh')
          #ELSIF(%FieldRangeLow <> '')
IF %Field < %FieldRangeLow
  IF StandardWarning(Warn:OutOfRangeLow,'%'FieldDescription','%FieldRangeLow')
          #ELSE
IF %Field > %FieldRangeHigh
  IF StandardWarning(Warn:OutOfRangeHigh,'%'FieldDescription','%FieldRangeHigh')
          #ENDIF
        #ELSE
          #IF(%FieldRangeLow <> '' AND %FieldRangeHigh <> '')
IF NOT INRANGE(%Field,%FieldRangeLow,%FieldRangeHigh)
  IF StandardWarning(Warn:OutOfRange,'%Field','%FieldRangeLow and %FieldRangeHigh')
          #ELSIF(%FieldRangeLow <> '')
IF %Field < %FieldRangeLow
  IF StandardWarning(Warn:OutOfRangeLow,'%Field','%FieldRangeLow')
          #ELSE
IF %Field > %FieldRangeHigh
  IF StandardWarning(Warn:OutOfRangeHigh,'%Field','%FieldRangeHigh')
          #ENDIF
        #ENDIF
    SELECT(%Control)
        #IF(%ValidateOnNonStopSelect)
    %Window{PROP:AcceptAll} = False
        #ENDIF
    CYCLE
  END
END
      #ENDIF
    #ENDCASE
  #ENDIF
#!----------------------------------------------------------------
#!
#!
#!
#!
#!
#!
#EXTENSION(FrameExtension,'Add functionality to the Frame'),HLP('~TPLExtensionFrameExtension.htm'),PROCEDURE,LAST
#RESTRICT
 #IF(%Window)
  #ACCEPT
 #ELSE
  #REJECT
 #ENDIF
#ENDRESTRICT
#PREPARE
  #CALL(%ReadABCFiles)
  #CALL(%SetClassDefaults, 'FrameExtension', 'FrameExtension', 'WindowExtenderClass')
#ENDPREPARE
  #BOXED('Default Resizer prompts'),HIDE
    #INSERT(%OOPHiddenPrompts)
    #WITH(%ClassItem,'FrameExtension')
       #INSERT(%ClassPrompts)
    #ENDWITH
  #ENDBOXED
#BOXED('Frame Extension Options')
    #PROMPT('Enable ShutDown',CHECK),%EnableShutDown,DEFAULT(0),AT(10,,150)
    #PROMPT('Enable Tray Icon',CHECK),%EnableTrayIcon,DEFAULT(0),AT(10,,150)
    #ENABLE(%EnableTrayIcon)
        #ENABLE(NOT INSTRING('APPLICATION',%WindowStatement,1,1)),CLEAR
            #PROMPT('Enable Tray Icon on App Lose focus',CHECK),%EnableTrayIconOnLoseFocus,DEFAULT(0),AT(10,,150)
        #ENDENABLE
        #PROMPT('Tray Icon Tooltip:',@S255),%TrayIconTooltip
        #BUTTON('Tray Icon Mouse Right Button Menu'),AT(,,150)
           #INSERT(%StandardContextMenuPrompts)
        #ENDBUTTON
    #ENDENABLE
#ENDBOXED
#!
#ATSTART
  #CALL(%ReadABCFiles)
  #CALL(%SetClassDefaults, 'FrameExtension', 'FrameExtension', 'WindowExtenderClass')
  #EQUATE(%FrameExtensionObjectName,%ThisObjectName)
#ENDAT
#!
#AT(%GatherObjects),WHERE(%EnableShutDown OR %EnableTrayIcon)
#CALL(%AddObjectList, 'FrameExtension')
#ENDAT
#AT(%LocalProcedures),WHERE(%EnableShutDown OR %EnableTrayIcon)
  #CALL(%GenerateVirtuals, 'FrameExtension', 'Local Objects|Abc Objects|FrameExtension', '%FrameExtensionVirtuals(Clarion)')
#ENDAT
#AT(%LocalDataClasses),WHERE(%EnableShutDown OR %EnableTrayIcon)
#INSERT(%GenerateClass, 'FrameExtension')
#ENDAT
#AT(%FrameExtensionMethodCodeSection,%ActiveTemplateInstance),PRIORITY(5000),DESCRIPTION('Parent Call'),WHERE(%ParentCallValid() AND %EnableShutDown OR %EnableTrayIcon)
  #CALL(%GenerateParentCall)
#ENDAT
#!
#!
#AT(%AfterWindowOpening),PRIORITY(5000),WHERE(%EnableShutDown OR %EnableTrayIcon)
%FrameExtensionObjectName.Init(%Window,%EnableShutDown,%EnableTrayIcon,0{PROP:Icon},'%'TrayIconTooltip')
#IF(%EnableTrayIcon AND %EnableTrayIconOnLoseFocus)
%FrameExtensionObjectName.SetToTrayOnLosefocus(True)
#ENDIF
#ENDAT
#!
#AT(%AcceptLoopBeforeEventHandling),PRIORITY(5000),WHERE(%EnableShutDown OR %EnableTrayIcon)
IF EVENT()
   %FrameExtensionObjectName.TakeEvent()
END
#ENDAT
#!
#AT(%FrameExtensionMethodCodeSection,%ActiveTemplateInstance,'WindowExtenderClass','TrayIconMouseLeft2','()'),PRIORITY(5500),WHERE(%EnableShutDown OR %EnableTrayIcon)
POST(EVENT:Maximize)
#ENDAT
#!
#AT(%FrameExtensionMethodCodeSection,%ActiveTemplateInstance,'WindowExtenderClass','TrayIconMouseRight','()'),PRIORITY(5500),WHERE(%EnableShutDown OR %EnableTrayIcon)
#IF(ITEMS(%ContextMenus))
#INSERT(%InsertStandardContextMenuHandling,'POPUP('''&%InsertStandardContextMenuString()&''')-1')
#ENDIF
#ENDAT
#!
#GROUP(%FrameExtensionVirtuals, %TreeText, %DataText, %CodeText)
#EMBED(%FrameExtensionMethodDataSection,'Frame Extension Method Data Section'),%ActiveTemplateInstance,%pClassName,%pClassMethod,%pClassMethodPrototype,LABEL,DATA,PREPARE(,%FixClassName(%FixBaseClassToUse('FrameExtension'))),TREE(%TreeText & %DataText)
#?%NULL
  #?CODE
  #EMBED(%FrameExtensionMethodCodeSection,'Frame Extension Method Executable Code Section'),%ActiveTemplateInstance,%pClassName,%pClassMethod,%pClassMethodPrototype,PREPARE(,%FixClassName(%FixBaseClassToUse('FrameExtension'))),TREE(%TreeText & %CodeText)
#!
#!
#!
#!
#!
#EXTENSION(DateTimeDisplay,'Display the date and/or time in the current window'),HLP('~TPLExtensionDateTimeDisplay.htm'),PROCEDURE,LAST
#BUTTON('Date and Time Display'),AT(10,,180),HLP('~TPLExtensionDateTimeDisplay.htm')
  #BOXED('Date Display...')
    #PROMPT('Display the current day/date in the window',CHECK),%DisplayDate,DEFAULT(0),AT(10,,150)
    #ENABLE(%DisplayDate)
      #PROMPT('Date Picture:',DROP('October 31, 1959|OCT 31,1959|10/31/59|10/31/1959|31 OCT 59|31 OCT 1959|31/10/59|31/10/1959|Other')),%DatePicture,DEFAULT('October 31, 1959')
      #ENABLE(%DatePicture = 'Other')
        #PROMPT('Other Date Picture:',@S20),%OtherDatePicture,REQ
      #ENDENABLE
      #PROMPT('Show the day of the week before the date',CHECK),%ShowDayOfWeek,DEFAULT(1),AT(10,,150)
      #PROMPT('&Location of Date Display:',DROP('Control|Status Bar')),%DateDisplayLocation
      #ENABLE(%DateDisplayLocation='Status Bar')
        #PROMPT('Status Bar Section:',@n1),%DateStatusSection,REQ,DEFAULT(1)
      #ENDENABLE
      #ENABLE(%DateDisplayLocation='Control')
        #PROMPT('Date Display Control:',CONTROL),%DateControl,REQ
      #ENDENABLE
    #ENDENABLE
  #ENDBOXED
  #BOXED('Time Display...')
    #PROMPT('Display the current time in the window',CHECK),%DisplayTime,DEFAULT(0),AT(10,,150)
    #ENABLE(%DisplayTime)
      #PROMPT('Time Picture:',DROP('5:30PM|5:30:00PM|17:30|17:30:00|1730|173000|Other')),%TimePicture,DEFAULT('5:30PM')
      #ENABLE(%TimePicture = 'Other')
        #PROMPT('Other Time Picture:',@S20),%OtherTimePicture,REQ
      #ENDENABLE
      #PROMPT('&Location of Time Display:',DROP('Control|Status Bar')),%TimeDisplayLocation
      #ENABLE(%TimeDisplayLocation='Status Bar')
        #PROMPT('Status Bar Section:',@n1),%TimeStatusSection,REQ,DEFAULT(2)
      #ENDENABLE
      #ENABLE(%TimeDisplayLocation='Control')
        #PROMPT('Time Display Control:',CONTROL),%TimeControl,REQ
      #ENDENABLE
    #ENDENABLE
  #ENDBOXED
#ENDBUTTON
#ATSTART
  #DECLARE(%TimerEventGenerated)
  #IF(%DisplayDate)
    #DECLARE(%DateUsePicture)
    #CASE(%DatePicture)
    #OF('10/31/59')
      #SET(%DateUsePicture,'@D1')
    #OF('10/31/1959')
      #SET(%DateUsePicture,'@D2')
    #OF('OCT 31,1959')
      #SET(%DateUsePicture,'@D3')
    #OF('October 31, 1959')
      #SET(%DateUsePicture,'@D4')
    #OF('31/10/59')
      #SET(%DateUsePicture,'@D5')
    #OF('31/10/1959')
      #SET(%DateUsePicture,'@D6')
    #OF('31 OCT 59')
      #SET(%DateUsePicture,'@D7')
    #OF('31 OCT 1959')
      #SET(%DateUsePicture,'@D8')
    #OF('Other')
      #SET(%DateUsePicture,%OtherDatePicture)
    #ENDCASE
  #ENDIF
  #IF(%DisplayTime)
    #DECLARE(%TimeUsePicture)
    #CASE(%TimePicture)
    #OF('17:30')
      #SET(%TimeUsePicture,'@T1')
    #OF('1730')
      #SET(%TimeUsePicture,'@T2')
    #OF('5:30PM')
      #SET(%TimeUsePicture,'@T3')
    #OF('17:30:00')
      #SET(%TimeUsePicture,'@T4')
    #OF('173000')
      #SET(%TimeUsePicture,'@T5')
    #OF('5:30:00PM')
      #SET(%TimeUsePicture,'@T6')
    #OF('Other')
      #SET(%TimeUsePicture,%OtherTimePicture)
    #ENDCASE
  #ENDIF
#ENDAT
#AT(%DataSectionBeforeWindow)
  #IF(%DisplayDate AND %ShowDayOfWeek)
DisplayDayString STRING('Sunday   Monday   Tuesday  WednesdayThursday Friday   Saturday ')
DisplayDayText   STRING(9),DIM(7),OVER(DisplayDayString)
  #ENDIF
#ENDAT
#AT(%BeforeAccept)
  #IF(%DisplayTime OR %DisplayDate)
IF NOT INRANGE(%Window{Prop:Timer},1,100)
  %Window{Prop:Timer} = 100
END
#INSERT(%DateTimeDisplayCode)
  #ENDIF
#ENDAT
#AT(%WindowEventHandling,'Timer')
  #SET(%TimerEventGenerated,%True)
  #IF(%DisplayDate OR %DisplayTime)
#INSERT(%DateTimeDisplayCode)
  #ENDIF
#ENDAT
#AT(%WindowOtherEventHandling)
  #IF(%DisplayDate OR %DisplayTime)
    #IF(NOT %TimerEventGenerated)
IF EVENT() = Event:Timer
  #INSERT(%DateTimeDisplayCode)
END
    #ENDIF
  #ENDIF
#ENDAT
#GROUP(%DateTimeDisplayCode)
  #IF(%DisplayDate)
    #IF(%ShowDayOfWeek)
      #CASE(%DateDisplayLocation)
      #OF('Control')
  %DateControl{Prop:Text} = CLIP(DisplayDayText[(TODAY()%%7)+1]) & ', ' & FORMAT(TODAY(),%DateUsePicture)
  DISPLAY(%DateControl)
      #ELSE
  %Window{Prop:StatusText,%DateStatusSection} = CLIP(DisplayDayText[(TODAY()%%7)+1]) & ', ' & FORMAT(TODAY(),%DateUsePicture)
      #ENDCASE
    #ELSE
      #CASE(%DateDisplayLocation)
      #OF('Control')
  %DateControl{Prop:Text} = FORMAT(TODAY(),%DateUsePicture)
  DISPLAY(%DateControl)
      #ELSE
  %Window{Prop:StatusText,%DateStatusSection} = FORMAT(TODAY(),%DateUsePicture)
      #ENDCASE
    #ENDIF
  #ENDIF
  #IF(%DisplayTime)
    #CASE(%TimeDisplayLocation)
    #OF('Control')
  %TimeControl{Prop:Text} = FORMAT(CLOCK(),%TimeUsePicture)
  DISPLAY(%TimeControl)
    #ELSE
  %Window{Prop:StatusText,%TimeStatusSection} = FORMAT(CLOCK(),%TimeUsePicture)
    #ENDCASE
  #ENDIF
#! --------------------------------------------------------------------------------------
#EXTENSION (WindowResize, 'Allows controls to be resized with window'), PROCEDURE,HLP('~TPLExtensionWindowResize.htm')
  #PROMPT('Resize Strategy: ',DROP('Use Anchor|Centered|Resize|Spread|Don''t alter controls')),%AppStrategy,DEFAULT('Spread')
  #PROMPT('Restrict Minimum Window Size', CHECK), %RestrictMinSize, DEFAULT(%False), AT(5)
  #ENABLE(%RestrictMinSize)
    #BOXED('Minimum Window Size')
      #PROMPT('Minimum Width:', @n5), %WindowMinWidth
      #PROMPT('Minimum Height:', @n5), %WindowMinHeight
    #ENDBOXED
  #ENDENABLE
  #PROMPT('Restrict Maximum Window Size', CHECK), %RestrictMaxSize, DEFAULT(%False), AT(5)
  #ENABLE(%RestrictMaxSize)
    #BOXED('Maxmium Window Size')
      #PROMPT('Maximum Width:', @n5), %WindowMaxWidth
      #PROMPT('Maximum Height:', @n5), %WindowMaxHeight
    #ENDBOXED
  #ENDENABLE
#!
#ATSTART
#DECLARE(%InitParameters)
#ENDAT
#AT (%CustomGlobalDeclarations)
  #PROJECT ('ResCode.Clw')
#ENDAT
#!
#AT (%AfterGlobalIncludes), WHERE(~%ResizeGlobalDefsPlaced)
   INCLUDE('ResDef.Clw')
  #SET (%ResizeGlobalDefsPlaced, %True)
#ENDAT
#!
#AT (%DataSectionBeforeWindow)
WinResize            WindowResizeType
#ENDAT
#!
#AT (%BeforeWindowIniResize)
#INSERT(%ResizeInitializeCode)
#ENDAT
#!
#AT (%WindowEventHandling, 'CloseDown'),WHERE(%AppStrategy <> 'Don''t alter controls')
WinResize.Kill()
#ENDAT
#!
#AT (%WindowEventHandling, 'CloseWindow'),WHERE(%AppStrategy <> 'Don''t alter controls')
WinResize.Kill()
#ENDAT
#!
#! These embeds only exist if the UserControl extension is added
#! to the procedure
#!
#AT(%UserControlResizerOnDesignInit),PRIORITY(5000)
#INSERT(%ResizeInitializeCode)
#ENDAT
#!
#AT(%UserControlResizerOnDesignKill),PRIORITY(5000)
WinResize.Kill()
#ENDAT
#!
#!
#INSERT(%FieldResizeAnchorPrompt)
#!
#!
#!
#GROUP(%ResizeInitializeCode)
  #IF(%RestrictMinSize)
    #IF(%WindowMinWidth=0 AND %WindowMinHeight=0)
      #SET(%InitParameters,',Resize:SetMinSize')
    #ELSE
      #IF(%WindowMinWidth=0)
%Window{PROP:MinWidth}=%Window{PROP:Width}                      #<! Restrict the minimum window width to the 'design time' width
      #ELSE
%Window{PROP:MinWidth}=%WindowMinWidth                          #<! Restrict the minimum window width
      #ENDIF
      #IF(%WindowMinHeight=0)
%Window{PROP:MinHeight}=%Window{PROP:Height}                    #<! Restrict the minimum window height to the 'design time' height
      #ELSE
%Window{PROP:MinHeight}=%WindowMinHeight                        #<! Restrict the minimum window height
      #ENDIF
    #ENDIF
  #ENDIF
  #IF(%RestrictMaxSize)
    #IF(%WindowMaxWidth=0 AND %WindowMaxHeight=0)
      #IF(%InitParameters)
        #SET(%InitParameters,%InitParameters&',Resize:SetMaxSize')
      #ELSE
        #SET(%InitParameters,',,Resize:SetMaxSize')
      #END
    #ELSE
      #IF(%WindowMaxWidth=0)
%Window{PROP:MaxWidth}=%Window{PROP:Width}                      #<! Restrict the maximum window width to the 'design time' width
      #ELSE
%Window{PROP:MaxWidth}=%WindowMaxWidth                          #<! Restrict the maximum window width
      #ENDIF
      #IF(%WindowMaxHeight=0)
%Window{PROP:MaxHeight}=%Window{PROP:Height}                    #<! Restrict the maximum window height to the 'design time' height
      #ELSE
%Window{PROP:MaxHeight}=%WindowMaxHeight                        #<! Restrict the maximum window height
      #ENDIF
    #ENDIF
  #ENDIF
  #CASE(%AppStrategy)
  #OF('Centered')
  #OROF('Use Anchor')
WinResize.Init(AppStrategy:Centered%InitParameters)
  #OF('Spread')
WinResize.Init(AppStrategy:Spread%InitParameters)
  #OF('Resize')
WinResize.Init(AppStrategy:Resize%InitParameters)
  #ENDCASE
  #IF(%AppStrategy='Use Anchor')
WinResize.DeferMoves=True
WinResize.SetParentDefaults()    #<! Calculate default control parent-child relationships based upon their positions on the window
    #FOR(%Control),WHERE(%ResizeGetAnchorValues()<>'Anchor:None')
WinResize.SetAnchor(%Control,%(%ResizeGetAnchorValues()))
    #ENDFOR
  #ENDIF
#!
#GROUP(%FieldResizeAnchorPromptShow),PRESERVE,AUTO
#FIX(%ActiveTemplate,'WindowResize(Clarion)')
#IF(%ActiveTemplate='WindowResize(Clarion)')
    #FOR(%ActiveTemplateInstance)
       #CONTEXT(%Procedure,%ActiveTemplateInstance)
          #IF(%AppStrategy='Use Anchor')
              #RETURN(%True)
          #ELSE
              #RETURN(%False)
          #ENDIF
       #ENDCONTEXT
       #BREAK
    #ENDFOR
#ELSE
    #RETURN(%False)
#ENDIF
#!
#GROUP(%FieldResizeAnchorPrompt)
#FIELD
   #BOXED,WHERE(%FieldResizeAnchorPromptShow())
      #BUTTON('Set Anchors for resizing the control'),AT(10,,180),HLP('~TPLExtensionWindowResizeAnchors.htm')
         #BOXED('Anchor settings'),SECTION
           #PROMPT('&T',Check),%ResizeAnchorTop,AT(42,15,10,15),PROP(PROP:Icon,''),WHENACCEPTED(%ResizeValidateAnchorValues())
           #PROMPT('&L',Check),%ResizeAnchorLeft,AT(23,30,19,9),PROP(PROP:Icon,''),WHENACCEPTED(%ResizeValidateAnchorValues())
           #PROMPT('&R',Check),%ResizeAnchorRight,AT(51,30,19,9),PROP(PROP:Icon,''),WHENACCEPTED(%ResizeValidateAnchorValues())
           #PROMPT('&B',Check),%ResizeAnchorBottom,AT(42,39,10,15),PROP(PROP:Icon,''),WHENACCEPTED(%ResizeValidateAnchorValues())
           #BUTTON(''),AT(42,30,10,9),WHENACCEPTED(%ResizeToggleAnchorValues())
           #ENDBUTTON
           #PROMPT('^',Check),%ResizeAnchorGrowTop,AT(42,5,10,10),PROP(PROP:Icon,''),WHENACCEPTED(%ResizeValidateAnchorGrowValues('TOP'))
           #PROMPT('<',Check),%ResizeAnchorGrowLeft,AT(12,30,11,9),PROP(PROP:Icon,''),WHENACCEPTED(%ResizeValidateAnchorGrowValues('LEFT'))
           #PROMPT('>',Check),%ResizeAnchorGrowRight,AT(70,30,11,9),PROP(PROP:Icon,''),WHENACCEPTED(%ResizeValidateAnchorGrowValues('RIGHT'))
           #PROMPT('v',Check),%ResizeAnchorGrowBottom,AT(42,54,10,10),PROP(PROP:Icon,''),WHENACCEPTED(%ResizeValidateAnchorGrowValues('BOTTOM'))
           #DISPLAY('You can change the edges that a control is anchored to by changing the Anchor property to any combination of Top, Left, Right or Bottom.'),AT(88,5,105,40)
         #ENDBOXED
      #ENDBUTTON
   #ENDBOXED
#ENDFIELD
#!
#!
#!
#!
#GROUP(%ResizeValidateAnchorValues)
 #IF(%ResizeAnchorTop)
    #SET(%ResizeAnchorGrowTop,%False)
 #ENDIF
 #IF(%ResizeAnchorLeft)
    #SET(%ResizeAnchorGrowLeft,%False)
 #ENDIF
 #IF(%ResizeAnchorRight)
    #SET(%ResizeAnchorGrowRight,%False)
 #ENDIF
 #IF(%ResizeAnchorBottom)
    #SET(%ResizeAnchorGrowBottom,%False)
 #ENDIF
#!
#!
#GROUP(%ResizeValidateAnchorGrowValues,%CheckOn='NONE')
#IF(%CheckOn='TOP' OR %CheckOn='NONE')
    #IF(%ResizeAnchorGrowTop)
       #SET(%ResizeAnchorGrowBottom,%False)
    #ENDIF
 #ENDIF
#IF(%CheckOn='BOTTOM' OR %CheckOn='NONE')
    #IF(%ResizeAnchorGrowBottom)
       #SET(%ResizeAnchorGrowTop,%False)
    #ENDIF
 #ENDIF
#IF(%CheckOn='LEFT' OR %CheckOn='NONE')
    #IF(%ResizeAnchorGrowLeft)
       #SET(%ResizeAnchorGrowRight,%False)
    #ENDIF
 #ENDIF
#IF(%CheckOn='RIGHT' OR %CheckOn='NONE')
    #IF(%ResizeAnchorGrowRight)
       #SET(%ResizeAnchorGrowLeft,%False)
    #ENDIF
 #ENDIF
 #IF(%ResizeAnchorGrowTop)
    #SET(%ResizeAnchorTop,%False)
    #SET(%ResizeAnchorGrowBottom,%False)
 #ENDIF
 #IF(%ResizeAnchorGrowBottom)
    #SET(%ResizeAnchorBottom,%False)
    #SET(%ResizeAnchorGrowTop,%False)
 #ENDIF
 #IF(%ResizeAnchorGrowLeft)
    #SET(%ResizeAnchorLeft,%False)
    #SET(%ResizeAnchorGrowRight,%False)
 #ENDIF
 #IF(%ResizeAnchorGrowRight)
    #SET(%ResizeAnchorRight,%False)
    #SET(%ResizeAnchorGrowLeft,%False)
 #ENDIF
#!
#!
#GROUP(%ResizeToggleAnchorValues)
    #IF(%ResizeAnchorRight AND %ResizeAnchorLeft AND %ResizeAnchorTop AND %ResizeAnchorBottom)
        #SET(%ResizeAnchorRight,0)
        #SET(%ResizeAnchorLeft,0)
        #SET(%ResizeAnchorTop,0)
        #SET(%ResizeAnchorBottom,0)
    #ELSE
        #SET(%ResizeAnchorRight,1)
        #SET(%ResizeAnchorLeft,1)
        #SET(%ResizeAnchorTop,1)
        #SET(%ResizeAnchorBottom,1)
        #CALL(%ResizeValidateAnchorValues)
    #ENDIF
#!
#!
#GROUP(%ResizeGetAnchorValues),AUTO
#DECLARE(%ResizeResult)
#SET(%ResizeResult,'')
#IF(%ResizeAnchorRight)
    #SET(%ResizeResult,%ResizeResult&CHOOSE(%ResizeResult<>'','+','')&'Anchor:Right')
#ELSE
   #IF(%ResizeAnchorGrowRight)
       #SET(%ResizeResult,%ResizeResult&CHOOSE(%ResizeResult<>'','+','')&'Anchor:GrowRight')
   #ENDIF
#ENDIF
#IF(%ResizeAnchorLeft)
    #SET(%ResizeResult,%ResizeResult&CHOOSE(%ResizeResult<>'','+','')&'Anchor:Left')
#ELSE
   #IF(%ResizeAnchorGrowLeft)
       #SET(%ResizeResult,%ResizeResult&CHOOSE(%ResizeResult<>'','+','')&'Anchor:GrowLeft')
   #ENDIF
#ENDIF
#IF(%ResizeAnchorTop)
    #SET(%ResizeResult,%ResizeResult&CHOOSE(%ResizeResult<>'','+','')&'Anchor:Top')
#ELSE
   #IF(%ResizeAnchorGrowTop)
       #SET(%ResizeResult,%ResizeResult&CHOOSE(%ResizeResult<>'','+','')&'Anchor:GrowTop')
   #ENDIF
#ENDIF
#IF(%ResizeAnchorBottom)
    #SET(%ResizeResult,%ResizeResult&CHOOSE(%ResizeResult<>'','+','')&'Anchor:Bottom')
#ELSE
   #IF(%ResizeAnchorGrowBottom)
       #SET(%ResizeResult,%ResizeResult&CHOOSE(%ResizeResult<>'','+','')&'Anchor:GrowBottom')
   #ENDIF
#ENDIF
#IF(%ResizeResult='')
    #SET(%ResizeResult,'Anchor:None')
#ENDIF
#RETURN(%ResizeResult)
#!
#!
#!
#! ------------------------------------------------------------------------------------
#EXTENSION (FormVCRControls, 'Allow Form to be driven by Toolbar VCR Controls'), PROCEDURE, REQ(SaveButton), HLP('~TPLExtensionFormVCRControls.htm')
#AT (%DataSectionBeforeWindow), WHERE(INSTANCE(%ActiveTemplateInstance) = 1)
  #IF (~(%GenerateBRWInstance OR %GenerateReltreeInstance))
ToolBarMode     UNSIGNED,AUTO
  #ENDIF
WindowXPos      SIGNED,AUTO,STATIC
WindowYPos      SIGNED,AUTO,STATIC
WindowPosInit   BOOL(False),STATIC
#ENDAT
#!
#AT(%AfterWindowOpening),WHERE(~(%INIActive AND %INISaveWindow))
IF WindowPosInit THEN
  SETPOSITION(0,WindowXPos,WindowYPos)
ELSE
  GETPOSITION(0,WindowXPos,WindowYPos)
  WindowPosInit=True
END
#ENDAT
#!
#AT (%WindowEventHandling, 'OpenWindow')
DO FORM::AssignButtons
#ENDAT
#!
#AT(%WindowEventHandling, 'Moved'),WHERE(~(%INIActive AND %INISaveWindow))
GETPOSITION(0,WindowXPos,WindowYPos)
#ENDAT
#!
#AT (%WindowOtherEventHandling)
IF ToolbarMode = FormMode THEN
  CASE ACCEPTED()
  OF TBarBrwBottom TO TBarBrwUp
  OROF TBarBrwInsert
    VCRRequest=ACCEPTED()
    POST(EVENT:Completed)
  OF TBarBrwHelp
    PRESSKEY(F1Key)
  END
  #EMBED (%AfterToolbarDispatch, 'After toolbar processed'),%ActiveTemplateInstance,TREE('After toolbar processed|Form')
END
#ENDAT
#!
#AT (%ProcedureRoutines)
FORM::AssignButtons ROUTINE
  ToolBarMode=FormMode
  DISABLE(TBarBrwFirst,TBarBrwLast)
  #EMBED(%InsideFORMAssignButtons,''),HIDE
  CASE OriginalRequest
  OF InsertRecord
    ENABLE(TBarBrwDown)
    ENABLE(TBarBrwInsert)
    TBarBrwDown{PROP:ToolTip}='Save record and add another'
    TBarBrwInsert{PROP:ToolTip}=TBarBrwDown{PROP:ToolTip}
  OF ChangeRecord
    ENABLE(TBarBrwBottom,TBarBrwUp)
    ENABLE(TBarBrwInsert)
    TBarBrwBottom{PROP:ToolTip}='Save changes and go to last record'
    TBarBrwTop{PROP:ToolTip}='Save changes and go to first record'
    TBarBrwPageDown{PROP:ToolTip}='Save changes and page down to record'
    TBarBrwPageUp{PROP:ToolTip}='Save changes and page up to record'
    TBarBrwDown{PROP:ToolTip}='Save changes and go to next record'
    TBarBrwUP{PROP:ToolTip}='Save changes and go to previous record'
    TBarBrwInsert{PROP:ToolTip}='Save this record and add a new one'
  END
  #FOR(%Control)
    #IF(UPPER(EXTRACT(%ControlStatement,'STD',1))='STD:HELP')
  TBarBrwHelp{PROP:Disable}=%Control{PROP:Disable}
      #BREAK
    #ENDIF
  #ENDFOR
  DISPLAY(TBarBrwFirst,TBarBrwLast)

#ENDAT
#!
#AT (%CancelBeforeCloseWindow)
VCRRequest = VCRNone
#ENDAT
#AT (%CloseBeforeCloseWindow)
VCRRequest = VCRNone
#ENDAT
#AT (%InsertCompletedDuplicateKeyError)
VCRRequest = VCRNone
#ENDAT
#AT (%InsertCompletedInsertError)
VCRRequest = VCRNone
#ENDAT
#AT (%ChangeCompletedUpdateError)
VCRRequest = VCRNone
#ENDAT
#AT (%DeleteCompletedDeleteError)
VCRRequest = VCRNone
#ENDAT
