#!----------------------------------------------------------------
#CONTROL(BrowseSelectButton,'Select record from a Browse Box'),DESCRIPTION('Select a Record from Browse on ' & %Primary),REQ(BrowseBox),FIRST,HLP('~TPLControlBrowseSelectButton.htm')
  CONTROLS
    BUTTON('&Select'),USE(?Select)
  END
#BOXED('Select Button')
  #PROMPT('Hide the Select button when not applicable',CHECK),%HideIfDisabled,AT(10,,150)
  #PROMPT('&Allow Select via Popup',CHECK),%SelectViaPopup,DEFAULT(1),AT(10,,150)
#ENDBOXED
#ATSTART
  #DECLARE(%SelectControl)
  #DECLARE(%SelectText)
  #FOR(%Control),WHERE(%ControlInstance = %ActiveTemplateInstance)
    #SET(%SelectControl,%Control)
    #IF(%SelectViaPopup)
      #SET(%SelectText,EXTRACT(%ControlStatement,'BUTTON',1))
      #SET(%SelectText,SUB(%SelectText,2,LEN(%SelectText)-2))
    #ENDIF
  #ENDFOR
#ENDAT
#!
#AT(%GenerateInstanceUpdate),WHERE(%AcceptToolbarControl AND %GenerateSelectInstance=0)
  #SET(%GenerateSelectInstance,%ActiveTemplateInstance)
#ENDAT
#AT(%AssignToolbarButtons,%ActiveTemplateParentInstance),WHERE(%AcceptToolBarControl)
  #IF(%SelectControl)
BrowseButtons.SelectButton = %SelectControl
  #ENDIF
#ENDAT
#AT(%WindowOtherEventHandling),WHERE(%GenerateSelectInstance=%ActiveTemplateInstance)
IF ToolBarMode = BrowseMode THEN
  DO SelectDispatch
END
#ENDAT
#!
#AT(%InsideDisplayToolbar),WHERE(%GenerateSelectInstance=%ActiveTemplateInstance)
  IF BrowseButtons.SelectButton THEN
    TBarBrwSelect{PROP:Disable} = BrowseButtons.SelectButton{PROP:Disable}
  END
#ENDAT
#!
#AT(%ProcedureRoutines),WHERE(%GenerateSelectInstance=%ActiveTemplateInstance)

SelectDispatch ROUTINE
  IF ACCEPTED() = TBarBrwSelect THEN       !trap remote browse select control calls
    POST(EVENT:Accepted,BrowseButtons.SelectButton)
  END

#ENDAT
#!
#AT(%PrepareAlerts)
%ListControl{PROP:Alrt,252} = MouseLeft2
#ENDAT
#AT(%BrowseBoxDoubleClick)
  #IF(%SelectControl)
    #IF(%Control=%ListControl)
IF LocalRequest = SelectRecord
  POST(EVENT:Accepted,%SelectControl)
  EXIT
END
    #ENDIF
  #ENDIF
#ENDAT
#AT(%BrowsePrepSelectRecord)
  #IF(%Control=%ListControl)
    #IF(%SelectControl)
      #IF(~%AcceptToolbarControl)
        #IF(%HideIfDisabled)
UNHIDE(%SelectControl)
        #ENDIF
%SelectControl{PROP:Default} = True
ENABLE(%SelectControl)
      #ENDIF
    #ENDIF
  #ENDIF
#ENDAT
#AT(%BrowseBoxPopupRecords)
  #IF(%SelectControl AND %SelectViaPopup)
    #IF(%Control=%ListControl)
IF LocalRequest = SelectRecord
  %InstancePrefix:PopupText = '%SelectText'
ELSE
  %InstancePrefix:PopupText = '~%SelectText'
END
    #ENDIF
  #ENDIF
#ENDAT
#AT(%BrowseBoxPopupNoRecords)
  #IF(%SelectControl AND %SelectViaPopup)
    #IF(%Control=%ListControl)
%InstancePrefix:PopupText = '~%SelectText'
    #ENDIF
  #ENDIF
#ENDAT
#AT(%BrowseBoxSelectPopupHandling,%ActiveTemplateParentInstance)
  #IF(%SelectControl AND %SelectViaPopup)
    #IF(%Control=%ListControl)
POST(EVENT:Accepted,%SelectControl)
    #ENDIF
  #ENDIF
#ENDAT
#AT(%BrowsePrepNormal)
  #IF(%Control=%ListControl)
    #IF(%SelectControl)
      #IF(%HideIfDisabled)
%SelectControl{PROP:Hide} = True
      #ENDIF
DISABLE(%SelectControl)
    #ENDIF
  #ENDIF
#ENDAT
#AT(%ControlEventHandling,%SelectControl,'Accepted')
  #IF(%SelectControl)
#EMBED(%BrowseBoxProcessSelected,'Browse Box, process selected record')
LocalResponse = RequestCompleted
POST(EVENT:CloseWindow)
  #ENDIF
#ENDAT
#!----------------------------------------------------------------
#CONTROL(BrowseViewButton, 'View records from a Browse Box'),DESCRIPTION('View a Record from Browse Box on ' & %Primary),REQ(BrowseBox),HLP('~TPLControlBrowseViewButton.htm')
#!
  CONTROLS
    BUTTON('&View'),AT(,,42,12),USE(?View)
  END
#!
#!
#ATSTART
  #DECLARE(%ViewControl)
  #DECLARE(%ViewText)
  #FOR(%Control),WHERE(%ControlInstance = %ActiveTemplateInstance)
    #IF(%ControlOriginal='?View')
       #SET(%ViewControl,%Control)
       #SET(%ViewText,EXTRACT(%ControlStatement,'BUTTON',1))
       #SET(%ViewText,SUB(%ViewText,2,LEN(%ViewText)-2))
    #ENDIF
  #ENDFOR
#ENDAT
#AT(%ControlEventHandling,%ViewControl,'Accepted')
DO %InstancePrefix:ButtonView
#ENDAT
#AT(%BrowseBoxPopupRecords)
#IF(%ViewControl)
  #IF(%Control=%ListControl)#! AND %EditViaPopup)
IF %InstancePrefix:PopupText
  %InstancePrefix:PopupText = '%(QUOTE(%ViewText))'&'|-|'&CLIP(%InstancePrefix:PopupText)
ELSE
  %InstancePrefix:PopupText = '%(QUOTE(%ViewText))'
END
  #ENDIF
#ENDIF
#ENDAT
#AT(%BrowseBoxPopupNoRecords)
#IF(%ViewControl)
  #IF(%Control=%ListControl)#! AND %EditViaPopup)
    #SET(%ValueConstruct,'')
    #SET(%ValueConstruct,'~' & %ViewText)
    #IF(%ValueConstruct)
IF %InstancePrefix:PopupText THEN
  IF INSTRING('%(QUOTE(%ViewText))',%InstancePrefix:PopupText,1,1) THEN
     %InstancePrefix:PopupText = SUB(%InstancePrefix:PopupText,1,INSTRING('%(QUOTE(%ViewText))',%InstancePrefix:PopupText,1,1)-1)&'%ValueConstruct'&SUB(%InstancePrefix:PopupText,INSTRING('%'ViewText',%InstancePrefix:PopupText,1,1)+LEN('%'ViewText'),LEN(%InstancePrefix:PopupText)-INSTRING('%(QUOTE(%ViewText))',%InstancePrefix:PopupText,1,1)+LEN('%(QUOTE(%ViewText))'))
  END
ELSE
  %InstancePrefix:PopupText = '%(QUOTE(%ValueConstruct))'
END
    #ENDIF
  #ENDIF
#ENDIF
#ENDAT
#AT(%BrowseBoxEditPopupHandling,%ActiveTemplateParentInstance),LAST
#IF(%ViewControl)
  #IF(%Control=%ListControl)
POST(EVENT:Accepted,%ViewControl)
  #ENDIF
#ENDIF
#ENDAT
#AT(%BrowseBoxEmpty,%ActiveTemplateParentInstance)
#IF(%ViewControl)
  #IF(%Control = %ListControl)
%ViewControl{PROP:Disable} = 1
  #ENDIF
#ENDIF
#ENDAT
#AT(%BrowseBoxNotEmpty,%ActiveTemplateParentInstance)
#IF(%ViewControl)
  #IF(%Control = %ListControl)
%ViewControl{PROP:Disable} = 0
  #ENDIF
#ENDIF
#ENDAT
#AT(%ProcedureRoutines)
#IF(%ViewControl)
!----------------------------------------------------------------
%InstancePrefix:ButtonView ROUTINE
!|
!| This routine calls the BrowseBox`s update procedure (as specified in the
!| BrowseUpdateButtons control template) to view a selected record.
!|
!| Whenever a button is pressed, the first thing that happens is that the
!| SyncWindow routine is called. This routine insures that the BrowseBox's
!| VIEW corresponds to the highlighted record by calling the %InstancePrefix:GetRecord routine.
!|
!| First, LocalRequest is set to ChangeRecord, and the %InstancePrefix:CallRecord routine
!| is called. This routine performs the actual call to the update procedure.
!|
!| If the change is successful (GlobalRequest = RequestCompleted) then the newly changed
!| record is displayed in the BrowseBox.
!|
!| If the change is not successful, the current page of the browse is refreshed.
!|
!| Finally, The BrowseBox is re-initialized, resetting scroll bars and totals.
!|
  LocalRequest = ViewRecord
  #EMBED(%BrowseBeforeView,'Browse Box, Before View'),%ActiveTemplateInstance,MAP(%ActiveTemplateInstance,%ActivetemplateInstanceDescription)
  DO %InstancePrefix:CallUpdate
  #EMBED(%BrowseAfterView,'Browse Box, After View'),%ActiveTemplateInstance,MAP(%ActiveTemplateInstance,%ActivetemplateInstanceDescription)
  IF GlobalResponse = RequestCompleted
    %InstancePrefix:LocateMode = LocateOnEdit
    DO %InstancePrefix:LocateRecord
  ELSE
    %InstancePrefix:RefreshMode = RefreshOnQueue
    DO %InstancePrefix:RefreshPage
  END
  DO %InstancePrefix:InitializeBrowse
  DO %InstancePrefix:PostNewSelection
  SELECT(%ListControl)
  LocalRequest = OriginalRequest
  LocalResponse = RequestCancelled
  DO RefreshWindow
#ENDIF
#ENDAT
#!
#!
#!
#!----------------------------------------------------------------
#CONTROL(BrowseNoRecordsButton,'Button which is disabled or hidden when no records exist in the Browse Box'),DESCRIPTION('Button disabled or hidden when no records exist in ' & %Primary&%ActiveTemplateInstance),REQ(BrowseBox(Clarion)),MULTI,HLP('~TPLControlBrowseNoRecordsButton.htm')
  CONTROLS
    BUTTON('Button'),AT(,,52,12),USE(?ButtonNoRecords)
  END
#BOXED('No Records Button')
  #PROMPT('&Select from Popup',CHECK),%SelectFromPopup,DEFAULT(1),AT(10,,150)
  #PROMPT('When no Records',OPTION),%NoRecordsAction,DEFAULT('Disable')
  #PROMPT('Disable',RADIO)
  #PROMPT('Hide',RADIO)
#ENDBOXED
#PROMPT('Refresh Window After Action',CHECK),%DoWindowRefresh,DEFAULT(1),AT(30,)
#ATSTART
  #DECLARE(%NoRecordsControl)
  #DECLARE(%NoRecordsControlText)
  #FOR(%Control),WHERE(%ControlInstance = %ActiveTemplateInstance)
    #SET(%NoRecordsControl,%Control)
    #IF(%SelectFromPopup)
      #SET(%NoRecordsControlText,EXTRACT(%ControlStatement,'BUTTON',1))
      #SET(%NoRecordsControlText,SUB(%NoRecordsControlText,2,LEN(%NoRecordsControlText)-2))
    #ENDIF
  #ENDFOR
#ENDAT
#!
#AT(%BrowseBoxPopupRecords,%ActiveTemplateParentInstance)
  #IF(%NoRecordsControl AND %SelectFromPopup)
    #IF(%Control=%ListControl)
  IF CLIP(%InstancePrefix:PopupText)
     %InstancePrefix:PopupText = CLIP(%InstancePrefix:PopupText)&'|%NoRecordsControlText'
  ELSE
     %InstancePrefix:PopupText = '%NoRecordsControlText'
  END
    #ENDIF
  #ENDIF
#ENDAT
#AT(%BrowseBoxPopupNoRecords,%ActiveTemplateParentInstance)
  #IF(%NoRecordsControl AND %SelectFromPopup)
    #IF(%Control=%ListControl)
%InstancePrefix:PopupText = '~%NoRecordsControlText'
    #ENDIF
  #ENDIF
#ENDAT
#AT(%BrowseBoxSelectPopupHandling,%ActiveTemplateParentInstance)
  #IF(%NoRecordsControl AND %SelectFromPopup)
    #IF(%Control=%ListControl)
POST(EVENT:Accepted,%NoRecordsControl)
    #ENDIF
  #ENDIF
#ENDAT
#AT(%BrowseBoxEmpty,%ActiveTemplateParentInstance)
  #IF(%Control = %ListControl)
    #IF (%NoRecordsAction='Disable')
%NoRecordsControl{PROP:Disable} = 1
    #ELSE
%NoRecordsControl{PROP:Hide} = 1
    #ENDIF
  #ENDIF
#ENDAT
#AT(%BrowseBoxNotEmpty,%ActiveTemplateParentInstance)
  #IF(%Control = %ListControl)
    #IF (%NoRecordsAction='Disable')
%NoRecordsControl{PROP:Disable} = 0
    #ELSE
%NoRecordsControl{PROP:Hide} = 0
    #ENDIF
  #ENDIF
#ENDAT
#AT(%ControlEventHandling,%NoRecordsControl,'Accepted'),LAST
  #IF(%DoWindowRefresh)
  ForceRefresh = True
  Do RefreshWindow
  #END
#ENDAT
#!----------------------------------------------------------------
#GROUP(%GetEIPStatus),PRESERVE
#IF(VAREXISTS(%GlobalUseABCClasess))
 #IF(%GlobalUseABCClasess)
  #IF(%ControlField AND %AllowEIP AND %EditInPlace)
    #CALL(%SetClassItem,'EIP_'&%ControlField)
    #IF(NOT %DefaultBaseClassType)
       #SET(%DefaultBaseClassType,%GetEIPDefaults(%EditInPlaceType))
    #ENDIF
    #RETURN('Enabled using '&%BaseClassToUse())
  #ENDIF
 #ENDIF
#ENDIF
#RETURN('Disabled')
#!
#!----------------------------------------------------------------
#GROUP(%GetEIPDefaults,%pEIPType)
    #CASE(UPPER(%pEIPType))
    #OF('ENTRY')
        #RETURN(%EditInPlaceEntryType)
    #OF('TEXT')
        #RETURN(%EditInPlaceTextType)
    #OF('CHECK')
        #RETURN(%EditInPlaceCheckType)
    #OF('SPIN')
        #RETURN(%EditInPlaceSpinType)
    #OF('DROPLIST')
        #RETURN(%EditInPlaceDropListType)
    #OF('DROPCOMBO')
        #RETURN(%EditInPlaceDropComboType)
    #OF('COLOR')
        #RETURN(%EditInPlaceColorType)
    #OF('FILE')
        #RETURN(%EditInPlaceFileType)
    #OF('FONT')
        #RETURN(%EditInPlaceFontType)
    #OF('MULTISELECT')
        #RETURN(%EditInPlaceMultiSelectType)
    #OF('CALENDAR')
        #RETURN(%EditInPlaceCalendarType)
    #OF('LOOKUP')
        #RETURN(%EditInPlaceLookupType)
    #OF('MULTICONTROL')
        #RETURN('MultiEditClass')
    #OF('OTHER')
        #RETURN(%EditInPlaceOtherType)
    #ELSE
        #RETURN(%EditInPlaceEntryType)
    #ENDCASE
#!
#!----------------------------------------------------------------
#GROUP(%SetMULTIEIPDefaults),PRESERVE
#IF(VAREXISTS(%GlobalUseABCClasess))
 #IF(%GlobalUseABCClasess)
  #IF(%ControlField AND %AllowEIP AND %EditInPlace)
        #CALL(%SetClassDefaults,'MULTIEIP_'&%ControlField&INSTANCE(%EditInPlaceMultiControls) ,'MULTIEditInPlace::'&%ControlField&'_'&INSTANCE(%EditInPlaceMultiControls),%GetEIPDefaults(%MULTIEditInPlaceType))
  #ENDIF
 #ENDIF
#ENDIF
#!----------------------------------------------------------------
#GROUP(%SetEIPDefaults),PRESERVE
#IF(VAREXISTS(%GlobalUseABCClasess))
 #IF(%GlobalUseABCClasess)
  #IF(%ControlField AND %AllowEIP AND %EditInPlace)
    #CALL(%SetClassDefaults,'EIP_'&%ControlField ,'EditInPlace::'&%ControlField,%GetEIPDefaults(%EditInPlaceType))
  #ENDIF
 #ENDIF
#ENDIF
#!--------------------------------------------------------------
#GROUP(%BrowseEIPManagerVirtuals, %TreeText, %DataText, %CodeText)
#EMBED(%BrowserEIPManagerMethodDataSection,'Browse EIP Manager Method Data Section'),%ActiveTemplateInstance,%pClassMethod,%pClassMethodPrototype,LABEL,DATA,PREPARE(,,%FixClassName(%FixBaseClassToUse('CWEIPManager'))),TREE(%TreeText & %DataText)
  #?CODE
  #EMBED(%BrowserEIPManagerMethodCodeSection,'Browse EIP Manager Method Executable Code Section'),%ActiveTemplateInstance,%pClassMethod,%pClassMethodPrototype,PREPARE(,,%FixClassName(%FixBaseClassToUse('CWEIPManager'))),TREE(%TreeText & %CodeText)
#!
#!
#GROUP(%EIPFieldVirtuals, %TreeText, %DataText, %CodeText)
#EMBED(%EditInPlaceManagerMethodDataSection,'Edit-In-Place Manager Method Executable Data Section'),%ActiveTemplateInstance,%ControlField,%pClassMethod,%pClassMethodPrototype,MAP(%ActiveTemplateInstance,%ActiveTemplateInstanceDescription&' using '&%BaseClassToUse()),MAP(%ControlField,'Edit-In-Place field '&%ControlField),PREPARE(,,%FixClassName(%FixBaseClassToUse('EIP_'&%ControlField))),WHERE(%AllowEIP AND %MethodEmbedPointValid()),TREE(%TreeText & %DataText),NOORDER
  #?CODE
  #EMBED(%EditInPlaceManagerMethodCodeSection,'Edit-In-Place Manager Executable Code Section'),%ActiveTemplateInstance,%ControlField,%pClassMethod,%pClassMethodPrototype,MAP(%ActiveTemplateInstance,%ActiveTemplateInstanceDescription&' using '&%BaseClassToUse()),MAP(%ControlField,'Edit-In-Place field '&%ControlField),WHERE(%AllowEIP AND %MethodEmbedPointValid()),PREPARE(,,%FixClassName(%FixBaseClassToUse('EIP_'&%ControlField))),TREE(%TreeText & %CodeText),NOORDER
#!
#!
#GROUP(%MULTIEIPFieldVirtuals, %TreeText, %DataText, %CodeText)
#EMBED(%MULTIEditInPlaceManagerMethodDataSection,'Edit-In-Place Manager Method Executable Data Section'),%ActiveTemplateInstance,%ControlField,%EditInPlaceMultiControls,%pClassMethod,%pClassMethodPrototype,MAP(%ActiveTemplateInstance,%ActiveTemplateInstanceDescription&' using '&%BaseClassToUse()),MAP(%ControlField,'Edit-In-Place field '&%ControlField),PREPARE(,,%FixClassName(%FixBaseClassToUse('MULTIEIP_'&%ControlField&INSTANCE(%EditInPlaceMultiControls)))),WHERE(%AllowEIP AND %MethodEmbedPointValid()),TREE(%TreeText & %DataText),NOORDER
  #?CODE
  #EMBED(%MULTIEditInPlaceManagerMethodCodeSection,'Edit-In-Place Manager Executable Code Section'),%ActiveTemplateInstance,%ControlField,%EditInPlaceMultiControls,%pClassMethod,%pClassMethodPrototype,MAP(%ActiveTemplateInstance,%ActiveTemplateInstanceDescription&' using '&%BaseClassToUse()),MAP(%ControlField,'Edit-In-Place field '&%ControlField),WHERE(%AllowEIP AND %MethodEmbedPointValid()),PREPARE(,,%FixClassName(%FixBaseClassToUse('MULTIEIP_'&%ControlField&INSTANCE(%EditInPlaceMultiControls)))),TREE(%TreeText & %CodeText),NOORDER
#!
#!----------------------------------------------------------------
#CONTROL(BrowseUpdateButtons,'Update records from a Browse Box'),DESCRIPTION('Update a Record from Browse Box on ' & %Primary),REQ(BrowseBox),HLP('~TPLControlBrowseUpdateButtons.htm')
  CONTROLS
       BUTTON('&Insert'),AT(,,42,12),USE(?Insert)
       BUTTON('&Change'),AT(42,0,42,12),USE(?Change)
       BUTTON('&Delete'),AT(42,0,42,12),USE(?Delete)
  END
#PREPARE
  #IF(%GlobalUseABCClasess)
     #CALL(%ReadABCFiles)
     #IF(%EditInPlace)
        #CALL(%SetClassDefaults, 'CWEIPManager', 'BRW' & %ActiveTemplateParentInstance & '::EIPManager', %CWBrowseEIPManagerType)
     #ENDIF
  #ENDIF
#ENDPREPARE
#BUTTON('Update Buttons'),AT(10,,180)
  #ENABLE(%GlobalUseABCClasess)
    #PROMPT('Use Edit &in Place',CHECK),%EditInPlace,DEFAULT(%False),AT(10)
    #ENABLE(%EditInPlace AND %GlobalUseABCClasess)
      #BUTTON('&Configure Edit in place'),AT(,,180)
        #BOXED('EIP prompts'),HIDE
          #INSERT(%OOPHiddenPrompts)
        #ENDBOXED
        #BOXED
          #SHEET
            #TAB('General')
              #BUTTON('Browse &EIP Manager'),AT(,,180)
                #WITH(%ClassItem, 'CWEIPManager')
                  #INSERT(%ClassPrompts)
                #ENDWITH
              #ENDBUTTON
              #BOXED('Action upon tab at end of row')
                #PROMPT('Save',DROP('Default|Always|Never|Prompted')),%EIPTabAction,DEFAULT('Default')
                #PROMPT('Remain editing',CHECK),%EIPTabRemain,DEFAULT(0)
              #ENDBOXED
              #BOXED('Action upon ENTER key')
                #PROMPT('Save',DROP('Default|Always|Never|Prompted')),%EIPEnterAction,DEFAULT('Default')
                #PROMPT('Remain editing',CHECK),%EIPEnterRemain,DEFAULT(0)
              #ENDBOXED
              #BOXED('Default action upon arrow key')
                #PROMPT('Save',DROP('Default|Always|Never|Prompted')),%EIPArrowAction,DEFAULT('Default')
                #PROMPT('Remain editing',CHECK),%EIPArrowRemain,DEFAULT(1)
                #PROMPT('Retain column',CHECK),%EIPArrowRetain,DEFAULT(1)
              #ENDBOXED
              #BOXED('Action upon focus loss')
                #PROMPT('Save',DROP('Default|Always|Never|Prompted')),%EIPFocusAction,DEFAULT('Default')
              #ENDBOXED
              #PROMPT('Insertion point',DROP('Before|After|Append')),%EIPInsertionPoint,DEFAULT('After')
              #PROMPT('Action on Delete:',DROP('Always|Prompted|Never')),%EIPAskOnDelete,DEFAULT('Always')
              #BUTTON('Field Priming on Insert'),MULTI(%PrimingFields,%PrimedField & ' = ' & %PrimedValue),AT(,,180)
                #PROMPT('Field to Prime:',FIELD),%PrimedField,REQ
                #PROMPT('Initial Value:',@S255),%PrimedValue,REQ
              #ENDBUTTON
            #ENDTAB
            #TAB('Column &Specific')
              #PREPARE
                #FIND(%ControlInstance,%ActiveTemplateParentInstance,%Control)
              #ENDPREPARE
              #BUTTON('Column &Specific'),FROM(%ControlField,%ControlField&' - '&%GetEIPStatus()),AT(,35),INLINE
                #PREPARE
                  #FIND(%ControlInstance,%ActiveTemplateParentInstance,%Control)
                #ENDPREPARE
                #BOXED
                  #SHEET
                    #TAB('General')
                      #PROMPT('&Allow Edit-In-Place',CHECK),%AllowEIP,DEFAULT(%True),AT(45)
                      #ENABLE(%AllowEIP)
                        #PROMPT('&Type:',DROP('Entry|Text|Check|Spin|DropList|DropCombo|Color|File|Font|MultiSelect|Calendar|Lookup|Other')),%EditInPlaceType,WHENACCEPTED(%SetEIPDefaults()),DEFAULT('Entry'),AT(45),PROMPTAT(5,,40)
                        #BOXED,SECTION
                          #BOXED,AT(0,0),WHERE(%EditInPlaceType='Text' OR %EditInPlaceType='Font' OR %EditInPlaceType='Color' OR %EditInPlaceType='MultiSelect' OR %EditInPlaceType='File')
                            #PROMPT('Title:',@s40),%EditInPlaceFEQTitle,AT(45,5),PROMPTAT(5,5,40)
                            #BOXED,SECTION
                              #PROMPT('Justification:',DROP('Default|Left|Right|Centered|Decimal')),%EditInPlaceFEQJust,DEFAULT('Default'),AT(45,5,50),PROMPTAT(5,5,40)
                              #PROMPT('Offset:',@n4),%EditInPlaceFEQOffset,DEFAULT(0),AT(140,5,50),PROMPTAT(100,5,40)
                            #ENDBOXED
                            #BOXED('Options'),SECTION
                              #PROMPT('Transparent',CHECK),%EditInPlaceFEQTransparent,DEFAULT(0),AT(10,3)
                              #PROMPT('ReadOnly',CHECK),%EditInPlaceFEQReadOnly,DEFAULT(0),AT(100,3)
                              #PROMPT('Required',CHECK),%EditInPlaceFEQRequired,DEFAULT(0),AT(10,13)
                            #ENDBOXED
                            #BOXED,SECTION
                              #BOXED,WHERE(%EditInPlaceType='MultiSelect'),AT(10,0)
                                #BUTTON('MultiSelect Options')
                                  #PROMPT('Data Source:',DROP('Queue|Fixed')),%EditInPlaceFEQDataSource,DEFAULT('Fixed')
                                  #BOXED,SECTION
                                    #BOXED,WHERE(%EditInPlaceFEQDataSource='Fixed'),AT(0,0)
                                      #BUTTON('Fixed Data'),MULTI(%EditInPlaceFEQFixedDataSource,CHOOSE(%EditInPlaceFEQFixedDataSourceSelected=1,'X','')&%EditInPlaceFEQFixedDataSourceValue),INLINE
                                        #PROMPT('Value:',@S100),%EditInPlaceFEQFixedDataSourceValue,REQ
                                        #PROMPT('Selected',CHECK),%EditInPlaceFEQFixedDataSourceSelected,DEFAULT(0)
                                      #ENDBUTTON
                                    #ENDBOXED
                                    #BOXED,WHERE(%EditInPlaceFEQDataSource='Queue'),AT(0,0)
                                      #PROMPT('Queue Name:',FIELD),%EditInPlaceFEQQueueDataSourceQN,REQ
                                      #PROMPT('Value Field:',FIELD),%EditInPlaceFEQQueueDataSourceV,REQ
                                      #PROMPT('Selected Field:',FIELD),%EditInPlaceFEQQueueDataSourceS
                                    #ENDBOXED
                                  #ENDBOXED
                                  #PROMPT('Auto Serialize Field',CHECK),%EditInPlaceFEQAutoSerializeField,DEFAULT(0)
                                  #ENABLE(%EditInPlaceFEQAutoSerializeField)
                                    #PROMPT('Field Delimiter:',@S10),%EditInPlaceFEQAutoSerializeFieldDelimiter,REQ
                                  #ENDENABLE
                                #ENDBUTTON
                              #ENDBOXED
                              #BOXED,WHERE(%EditInPlaceType='File'),AT(10,0)
                                #BUTTON('File Dialog Options')
                                  #PROMPT('&Return to original directory when done.',CHECK),%ReturnToOriginalDir,AT(10)
                                  #PROMPT('&Long Filenames',CHECK),%AllowLongFilenames,AT(10),DEFAULT(%True)
                                  #PROMPT('Dialog type',DROP('Open|Save|Directory')),%DOSFileDialogType,DEFAULT('Open')
                                  #ENABLE(%DOSFileDialogType<>'Directory'),CLEAR
                                    #PROMPT('Don''t report &errors',CHECK),%AllowNoError,AT(10),DEFAULT(%False)
                                  #ENDENABLE
                                  #ENABLE(%DOSFileDialogType='Open'),CLEAR
                                    #PROMPT('Multi-Select',CHECK),%AllowMultiSelect,AT(10)
                                  #ENDENABLE
                                  #PROMPT('F&ile Mask Description:',@S40),%DOSMaskDesc,REQ,DEFAULT('All Files')
                                  #PROMPT('Fi&le Mask',@S100),%DOSMask,REQ,DEFAULT('*.*')
                                  #BUTTON('More Fil&e Masks'),AT(98),MULTI(%DOSMoreMasks,%DOSMoreMaskDesc & ' - ' & %DOSMoreMask)
                                    #PROMPT('File Mask Description:',@S40),%DOSMoreMaskDesc,REQ
                                    #PROMPT('File Mask',@S100),%DOSMoreMask,REQ
                                  #ENDBUTTON
                                #ENDBUTTON
                              #ENDBOXED
                            #ENDBOXED
                            #BOXED('Color'),SECTION
                              #PROMPT('&Foreground Normal:',COLOR),%EditInPlaceFEQForegroundNormal,DEFAULT(-1),PROMPTAT(10)
                              #PROMPT('&Background Normal:',COLOR),%EditInPlaceFEQBackgroundNormal,DEFAULT(-1),PROMPTAT(10)
                              #PROMPT('&Foreground Selected:',COLOR),%EditInPlaceFEQForegroundSelected,DEFAULT(-1),PROMPTAT(10)
                              #PROMPT('&Background Selected:',COLOR),%EditInPlaceFEQBackgroundSelected,DEFAULT(-1),PROMPTAT(10)
                            #ENDBOXED
                          #ENDBOXED
                          #BOXED,AT(0,0),WHERE(%EditInPlaceType='DropList' OR %EditInPlaceType='DropCombo')
                            #PROMPT('From:',EXPR),%EditInPlaceFEQFrom,AT(45,5),PROMPTAT(5,5,40)
                            #BOXED,SECTION,WHERE(%EditInPlaceType='DropCombo')
                              #PROMPT('FromColumn:',EXPR),%EditInPlaceFEQColumnFrom,AT(45),PROMPTAT(5,5,40)
                            #ENDBOXED
                            #BOXED,WHERE(%EditInPlaceType='DropCombo')
                              #PROMPT('Picture:',PICTURE),%EditInPlaceFEQPicture,AT(45),PROMPTAT(5,,40)
                            #ENDBOXED
                            #PROMPT('Format:',FORMAT),%EditInPlaceFEQListFormat,AT(45),PROMPTAT(5,,40)
                            #BOXED,SECTION
                              #PROMPT('Justification:',DROP('Default|Left|Right|Centered|Decimal')),%EditInPlaceFEQJust,DEFAULT('Default'),AT(45,5,50),PROMPTAT(5,5,40)
                              #PROMPT('Offset:',@n4),%EditInPlaceFEQOffset,DEFAULT(0),AT(140,5,50),PROMPTAT(100,5,40)
                            #ENDBOXED
                            #BOXED,SECTION
                              #PROMPT('Drop:',@n4),%EditInPlaceFEQDrop,DEFAULT(0),AT(45,5,50),PROMPTAT(5,5,40)
                              #PROMPT('Width:',@n4),%EditInPlaceFEQWidth,DEFAULT(0),AT(140,5,50),PROMPTAT(100,5,40)
                            #ENDBOXED
                            #BOXED,SECTION,WHERE(%EditInPlaceType='DropCombo')
                              #PROMPT('Case:',DROP('Default|Uppercase|Capitalize')),%EditInPlaceFEQCase,DEFAULT('Default'),AT(45,5,50),PROMPTAT(5,5,40)
                            #ENDBOXED
                            #BOXED('Options'),SECTION
                              #PROMPT('Flat',CHECK),%EditInPlaceFEQFlat,DEFAULT(0),AT(10,3)
                              #PROMPT('Transparent',CHECK),%EditInPlaceFEQTransparent,DEFAULT(0),AT(100,3)
                              #PROMPT('HScroll',CHECK),%EditInPlaceFEQHorizontal,DEFAULT(0),AT(10,13)
                              #PROMPT('VScroll',CHECK),%EditInPlaceFEQVertical,DEFAULT(0),AT(100,13)
                              #PROMPT('ReadOnly',CHECK),%EditInPlaceFEQReadOnly,DEFAULT(0),AT(10,23)
                              #PROMPT('Required',CHECK),%EditInPlaceFEQRequired,DEFAULT(0),AT(100,23)
                              #BOXED,WHERE(%EditInPlaceType='DropCombo'),HIDE
                                #PROMPT('Immediate',CHECK),%EditInPlaceFEQImmediate,DEFAULT(0),AT(10,33)
                                #PROMPT('Entry Completion',CHECK),%EditInPlaceFEQEntryCompletion,DEFAULT(0),AT(100,33)
                              #ENDBOXED
                            #ENDBOXED
                            #BUTTON('More Field Assignments...'),Multi(%LookupAssign,%MoreTarget&'  =  '&%MoreField),AT(10,,180)
                              #PROMPT('Target field:',FIELD),%MoreTarget,REQ
                              #PROMPT('Field to fill from:',EXPR),%MoreField,REQ
                            #ENDBUTTON
                            #BOXED('Color'),SECTION
                              #PROMPT('&Foreground Normal:',COLOR),%EditInPlaceFEQForegroundNormal,DEFAULT(-1),PROMPTAT(10)
                              #PROMPT('&Background Normal:',COLOR),%EditInPlaceFEQBackgroundNormal,DEFAULT(-1),PROMPTAT(10)
                              #PROMPT('&Foreground Selected:',COLOR),%EditInPlaceFEQForegroundSelected,DEFAULT(-1),PROMPTAT(10)
                              #PROMPT('&Background Selected:',COLOR),%EditInPlaceFEQBackgroundSelected,DEFAULT(-1),PROMPTAT(10)
                            #ENDBOXED
                          #ENDBOXED
                          #BOXED,AT(0,0),WHERE(%EditInPlaceType='Check')
                            #PROMPT('Text:',@S100),%EditInPlaceFEQFixedDataSourceText,AT(45),PROMPTAT(5,,40)
                            #BOXED,SECTION
                              #PROMPT('Justification:',DROP('Default|Left|Right')),%EditInPlaceFEQCheckJust,DEFAULT('Default'),AT(45,5,50),PROMPTAT(5,5,40)
                            #ENDBOXED
                            #BOXED,SECTION
                              #PROMPT('True:',@s20),%EditInPlaceFEQTrue,AT(45,5,50),PROMPTAT(5,5,40)
                              #PROMPT('False:',@s20),%EditInPlaceFEQFalse,AT(140,5,50),PROMPTAT(100,5,40)
                              #ENABLE(%EditInPlaceFEQTrue AND %EditInPlaceFEQFalse)
                                #PROMPT('Label(True):',@s20),%EditInPlaceFEQTrueLabel,AT(45,20,50),PROMPTAT(5,20,40)
                                #PROMPT('Label(False):',@s20),%EditInPlaceFEQFalseLabel,AT(140,20,50),PROMPTAT(100,20,40)
                              #ENDENABLE
                            #ENDBOXED
                            #BOXED('Options'),SECTION
                              #PROMPT('Flat',CHECK),%EditInPlaceFEQFlat,DEFAULT(0),AT(10,3)
                              #PROMPT('Transparent',CHECK),%EditInPlaceFEQTransparent,DEFAULT(0),AT(100,3)
                              #PROMPT('ReadOnly',CHECK),%EditInPlaceFEQReadOnly,DEFAULT(0),AT(10,13)
                              #PROMPT('Required',CHECK),%EditInPlaceFEQRequired,DEFAULT(0),AT(100,13)
                            #ENDBOXED
                            #BOXED('Color'),SECTION
                              #PROMPT('&Foreground:',COLOR),%EditInPlaceFEQForegroundNormal,DEFAULT(-1),PROMPTAT(10)
                              #PROMPT('&Background:',COLOR),%EditInPlaceFEQBackgroundNormal,DEFAULT(-1),PROMPTAT(10)
                            #ENDBOXED
                          #ENDBOXED
                          #BOXED,AT(0,0),WHERE(%EditInPlaceType='Spin' OR %EditInPlaceType='Entry' OR %EditInPlaceType='Calendar' OR %EditInPlaceType='Other' OR %EditInPlaceType='Lookup')
                            #PROMPT('Picture:',PICTURE),%EditInPlaceFEQPicture,AT(45),PROMPTAT(5,,40)
                            #BOXED,SECTION
                              #PROMPT('Justification:',DROP('Default|Left|Right|Centered|Decimal')),%EditInPlaceFEQJust,DEFAULT('Default'),AT(45,5,50),PROMPTAT(5,5,40)
                              #PROMPT('Offset:',@n4),%EditInPlaceFEQOffset,DEFAULT(0),AT(140,5,50),PROMPTAT(100,5,40)
                            #ENDBOXED
                            #BOXED,SECTION
                              #PROMPT('Case:',DROP('Default|Uppercase|Capitalize')),%EditInPlaceFEQCase,DEFAULT('Default'),AT(45,5,50),PROMPTAT(5,5,40)
                              #PROMPT('Entry Mode:',DROP('Default|Insert|Overwrite')),%EditInPlaceFEQEntryMode,DEFAULT('Default'),AT(140,5,50),PROMPTAT(100,5,40)
                            #ENDBOXED
                            #BOXED,SECTION,WHERE(%EditInPlaceType='Spin')
                              #PROMPT('Lower:',@S12),%EditInPlaceFEQLower,DEFAULT(0),AT(45,5,50),PROMPTAT(5,5,40)
                              #VALIDATE(%EditInPlaceFEQLower AND NUMERIC(%EditInPlaceFEQLower),'Lower value must be a number')
                              #PROMPT('Upper:',@S12),%EditInPlaceFEQUpper,DEFAULT(0),AT(140,5,50),PROMPTAT(100,5,40)
                              #VALIDATE(%EditInPlaceFEQUpper AND NUMERIC(%EditInPlaceFEQUpper),'Upper value must be a number')
                              #PROMPT('Step:',@S12),%EditInPlaceFEQStep,DEFAULT(0),AT(45,20,50),PROMPTAT(5,20,40)
                              #VALIDATE(%EditInPlaceFEQStep AND NUMERIC(%EditInPlaceFEQStep),'Step value must be a number')
                            #ENDBOXED
                            #BOXED('Options'),SECTION
                              #PROMPT('Password',CHECK),%EditInPlaceFEQPassword,DEFAULT(0),AT(10,3)
                              #PROMPT('Transparent',CHECK),%EditInPlaceFEQTransparent,DEFAULT(0),AT(100,3)
                              #PROMPT('ReadOnly',CHECK),%EditInPlaceFEQReadOnly,DEFAULT(0),AT(10,13)
                              #PROMPT('Required',CHECK),%EditInPlaceFEQRequired,DEFAULT(0),AT(100,13)
                            #ENDBOXED
                            #BOXED,WHERE(%EditInPlaceType='Lookup')
                              #BUTTON('Lookup Options')
                                #PROMPT('',OPTION),%LookupType,DEFAULT('Related Field')
                                #PROMPT('Related Field',RADIO),AT(10,5)
                                #PROMPT('Non Related Field',RADIO),AT(100,5)
                                #ENABLE(%LookupType='Related Field')
                                  #PROMPT('Lookup Key',KEY),%PostLookupKey,AT(,25),PROMPTAT(,25)
                                #ENDENABLE
                                #BOXED,SECTION
                                  #BOXED,WHERE(%LookupType='Related Field'),AT(0,0)
                                    #PROMPT('Lookup Field',COMPONENT(%PostLookupKey)),%PostLookupField,REQ
                                  #ENDBOXED
                                  #BOXED,WHERE(%LookupType<>'Related Field'),AT(0,0)
                                    #PROMPT('Lookup Field',FIELD),%PostLookupFieldNoRelated
                                  #ENDBOXED
                                #ENDBOXED
                                #!ENABLE(%PostLookupKey),CLEAR
                                  #PROMPT('Lookup Procedure',PROCEDURE),%PostLookupProcedure,REQ,PROP(PROP:DropWidth,140)
                                  #PROMPT('Procedure Parameters',@S255),%PostLookupProcedureParameters
                                  #DISPLAY('If you want to use the column value like a parameter')
                                  #DISPLAY('use SELF.UseVar')
                                  #!ENABLE(%LookupType='Related Field')
                                    #PROMPT('Procedure Return Value',@S255),%PostLookupProcedureReturnValue
                                  #!ENDENABLE
                                #!ENDENABLE
                                #!PROMPT('Advanced...',EMBEDBUTTON(%ControlPostEventHandling,%Control,'Accepted')),AT(100)
                                #BUTTON('More Field Assignments...'),MULTI(%LookupAssign,%MoreTarget&'  =  '&%MoreField),AT(10,,180)
                                  #PROMPT('Target field:',FIELD),%MoreTarget,REQ
                                  #PROMPT('Field to fill from:',EXPR),%MoreField,REQ
                                  #!PROMPT('Field to fill from:',EDIT(256)),%MoreField,REQ,WHENACCEPTED(%SVExpresionEditor(%MoreField))
                                #ENDBUTTON
                              #ENDBUTTON
                            #ENDBOXED
                            #BOXED('Color'),SECTION
                              #PROMPT('&Foreground Normal:',COLOR),%EditInPlaceFEQForegroundNormal,DEFAULT(-1),PROMPTAT(10)
                              #PROMPT('&Background Normal:',COLOR),%EditInPlaceFEQBackgroundNormal,DEFAULT(-1),PROMPTAT(10)
                              #PROMPT('&Foreground Selected:',COLOR),%EditInPlaceFEQForegroundSelected,DEFAULT(-1),PROMPTAT(10)
                              #PROMPT('&Background Selected:',COLOR),%EditInPlaceFEQBackgroundSelected,DEFAULT(-1),PROMPTAT(10)
                            #ENDBOXED
                          #ENDBOXED
                        #ENDBOXED
                      #ENDENABLE
                    #ENDTAB
                    #TAB('Class')
                      #PREPARE
                        #IF(%AllowEIP AND %EditInPlace)
                          #CALL(%SetEIPDefaults)
                        #ENDIF
                      #ENDPREPARE
                      #ENABLE(%AllowEIP)
                        #WITH(%ClassItem,'EIP_'&%ControlField)
                          #INSERT(%ClassPrompts)
                        #ENDWITH
                      #ENDENABLE
                      #BOXED,HIDE
                        #PROMPT('',@S240),%EIPThisObjectName
                      #ENDBOXED
                    #ENDTAB
                  #ENDSHEET
                #ENDBOXED
              #ENDBUTTON
            #ENDTAB
          #ENDSHEET
        #ENDBOXED
      #ENDBUTTON
    #ENDENABLE
  #ENDENABLE
  #PROMPT('&Update Procedure',PROCEDURE),%UpdateProcedure,PROP(PROP:DropWidth,140)
  #PROMPT('Procedure Parameters',@S255),%UpdateProcedureParameters
  #PROMPT('&Allow Edit via Popup',CHECK),%EditViaPopup,DEFAULT(1)
#ENDBUTTON
#!
#ATSTART
  #DECLARE(%InsertControl)
  #DECLARE(%ChangeControl)
  #DECLARE(%DeleteControl)
  #DECLARE(%InsertText)
  #DECLARE(%ChangeText)
  #DECLARE(%DeleteText)
  #DECLARE(%FirstHandledValue)
  #DECLARE(%LastHandledValue)
  #DECLARE(%AutoIncrementOnAdd)
  #DECLARE(%ClearValue)
  #DECLARE(%SavedField),UNIQUE
  #DECLARE(%lCounter)
  #FOR(%Control),WHERE(%ControlInstance = %ActiveTemplateInstance)
    #CASE(%ControlOriginal)
    #OF('?Insert')
      #SET(%InsertControl,%Control)
      #SET(%InsertText,EXTRACT(%ControlStatement,'BUTTON',1))
      #SET(%InsertText,SUB(%InsertText,2,LEN(%InsertText)-2))
    #OF('?Change')
      #SET(%ChangeControl,%Control)
      #SET(%ChangeText,EXTRACT(%ControlStatement,'BUTTON',1))
      #SET(%ChangeText,SUB(%ChangeText,2,LEN(%ChangeText)-2))
    #OF('?Delete')
      #SET(%DeleteControl,%Control)
      #SET(%DeleteText,EXTRACT(%ControlStatement,'BUTTON',1))
      #SET(%DeleteText,SUB(%DeleteText,2,LEN(%DeleteText)-2))
    #ENDCASE
  #ENDFOR
  #FIND(%ControlInstance,%ActiveTemplateParentInstance,%Control)
  #IF(%GlobalUseABCClasess)
     #IF(%EditInPlace)
        #CALL(%ReadABCFiles)
        #CALL(%SetClassDefaults, 'CWEIPManager', 'BRW' & %ActiveTemplateParentInstance & '::EIPManager', %CWBrowseEIPManagerType)
        #FOR(%ControlField)
          #IF(%AllowEIP)
            #CALL(%SetEIPDefaults)
            #CALL(%SetClassItem, 'EIP_' & %ControlField)
            #SET(%EIPThisObjectName,%ThisObjectName)
          #ENDIF
        #ENDFOR
        #FIX(%File,%Primary)
        #FOR(%Key),WHERE(%KeyAuto)
          #SET(%AutoIncrementOnAdd,%True)
          #BREAK
        #ENDFOR
        #IF(NOT %AutoIncrementOnAdd)
          #IF(EXTRACT(UPPER(%FileUserOptions), UPPER('EmulateAutoNumKey'),1) = '1' OR UPPER(EXTRACT(UPPER(%FileUserOptions), UPPER('EmulateAutoNumKey'),1)) = 'TRUE')
             #FOR(%Field),WHERE(%FieldType<>'MEMO' AND %FieldType<>'BLOB' AND %FieldType<>'END' AND %FieldType<>'GROUP')
                 #IF((EXTRACT(UPPER(%FieldUserOptions), UPPER('IsIdentity'),1) = '1' OR UPPER(EXTRACT(UPPER(%FieldUserOptions), UPPER('IsIdentity'),1)) = 'TRUE') OR EXTRACT(UPPER(%FieldUserOptions), UPPER('ServerAutoIncColumn'),1) <> '')
                       #! EmulateAutoNumKey, this will force the FM to auto insert the record and
                       #! recover the Identity column
                       #SET(%AutoIncrementOnAdd,%True)
                   #BREAK
                 #ENDIF
             #ENDFOR
          #ENDIF
        #ENDIF
     #ENDIF
  #ENDIF
#ENDAT
#AT(%GenerateInstanceUpdate),WHERE(%AcceptToolbarControl AND %GenerateUpdateInstance=0)
  #SET(%GenerateUpdateInstance,%ActiveTemplateInstance)
#ENDAT
#AT(%WindowOtherEventHandling),WHERE(%GenerateUpdateInstance=%ActiveTemplateInstance)
IF ToolBarMode = BrowseMode THEN
  DO UpdateDispatch
END
#ENDAT
#!
#!
#AT(%AssignToolbarButtons,%ActiveTemplateParentInstance),WHERE(%AcceptToolBarControl)
  #IF(%InsertControl)
BrowseButtons.InsertButton = %InsertControl
  #ELSE
BrowseButtons.InsertButton = 0
  #ENDIF
  #IF(%ChangeControl)
BrowseButtons.ChangeButton = %ChangeControl
  #ELSE
BrowseButtons.ChangeButton = 0
  #ENDIF
  #IF(%DeleteControl)
BrowseButtons.DeleteButton = %DeleteControl
  #ELSE
BrowseButtons.DeleteButton = 0
  #ENDIF
#ENDAT
#!
#AT (%InsideDisplayToolbar), WHERE(%GenerateUpdateInstance=%ActiveTemplateInstance)
IF BrowseButtons.InsertButton THEN
  TBarBrwInsert{PROP:Disable} = BrowseButtons.InsertButton{PROP:Disable}
END
IF BrowseButtons.ChangeButton THEN
  TBarBrwChange{PROP:Disable} = BrowseButtons.ChangeButton{PROP:Disable}
END
IF BrowseButtons.DeleteButton THEN
  TBarBrwDelete{PROP:Disable} = BrowseButtons.DeleteButton{PROP:Disable}
END
#ENDAT
#!
#AT(%PrepareAlerts)
  #IF(%InsertControl)
%ListControl{PROP:Alrt,255} = InsertKey
  #ENDIF
  #IF(%DeleteControl)
%ListControl{PROP:Alrt,254} = DeleteKey
  #ENDIF
  #IF(%ChangeControl)
%ListControl{PROP:Alrt,253} = CtrlEnter
%ListControl{PROP:Alrt,252} = MouseLeft2
  #ENDIF
#ENDAT
#AT(%BrowseBoxDoubleClick)
  #IF(%Control=%ListControl)
    #IF(%ChangeControl)
POST(EVENT:Accepted,%ChangeControl)
DO %InstancePrefix:FillBuffer
    #ENDIF
  #ENDIF
#ENDAT
#AT(%ControlEventHandling,%InsertControl,'Accepted')
DO %InstancePrefix:ButtonInsert
#ENDAT
#AT(%ControlEventHandling,%ChangeControl,'Accepted')
DO %InstancePrefix:ButtonChange
#ENDAT
#AT(%ControlEventHandling,%DeleteControl,'Accepted')
DO %InstancePrefix:ButtonDelete
#ENDAT
#AT(%BrowseBoxPopupRecords)
  #IF(%Control=%ListControl AND %EditViaPopup)
    #SET(%ValueConstruct,'')
    #IF(%DeleteControl)
      #SET(%ValueConstruct,%DeleteText)
    #ENDIF
    #IF(%ChangeControl)
      #IF(%ValueConstruct)
        #SET(%ValueConstruct,%ChangeText & '|' & %ValueConstruct)
      #ELSE
        #SET(%ValueConstruct,%ChangeText)
      #ENDIF
    #ENDIF
    #IF(%InsertControl)
      #IF(%ValueConstruct)
        #SET(%ValueConstruct,%InsertText & '|' & %ValueConstruct)
      #ELSE
        #SET(%ValueConstruct,%InsertText)
      #ENDIF
    #ENDIF
    #IF(%ValueConstruct)
IF %InstancePrefix:PopupText
  %InstancePrefix:PopupText = '%ValueConstruct|-|' & %InstancePrefix:PopupText
ELSE
  %InstancePrefix:PopupText = '%ValueConstruct'
END
    #ENDIF
  #ENDIF
#ENDAT
#AT(%BrowseBoxPopupNoRecords)
  #IF(%Control=%ListControl AND %EditViaPopup)
    #SET(%ValueConstruct,'')
    #IF(%DeleteControl)
      #SET(%ValueConstruct,'~' & %DeleteText)
    #ENDIF
    #IF(%ChangeControl)
      #IF(%ValueConstruct)
        #SET(%ValueConstruct,'~' & %ChangeText & '|' & %ValueConstruct)
      #ELSE
        #SET(%ValueConstruct,'~' & %ChangeText)
      #ENDIF
    #ENDIF
    #IF(%InsertControl)
      #IF(%ValueConstruct)
        #SET(%ValueConstruct,%InsertText & '|' & %ValueConstruct)
      #ELSE
        #SET(%ValueConstruct,%InsertText)
      #ENDIF
    #ENDIF
    #IF(%ValueConstruct)
IF %InstancePrefix:PopupText
  %InstancePrefix:PopupText = '%ValueConstruct|-|' & %InstancePrefix:PopupText
ELSE
  %InstancePrefix:PopupText = '%ValueConstruct'
END
    #ENDIF
  #ENDIF
#ENDAT
#AT(%BrowseBoxEditPopupHandling,%ActiveTemplateParentInstance),WHERE(%EditViaPopup)
  #IF(%Control=%ListControl)
    #IF(%InsertControl)
POST(EVENT:Accepted,%InsertControl)
    #ENDIF
    #IF(%ChangeControl)
POST(EVENT:Accepted,%ChangeControl)
    #ENDIF
    #IF(%DeleteControl)
POST(EVENT:Accepted,%DeleteControl)
    #ENDIF
  #ENDIF
#ENDAT
#AT(%BrowseBoxKeyHandling)
  #IF(%Control=%ListControl)
    #IF(%DeleteControl)
OF DeleteKey
  POST(EVENT:Accepted,%DeleteControl)
    #ENDIF
    #IF(%ChangeControl)
OF CtrlEnter
  POST(EVENT:Accepted,%ChangeControl)
    #ENDIF
  #ENDIF
#ENDAT
#AT(%BrowseBoxKeyHandlingNoRecords)
  #IF(%Control=%ListControl)
    #IF(%InsertControl)
OF InsertKey
  POST(EVENT:Accepted,%InsertControl)
    #ENDIF
  #ENDIF
#ENDAT
#AT(%BrowseBoxEmpty)
  #IF(%Control = %ListControl)
    #IF(%ChangeControl)
%ChangeControl{PROP:Disable} = 1
    #ENDIF
    #IF(%DeleteControl)
%DeleteControl{PROP:Disable} = 1
    #ENDIF
  #ENDIF
#ENDAT
#AT(%BrowseBoxNotEmpty)
  #IF(%Control = %ListControl)
    #IF(%ChangeControl)
%ChangeControl{PROP:Disable} = 0
    #ENDIF
    #IF(%DeleteControl)
%DeleteControl{PROP:Disable} = 0
    #ENDIF
  #ENDIF
#ENDAT
#!---------------------- IF EIP IS ON
#!
#AT(%LocalProcedures)
  #IF(%EditInPlace AND %GlobalUseABCClasess)
    #CALL(%GenerateVirtuals, 'CWEIPManager', 'Local Objects|Abc Objects|EIP Manager for Browse Using ' & %ListControl, '%BrowseEIPManagerVirtuals(Clarion)')
    #FIND(%ControlInstance,%ActiveTemplateParentInstance,%Control)
    #FOR(%ControlField),WHERE(%AllowEIP)
      #CALL(%GenerateVirtuals, 'EIP_' & %ControlField, 'Local Objects|Abc Objects|EIP Field Manager for Browse Using ' & %ListControl & ' for field ' & %ControlField, '%EIPFieldVirtuals(Clarion)')
    #ENDFOR
  #ENDIF
#ENDAT
#!
#!
#AT(%LocalDataClasses)
  #IF(%EditInPlace AND %GlobalUseABCClasess)
    #CALL(%GenerateClass, 'CWEIPManager', 'Browse EIP Manager for Browse using ' & %ListControl)
    #FIND(%ControlInstance,%ActiveTemplateParentInstance,%Control)
    #FOR(%ControlField),WHERE(%AllowEIP)
      #CALL(%GenerateClass, 'EIP_'&%ControlField, 'Edit-in-place class for field '&%ControlField)
      #IF(%EditInPlaceType='Calendar')
EIP_%ControlField_Calendar  %CalendarManagerType
      #ENDIF
    #ENDFOR
  #ENDIF
#ENDAT
#!
#!
#AT(%EditInPlaceManagerMethodCodeSection,%ActiveTemplateInstance),PRIORITY(5000),DESCRIPTION('Parent Call'),WHERE(%ParentCallValid())
  #IF(%GlobalUseABCClasess AND %EditInPlace)
  #CALL(%GenerateParentCall)
  #ENDIF
#ENDAT
#!
#!
#AT(%BrowserEIPManagerMethodCodeSection,%ActiveTemplateInstance),PRIORITY(5000),DESCRIPTION('Parent Call'),WHERE(%ParentCallValid())
  #IF(%GlobalUseABCClasess AND %EditInPlace)
  #CALL(%GenerateParentCall)
  #ENDIF
#ENDAT
#!
#!
#AT(%DataSectionBeforeWindow)
#IF(%GlobalUseABCClasess AND %EditInPlace)
BRW%ActiveTemplateParentInstance::UseEIP        BYTE(1)
#INSERT(%SaveButtonRecordHandler,'DECLARE',%Primary,'EIP'&%ActiveTemplateParentInstance&':')
BRW%ActiveTemplateParentInstance::Save:LastInsertedPosition STRING(512)
  #IF(%AutoIncrementOnAdd)
BRW%ActiveTemplateParentInstance::Auto::Attempts       LONG,AUTO
    #FIX(%File,%Primary)
    #FOR(%Key),WHERE(%KeyAuto)
      #FOR(%KeyField)
        #FIX(%SavedField,%KeyField)
        #IF(%SavedField <> %KeyField)
          #ADD(%SavedField,%KeyField)
          #FIX(%Field,%KeyField)
          #IF(%FieldType='GROUP')
BRW%ActiveTemplateParentInstance::Auto::Save:%[12]Field LIKE(%Field),PRE(SV)
          #ELSE
BRW%ActiveTemplateParentInstance::Auto::Save:%[12]Field LIKE(%Field)
          #ENDIF
        #ENDIF
      #ENDFOR
    #ENDFOR
  #ENDIF
#ENDIF
#ENDAT
#AT(%BrowserEIPManagerMethodCodeSection,%ActiveTemplateInstance,'SetQueueRecord','()'),PRIORITY(4500)
#IF(%GlobalUseABCClasess AND %EditInPlace)
DO BRW%ActiveTemplateParentInstance::FillQueue
#ENDIF
#ENDAT
#AT(%BrowserEIPManagerMethodCodeSection,%ActiveTemplateInstance,'ProcessScroll','(LONG pEvent)'),PRIORITY(4500)
#IF(%GlobalUseABCClasess AND %EditInPlace)
BRW%ActiveTemplateParentInstance::CurrentEvent = pEvent
DO BRW%ActiveTemplateParentInstance::ProcessScroll
#ENDIF
#ENDAT
#AT(%BrowserEIPManagerMethodCodeSection,%ActiveTemplateInstance,'ScrollEnd','(LONG pEvent)'),PRIORITY(4500)
#IF(%GlobalUseABCClasess AND %EditInPlace)
BRW%ActiveTemplateParentInstance::CurrentEvent = pEvent
DO BRW%ActiveTemplateParentInstance::ScrollEnd
#ENDIF
#ENDAT
#AT(%BrowserEIPManagerMethodCodeSection,%ActiveTemplateInstance,'PrimeRecord','(),LONG'),PRIORITY(4500)
#IF(%GlobalUseABCClasess AND %EditInPlace)
  #EMBED(%EIPOnInsertBeforePriming,'EIP On Insert, before record is primed'),%ActiveTemplateInstance,MAP(%ActiveTemplateInstance,'Table: '&%Primary)
    #SUSPEND
    #FIX(%File,%Primary)
  #!INSERT(%SaveButtonRecordHandler,'RESET',%Primary)
    #FOR(%Field),WHERE(%FieldInitial)
  %Field = %FieldInitial
    #ENDFOR
    #FOR(%PrimingFields)
  %PrimedField = %PrimedValue
    #ENDFOR
  #INSERT(%SaveButtonRecordHandler,'SET',%Primary,'EIP'&%ActiveTemplateParentInstance&':')
    #RESUME
  #IF(%AutoIncrementOnAdd)
  BRW%ActiveTemplateParentInstance::Auto::Attempts = 0
  LOOP
    #FOR(%Key),WHERE(%KeyAuto)
      #IF(ITEMS(%KeyField)>1)
        #FOR(%KeyField)
          #IF(%KeyField=%KeyAuto)
            #IF(%KeyFieldSequence = 'ASCENDING')
              #SET(%ClearValue,'1')
            #ELSE
              #SET(%Clearvalue,'-1')
            #ENDIF
          #ENDIF
        #ENDFOR
        #FOR(%KeyField),WHERE(%KeyField <> %KeyAuto)
    BRW%ActiveTemplateParentInstance::Auto::Save:%KeyField = %KeyField
        #ENDFOR
    CLEAR(%KeyAuto,%ClearValue)
    SET(%Key,%Key)
        #IF(%ClearValue=1)
    PREVIOUS(%File)
        #ELSE
    NEXT(%File)
        #ENDIF
        #FOR(%KeyField)
          #IF(%KeyField=%KeyAuto)
            #BREAK
          #ENDIF
        #ENDFOR
    IF ERRORCODE() AND ERRORCODE() <> BadRecErr
      StandardWarning(Warn:RecordFetchError,'%File')
      RETURN Level:Fatal
      !POST(Event:CloseWindow)
      !EXIT
    END
        #IF(ITEMS(%KeyField) = 1)
    IF ERRORCODE()
        #ELSE
    IF ERRORCODE() |
        #ENDIF
        #FOR(%KeyField),WHERE(%KeyField <> %KeyAuto)
          #IF(INSTANCE(%KeyField) = ITEMS(%KeyField) - 1)
    OR BRW%ActiveTemplateParentInstance::Auto::Save:%KeyField <> %KeyField
          #ELSE
    OR BRW%ActiveTemplateParentInstance::Auto::Save:%KeyField <> %KeyField |
          #ENDIF
        #ENDFOR
      BRW%ActiveTemplateParentInstance::Auto::Save:%KeyAuto = 1
    ELSE
      BRW%ActiveTemplateParentInstance::Auto::Save:%KeyAuto = %KeyAuto + 1
    END
      #ELSE
    SET(%Key)
        #FOR(%KeyField)
          #IF(%KeyFieldSequence = 'ASCENDING')
    PREVIOUS(%File)
          #ELSE
    NEXT(%File)
          #ENDIF
        #ENDFOR
    IF ERRORCODE() AND ERRORCODE() <> BadRecErr
      StandardWarning(Warn:RecordFetchError,'%File')
      RETURN Level:Fatal
      !POST(Event:CloseWindow)
      !EXIT
    END
    IF ERRORCODE()
      BRW%ActiveTemplateParentInstance::Auto::Save:%KeyAuto = 1
    ELSE
      BRW%ActiveTemplateParentInstance::Auto::Save:%KeyAuto = %KeyAuto + 1
    END
      #ENDIF
    #INSERT(%SaveButtonRecordHandler,'RESET',%Primary,'EIP'&%ActiveTemplateParentInstance&':')
    %KeyAuto = BRW%ActiveTemplateParentInstance::Auto::Save:%KeyAuto
    #INSERT(%SaveButtonRecordHandler,'SET',%Primary,'EIP'&%ActiveTemplateParentInstance&':')
    #ENDFOR
    #EMBED(%EIPBeforeAddAutoIncRecord,'EIP Before Adding Auto-Incremented Record'),%ActiveTemplateInstance,MAP(%ActiveTemplateInstance,'Table: '&%Primary)
    ADD(%Primary)
    IF ERRORCODE()
      BRW%ActiveTemplateParentInstance::Auto::Attempts += 1
      IF BRW%ActiveTemplateParentInstance::Auto::Attempts = 3
        IF StandardWarning(Warn:AutoIncError) = Button:Retry
          BRW%ActiveTemplateParentInstance::Auto::Attempts = 0
        ELSE
          RETURN Level:Fatal!LocalResponse = RequestCancelled
          !EXIT
        END
      END
      CYCLE
    END
    BREAK
  END
  SELF.AutoIncDone = True
  #ENDIF
  #EMBED(%EIPOnInsertAfterPriming,'EIP On Insert, after record is primed'),%ActiveTemplateInstance,MAP(%ActiveTemplateInstance,'Table: '&%Primary)
#ENDIF
#ENDAT
#!
#AT(%BrowserEIPManagerMethodCodeSection,%ActiveTemplateInstance,'SetUp','(*QUEUE pBrowseQueue,SHORT pListControl,*LONG pVCRRequest,*LONG pCurrentChoice,LONG pTabAction,LONG pEnterAction,LONG pArrowAction,LONG pFocusLossAction,LONG pInsertPosition,LONG pDeleteAction)'),PRIORITY(5500)
#IF(%GlobalUseABCClasess AND %EditInPlace)
#FIND(%ControlInstance,%ActiveTemplateParentInstance,%Control)
#FOR(%ControlField)
    #SET(%lCounter,INSTANCE(%ControlField))
    #IF(%AllowEIP)
SELF.AddColumn(%ControlField,BRW%ActiveTemplateParentInstance::%ControlField,%EIPThisObjectName,%(%ControlFieldFieldNo()),0)
    #ELSE
SELF.AddColumn(%ControlField,BRW%ActiveTemplateParentInstance::%ControlField,,%(%ControlFieldFieldNo()),0) ! %ControlField Disable
    #ENDIF
#ENDFOR
#ENDIF
#ENDAT
#AT(%BrowserEIPManagerMethodCodeSection,%ActiveTemplateInstance,'BCPrimaryRestoreBuffer','()'),PRIORITY(4500)
#IF(%GlobalUseABCClasess AND %EditInPlace)
#INSERT(%SaveButtonRecordHandler,'RESET',%Primary,'EIP'&%ActiveTemplateParentInstance&':')
#ENDIF
#ENDAT
#AT(%BrowserEIPManagerMethodCodeSection,%ActiveTemplateInstance,'BCPrimarySaveBuffer','()'),PRIORITY(4500)
#IF(%GlobalUseABCClasess AND %EditInPlace)
#INSERT(%SaveButtonRecordHandler,'SET',%Primary,'EIP'&%ActiveTemplateParentInstance&':')
#ENDIF
#ENDAT
#AT(%BrowserEIPManagerMethodCodeSection,%ActiveTemplateInstance,'BCPrimaryCancelAutoInc','()'),PRIORITY(4500)
#IF(%GlobalUseABCClasess AND %EditInPlace)
    #IF(%AutoIncrementOnAdd)
IF SELF.Req = InsertRecord AND SELF.AutoIncDone THEN
  DELETE(%Primary)
END
    #ENDIF
#ENDIF
#ENDAT
#AT(%BrowserEIPManagerMethodCodeSection,%ActiveTemplateInstance,'BCPrimaryDelete','(BYTE pAsk=0),BYTE'),PRIORITY(5500)
#IF(%GlobalUseABCClasess AND %EditInPlace)
IF pAsk THEN
  IF StandardWarning(Warn:StandardDelete) = Button:OK
    LOOP
      ReturnValue = Level:Fatal !RequestCancelled
      SETCURSOR(Cursor:Wait)
      IF RIDelete:%Primary()
        SETCURSOR()
        CASE StandardWarning(Warn:DeleteError)
        OF Button:Yes
          CYCLE
        OF Button:No OROF Button:Cancel
          BREAK
        END
      ELSE
        SETCURSOR()
        ReturnValue = Level:Benign !RequestCompleted
      END
      BREAK
    END
  END
ELSE
  LOOP
    ReturnValue = Level:Fatal !RequestCancelled
    SETCURSOR(CURSOR:Wait)
    IF RIDelete:%Primary()
      SETCURSOR()
      CASE StandardWarning(Warn:DeleteError)
      OF Button:Yes
        CYCLE
      OF Button:No OROF Button:Cancel
        BREAK
      END
    ELSE
      SETCURSOR()
      ReturnValue = Level:Benign !RequestCompleted
    END
    BREAK
  END
END
#ENDIF
#ENDAT
#AT(%BrowserEIPManagerMethodCodeSection,%ActiveTemplateInstance,'BCPrimaryInsert','(),BYTE'),PRIORITY(5500)
#IF(%GlobalUseABCClasess AND %EditInPlace)
    ReturnValue = Level:Benign
    #IF(%AutoIncrementOnAdd)
    PUT(%Primary)
    #ELSE
    ADD(%Primary)
    #ENDIF
    CASE ERRORCODE()
    OF NoError
      ReturnValue = Level:Benign !RequestCompleted
      !POST(Event:CloseWindow)
    #SUSPEND
    #?OF DupKeyErr
      #DECLARE(%FirstKeyRead)
      #FOR(%Key),WHERE(NOT %KeyDuplicate)
        #IF(%FirstKeyRead)
      ELSIF DUPLICATE(%Key)
        #ELSE
      IF DUPLICATE(%Key)
        #ENDIF
        #IF(%KeyDescription)
        IF StandardWarning(Warn:DuplicateKey,'%KeyDescription')
        #ELSE
        IF StandardWarning(Warn:DuplicateKey,'%Key')
        #ENDIF
          ReturnValue = Level:Fatal
          #EMBED(%InsertCompletedDuplicateKeyError,'Event Completed - Duplicate Key Error'),%ActiveTemplateInstance,HIDE
          !CYCLE
        END
      END
      #ENDFOR
    #RESUME
    ELSE
      IF StandardWarning(Warn:InsertError)
        ReturnValue = Level:Fatal
        #EMBED(%InsertCompletedInsertError,'Event Completed - Insert Error'),%ActiveTemplateInstance,HIDE
      END
    END
#ENDIF
#ENDAT
#AT(%BrowserEIPManagerMethodDataSection,%ActiveTemplateInstance,'BCPrimaryUpdate','(),BYTE'),PRIORITY(4500),WHERE(%GlobalUseABCClasess AND %EditInPlace)
EIP%ActiveTemplateParentInstance:RecordChanged   BYTE
EIP%ActiveTemplateParentInstance:Update::Error   BYTE
#ENDAT
#AT(%BrowserEIPManagerMethodCodeSection,%ActiveTemplateInstance,'BCPrimaryUpdate','(),BYTE'),PRIORITY(5500),WHERE(%GlobalUseABCClasess AND %EditInPlace)
    LOOP
      !LocalResponse = RequestCancelled
      ReturnValue = Level:Fatal
      SETCURSOR(CURSOR:Wait)
      EIP%ActiveTemplateParentInstance:RecordChanged = False
      #INSERT(%SaveButtonRecordHandler,'CHECK',%Primary,'EIP'&%ActiveTemplateParentInstance&':')
      #EMBED(%EIPBeforeUpdateOfPrimary,'EIP Before call to RIUpdate if Record Changed'),%ActiveTemplateInstance,MAP(%ActiveTemplateInstance,'Table: '&%Primary)
      IF EIP%ActiveTemplateParentInstance:RecordChanged THEN
      #!#IF (%HistoryKey)
      #!  Update::Error = RIUpdate:%Primary(1)
      #!#ELSE
        EIP%ActiveTemplateParentInstance:Update::Error = RIUpdate:%Primary()
      #!#ENDIF
      ELSE
        EIP%ActiveTemplateParentInstance:Update::Error = 0
      END
      SETCURSOR()
      IF EIP%ActiveTemplateParentInstance:Update::Error THEN
        IF EIP%ActiveTemplateParentInstance:Update::Error = 1 THEN
          CASE StandardWarning(Warn:UpdateError)
          OF Button:Yes
            CYCLE
          OF Button:No
            ReturnValue = Level:Fatal
            BREAK
          END
        END
        !DISPLAY
        !SELECT(%FirstField)
        #EMBED(%ChangeCompletedUpdateError,'Event Completed - Change Error'),%ActiveTemplateInstance,HIDE
      ELSE
        IF EIP%ActiveTemplateParentInstance:RecordChanged THEN !OR VCRRequest = VCRNone THEN
          !LocalResponse = RequestCompleted
          ReturnValue = Level:Benign
        END
      END
      BREAK
    END
#ENDAT
#!
#AT(%EditInPlaceManagerMethodDataSection,%ActiveTemplateInstance),PRIORITY(5500)
#IF(%GlobalUseABCClasess AND %EditInPlace AND %pClassMethod='Init' AND %pClassMethodPrototype='(UNSIGNED FieldNumber,UNSIGNED ListBox,*? UseVar)')
#INSERT(%EIPConfigureControlData)
#ENDIF
#ENDAT
#AT(%EditInPlaceManagerMethodCodeSection,%ActiveTemplateInstance),PRIORITY(5500)
#IF(%GlobalUseABCClasess AND %EditInPlace)
   #IF(%pClassMethod='CreateControl' AND %pClassMethodPrototype='()')
#INSERT(%EIPConfigureControlListbox)
   #ENDIF
   #IF(%pClassMethod='Init' AND %pClassMethodPrototype='(UNSIGNED FieldNumber,UNSIGNED ListBox,*? UseVar)')
#INSERT(%EIPConfigureControl)
#INSERT(%EIPConfigureControlMultiSelect)
   #ENDIF
   #IF(%pClassMethod='TakeNewSelection' AND %pClassMethodPrototype='()')
#INSERT(%EIPDropTakeNewSelection)
   #ENDIF
#ENDIF
#ENDAT
#AT(%EditInPlaceManagerMethodCodeSection,%ActiveTemplateInstance),PRIORITY(4500),WHERE(%GlobalUseABCClasess AND %EditInPlace AND %pClassMethod='AskLookup' AND %pClassMethodPrototype='(BYTE pForce),BYTE' AND %EditInPlaceType='Lookup')
#!IF(%GlobalUseABCClasess AND %EditInPlace AND %pClassMethod='AskLookup' AND %pClassMethodPrototype='(BYTE pForce),BYTE' AND %EditInPlaceType='Lookup')
  #IF(%LookupType='Related Field')
    #FIND(%Key,%PostLookupKey)
    #IF(%Key)
      #FIND(%Field,%ControlField)
      #IF(%File)
          #FOR(%Relation),WHERE(%RelationKey = %PostLookupKey)
            #IF(%FileRelationType = 'MANY:1')
              #FOR(%FileKeyField),WHERE(%FileKeyFieldLink)
                #IF(%FileKeyFieldLink = %PostLookupField)
                  #BREAK
                #ENDIF
    %FileKeyFieldLink = %FileKeyField
              #ENDFOR
            #ENDIF
          #ENDFOR
    UPDATE(SELF.FEQ)
      #ENDIF
    #ENDIF
  #ELSE
    IF pForce
       GlobalRequest = SelectRecord
       UPDATE(SELF.FEQ)
  #ENDIF
       #PRIORITY(4550),DESCRIPTION('Lookup Field Assignment')
  #IF(%LookupType='Related Field')
    #FIND(%Key,%PostLookupKey)
    #IF(%Key)
      #FIND(%Field,%ControlField)
      #IF(%File)
    %PostLookupField = SELF.UseVar
        #FIND(%Key,%PostLookupKey)
    GET(%File,%Key)
    IF ERRORCODE() OR pForce
       GlobalRequest = SelectRecord
          #IF(%PostLookupProcedureParameters)
       %PostLookupProcedure(%PostLookupProcedureParameters)
          #ELSE
       %PostLookupProcedure
          #ENDIF
       IF GlobalResponse = RequestCompleted
          #FIND(%Field,%ControlField)
          #FOR(%Relation),WHERE(%RelationKey = %PostLookupKey)
            #IF(%FileRelationType = 'MANY:1')
              #FOR(%FileKeyField),WHERE(%FileKeyFieldLink)
                #IF(%FileKeyFieldLink = %PostLookupField)
                  #BREAK
                #ENDIF
           %FileKeyField = %FileKeyFieldLink
              #ENDFOR
            #ENDIF
          #ENDFOR
       #ENDIF
    #ENDIF
  #ELSE
          #IF(%PostLookupFieldNoRelated)
       %PostLookupFieldNoRelated = SELF.UseVar
          #ENDIF
          #IF(%PostLookupProcedureParameters)
            #IF(%PostLookupProcedureReturnValue)
       %PostLookupProcedureReturnValue = %PostLookupProcedure(%PostLookupProcedureParameters)
            #ELSE
       %PostLookupProcedure(%PostLookupProcedureParameters)
            #ENDIF
          #ELSE
            #IF(%PostLookupProcedureReturnValue)
       %PostLookupProcedureReturnValue = %PostLookupProcedure
            #ELSE
       %PostLookupProcedure
            #ENDIF
          #ENDIF
       IF GlobalResponse = RequestCompleted
  #ENDIF
           #PRIORITY(4600),DESCRIPTION('Target Field Assignment')
  #IF(%LookupType='Related Field')
    #FIND(%Key,%PostLookupKey)
    #IF(%Key)
      #FIND(%Field,%ControlField)
      #IF(%File)
           #INSERT(%MoreAssignEIP)
           SELF.UseVar = %PostLookupField
           ReturnValue = EditAction:Ignore
       ELSE
           ReturnValue = EditAction:None
       END
    ELSE
       #INSERT(%MoreAssignEIP)
       ReturnValue = EditAction:Ignore
    END
    RETURN ReturnValue
      #ENDIF
    #ENDIF
  #ELSE
           #INSERT(%MoreAssignEIP)
          #IF(%PostLookupFieldNoRelated)
           SELF.UseVar = %PostLookupField
          #ENDIF
           ReturnValue = EditAction:Ignore
       ELSE
           ReturnValue = EditAction:None
       END
    ELSE
       #INSERT(%MoreAssignEIP)
       ReturnValue = EditAction:Ignore
    END
    RETURN ReturnValue
  #ENDIF
#!ENDIF
#ENDAT
#AT(%EditInPlaceManagerMethodCodeSection,%ActiveTemplateInstance),PRIORITY(4500),WHERE(%GlobalUseABCClasess AND %EditInPlace AND %pClassMethod='GetDynamicLabel' AND %pClassMethodPrototype='(*? UseVar),STRING')
#INSERT(%EIPConfigureCheck)
#ENDAT
#!---------------------- END EIP
#AT(%ProcedureRoutines)

  #IF(%GenerateUpdateInstance=%ActiveTemplateInstance)
UpdateDispatch ROUTINE
  DISABLE(TBarBrwDelete)
  DISABLE(TBarBrwChange)
  IF BrowseButtons.DeleteButton AND BrowseButtons.DeleteButton{PROP:Disable} = 0 THEN
    ENABLE(TBarBrwDelete)
  END
  IF BrowseButtons.ChangeButton AND BrowseButtons.ChangeButton{PROP:Disable} = 0 THEN
    ENABLE(TBarBrwChange)
  END
    #IF ( UPPER(%ProcedureTemplate)='FORM' )
  #EMBED (%StartOfBrowseFormFilter), HIDE
  IF FOCUS() <> BrowseButtons.ListBox THEN  ! List box must have focus when on update form
    EXIT
  END
  #EMBED (%EndOfBrowseFormFilter), HIDE
    #ENDIF
  IF INRANGE(ACCEPTED(),TBarBrwInsert,TBarBrwDelete) THEN         !trap remote browse update control calls
    EXECUTE(ACCEPTED()-TBarBrwInsert+1)
      POST(EVENT:Accepted,BrowseButtons.InsertButton)
      POST(EVENT:Accepted,BrowseButtons.ChangeButton)
      POST(EVENT:Accepted,BrowseButtons.DeleteButton)
    END
  END
  #ENDIF
  #IF(%InsertControl)
!----------------------------------------------------------------
%InstancePrefix:ButtonInsert ROUTINE
!|
!| This routine calls the BrowseBox's update procedure (as specified in the
!| BrowseUpdateButtons control template) to insert a new record.
!|
!| First, the primary file's record  buffer is cleared, as well as any memos
!| or BLOBs. Next, any range-limit values are restored so that the inserted
!| record defaults to being added to the current display set.
!|
!| Next, LocalRequest is set to InsertRecord, and the %InstancePrefix:CallRecord routine
!| is called. This routine performs the actual call to the update procedure.
!|
!| If the insert is successful (GlobalRequest = RequestCompleted) then the newly added
!| record is displayed in the BrowseBox, at the top of the listbox.
!|
!| If the insert is not successful, the current page of the browse is refreshed.
!|
!| Finally, The BrowseBox is re-initialized, resetting scroll bars and totals.
!|
  GET(%Primary,0)
    #FIX(%File,%Primary)
  CLEAR(%FilePrefix:Record,0)
    #FOR(%Field),WHERE(%FieldType='MEMO')
  CLEAR(%Field)
    #ENDFOR
    #FOR(%Field),WHERE(%FieldType='BLOB')
  %Field{PROP:Size} = 0
    #ENDFOR
    #SUSPEND
  #?CASE %InstancePrefix:SortOrder
      #FOR(%BrowseAccessID)
        #SUSPEND
  #?OF %BrowseAccessID
          #FOR(%BrowseRangeLimitField)
    %BrowseRangeLimitField = %BrowsePrefix:Reset:%BrowseRangeLimitValue
          #ENDFOR
        #RESUME
      #ENDFOR
  #?END
    #RESUME
  LocalRequest = InsertRecord
  #EMBED(%BrowseBeforeInsert,'Browse Box, Before Insert'),%ActiveTemplateInstance,MAP(%ActiveTemplateInstance,%ActivetemplateInstanceDescription)
  DO %InstancePrefix:CallUpdate
  #EMBED(%BrowseAfterInsert,'Browse Box, After Insert'),%ActiveTemplateInstance,MAP(%ActiveTemplateInstance,%ActivetemplateInstanceDescription)
  IF GlobalResponse = RequestCompleted
    %InstancePrefix:LocateMode = LocateOnEdit
    DO %InstancePrefix:LocateRecord
  ELSE
    %InstancePrefix:RefreshMode = RefreshOnQueue
    DO %InstancePrefix:RefreshPage
  END
  DO %InstancePrefix:InitializeBrowse
  DO %InstancePrefix:PostNewSelection
  SELECT(%ListControl)
  LocalRequest = OriginalRequest
  LocalResponse = RequestCancelled
  DO RefreshWindow
  #ENDIF
  #IF(%ChangeControl)
!----------------------------------------------------------------
%InstancePrefix:ButtonChange ROUTINE
!|
!| This routine calls the BrowseBox's update procedure (as specified in the
!| BrowseUpdateButtons control template) to change a selected record.
!|
!| Whenever a button is pressed, the first thing that happens is that the
!| SyncWindow routine is called. This routine insures that the BrowseBox's
!| VIEW corresponds to the highlighted record by calling the %InstancePrefix:GetRecord routine.
!|
!| First, LocalRequest is set to ChangeRecord, and the %InstancePrefix:CallRecord routine
!| is called. This routine performs the actual call to the update procedure.
!|
!| If the change is successful (GlobalRequest = RequestCompleted) then the newly changed
!| record is displayed in the BrowseBox.
!|
!| If the change is not successful, the current page of the browse is refreshed.
!|
!| Finally, The BrowseBox is re-initialized, resetting scroll bars and totals.
!|
  LocalRequest = ChangeRecord
  #EMBED(%BrowseBeforeChange,'Browse Box, Before Change'),%ActiveTemplateInstance,MAP(%ActiveTemplateInstance,%ActivetemplateInstanceDescription)
  DO %InstancePrefix:CallUpdate
  #EMBED(%BrowseAfterChange,'Browse Box, After Change'),%ActiveTemplateInstance,MAP(%ActiveTemplateInstance,%ActivetemplateInstanceDescription)
  IF GlobalResponse = RequestCompleted
    %InstancePrefix:LocateMode = LocateOnEdit
    DO %InstancePrefix:LocateRecord
  ELSE
    %InstancePrefix:RefreshMode = RefreshOnQueue
    DO %InstancePrefix:RefreshPage
  END
  DO %InstancePrefix:InitializeBrowse
  DO %InstancePrefix:PostNewSelection
  SELECT(%ListControl)
  LocalRequest = OriginalRequest
  LocalResponse = RequestCancelled
  DO RefreshWindow
  #ENDIF
  #IF(%DeleteControl)
!----------------------------------------------------------------
%InstancePrefix:ButtonDelete ROUTINE
!|
!| This routine calls the BrowseBox's update procedure (as specified in the
!| BrowseUpdateButtons control template) to delete a selected record.
!|
!| Whenever a button is pressed, the first thing that happens is that the
!| SyncWindow routine is called. This routine insures that the BrowseBox's
!| VIEW corresponds to the highlighted record by calling the %InstancePrefix:GetRecord routine.
!|
!| First, LocalRequest is set to DeleteRecord, and the %InstancePrefix:CallRecord routine
!| is called. This routine performs the actual call to the update procedure.
!|
!| If the delete is successful (GlobalRequest = RequestCompleted) then the deleted record is
!| removed from the queue.
!|
!| Next, the BrowseBox is refreshed, redisplaying the current page.
!|
!| Finally, The BrowseBox is re-initialized, resetting scroll bars and totals.
!|
  LocalRequest = DeleteRecord
  #EMBED(%BrowseBeforeDelete,'Browse Box, Before Delete'),%ActiveTemplateInstance,MAP(%ActiveTemplateInstance,%ActivetemplateInstanceDescription)
  DO %InstancePrefix:CallUpdate
  #EMBED(%BrowseAfterDelete,'Browse Box, After Delete'),%ActiveTemplateInstance,MAP(%ActiveTemplateInstance,%ActivetemplateInstanceDescription)
  IF GlobalResponse = RequestCompleted
    DELETE(%ListQueue)
    %InstancePrefix:RecordCount -= 1
  END
  %InstancePrefix:RefreshMode = RefreshOnQueue
  DO %InstancePrefix:RefreshPage
  DO %InstancePrefix:InitializeBrowse
  DO %InstancePrefix:PostNewSelection
  SELECT(%ListControl)
  LocalRequest = OriginalRequest
  LocalResponse = RequestCancelled
  DO RefreshWindow
  #ENDIF
!----------------------------------------------------------------
%InstancePrefix:CallUpdate ROUTINE
!|
!| This routine performs the actual call to the update procedure.
!|
!| The first thing that happens is that the VIEW is closed. This is performed just in case
!| the VIEW is still open.
!|
!| Next, GlobalRequest is set the the value of LocalRequest, and the update procedure
!| (%UpdateProcedure) is called.
!|
!| Upon return from the update, the routine %InstancePrefix:Reset is called to reset the VIEW
!| and reopen it.
!|
  #EMBED(%BrowseBoxBeforeUpdate,'Browse Box, before calling the update procedure'),%ActiveTemplateInstance,MAP(%ActiveTemplateInstance,%ActivetemplateInstanceDescription)
  CLOSE(%ListView)
  LOOP
    GlobalRequest = LocalRequest
    VCRRequest = VCRNone
    #IF(%GlobalUseABCClasess AND %EditInPlace)
#! EIP
    IF %InstancePrefix:UseEIP AND LocalRequest <> ViewRecord THEN
       IF KEYCODE() = MouseRightUp OR KEYCODE() = AppsKey
          SETKEYCODE(0)
       END
       #SET(%ValueConstruct,'')
       #IF (%EIPTabRemain OR %EIPTabAction <> 'Default')
          #SET(%ValueConstruct,%ValueConstruct&'EIPAction:'&%EIPTabAction&(CHOOSE(%EIPTabRemain,'+EIPAction:Remain','')))
       #ELSE
          #SET(%ValueConstruct,%ValueConstruct&'EIPAction:Default')
       #ENDIF
       #IF (%EIPEnterRemain OR %EIPEnterAction <> 'Default')
          #SET(%ValueConstruct,%ValueConstruct&',EIPAction:'&%EIPEnterAction&(CHOOSE(%EIPEnterRemain,'+EIPAction:Remain','')))
       #ELSE
          #SET(%ValueConstruct,%ValueConstruct&',EIPAction:Default')
       #ENDIF
       #IF (%EIPArrowAction <> 'Default' OR %EIPArrowRemain OR %EIPArrowRetain)
          #SET(%ValueConstruct,%ValueConstruct&',EIPAction:'&%EIPArrowAction&(CHOOSE(%EIPArrowRemain,'+EIPAction:Remain',''))&(CHOOSE(%EIPArrowRetain,'+EIPAction:RetainColumn','')))
       #ELSE
          #SET(%ValueConstruct,%ValueConstruct&',EIPAction:Default')
       #ENDIF
       #IF (%EIPFocusAction <> 'Default')
          #SET(%ValueConstruct,%ValueConstruct&',EIPAction:'&%EIPFocusAction)
       #ELSE
          #SET(%ValueConstruct,%ValueConstruct&',EIPAction:Default')
       #ENDIF
       #IF (%EIPInsertionPoint <> 'After')
          #SET(%ValueConstruct,%ValueConstruct&',EIPAction:'&%EIPInsertionPoint)
       #ELSE
          #SET(%ValueConstruct,%ValueConstruct&',EIPAction:Default')
       #ENDIF
       #CALL(%SetClassItem, 'CWEIPManager')
       %ThisObjectName.SetUp(%ListQueue,%ListControl,VCRRequest,%InstancePrefix:CurrentChoice,%ValueConstruct,EIPAction:%EIPAskOnDelete)
       GlobalResponse = %ThisObjectName.Run(LocalRequest)
    ELSE
        #IF(%UpdateProcedureParameters)
       %UpdateProcedure(%UpdateProcedureParameters)
        #ELSE
       %UpdateProcedure
        #ENDIF
    END
    #ELSE
        #IF(%UpdateProcedureParameters)
    %UpdateProcedure(%UpdateProcedureParameters)
        #ELSE
    %UpdateProcedure
        #ENDIF
        #!ASSERT(%UpdateProcedure,'The browse '&%InstancePrefix&' on '&%Procedure&' does not have an Update Procedure')
    #ENDIF
    LocalResponse = GlobalResponse
    CASE VCRRequest
    OF VCRNone
      BREAK
    OF VCRInsert
      IF LocalRequest = ChangeRecord THEN
        LocalRequest = InsertRecord
      END
    OROF VCRForward
      IF LocalRequest = InsertRecord THEN
        GET(%Primary,0)
    #FIX(%File,%Primary)
        CLEAR(%FilePrefix:Record,0)
    #FOR(%Field),WHERE(%FieldType='MEMO')
        CLEAR(%Field)
    #ENDFOR
    #FOR(%Field),WHERE(%FieldType='BLOB')
        %Field{PROP:Size} = 0
    #ENDFOR
      ELSE
        DO %InstancePrefix:PostVCREdit1
        %InstancePrefix:CurrentEvent = EVENT:ScrollDown
        DO %InstancePrefix:ScrollOne
        DO %InstancePrefix:PostVCREdit2
      END
    OF VCRBackward
      DO %InstancePrefix:PostVCREdit1
      %InstancePrefix:CurrentEvent = EVENT:ScrollUp
      DO %InstancePrefix:ScrollOne
      DO %InstancePrefix:PostVCREdit2
    OF VCRPageForward
      DO %InstancePrefix:PostVCREdit1
      %InstancePrefix:CurrentEvent = EVENT:PageDown
      DO %InstancePrefix:ScrollPage
      DO %InstancePrefix:PostVCREdit2
    OF VCRPageBackward
      DO %InstancePrefix:PostVCREdit1
      %InstancePrefix:CurrentEvent = EVENT:PageUp
      DO %InstancePrefix:ScrollPage
      DO %InstancePrefix:PostVCREdit2
    OF VCRFirst
      DO %InstancePrefix:PostVCREdit1
      %InstancePrefix:CurrentEvent = EVENT:ScrollTop
      DO %InstancePrefix:ScrollEnd
      DO %InstancePrefix:PostVCREdit2
    OF VCRLast
      DO %InstancePrefix:PostVCREdit1
      %InstancePrefix:CurrentEvent = EVENT:ScrollBottom
      DO %InstancePrefix:ScrollEND
      DO %InstancePrefix:PostVCREdit2
    END
  END
  DO %InstancePrefix:Reset
  #EMBED(%BrowseBoxAfterUpdate,'Browse Box, returning from the update procedure'),%ActiveTemplateInstance,MAP(%ActiveTemplateInstance,%ActivetemplateInstanceDescription)

%InstancePrefix:PostVCREdit1 ROUTINE
  DO %InstancePrefix:Reset
  %InstancePrefix:LocateMode = LocateOnEdit
  DO %InstancePrefix:LocateRecord
  DO RefreshWindow

%InstancePrefix:PostVCREdit2 ROUTINE
  %ListControl{PROP:SelStart} = %InstancePrefix:CurrentChoice
  DO %InstancePrefix:NewSelection
  REGET(%ListView,%InstancePrefix:Position)
  CLOSE(%ListView)

#ENDAT
#!
#!
#!
#GROUP(%EIPConfigureControlListbox)
    #IF(%EditInPlaceType='DropList' OR %EditInPlaceType='DropCombo')
        #IF(%EditInPlaceFEQFrom)
          #IF(%EditInPlaceType='DropCombo')
            #IF(%EditInPlaceFEQFrom)
                #IF(%EditInPlaceFEQColumnFrom)
SELF.SetFrom(%EditInPlaceFEQFrom,%EditInPlaceFEQColumnFrom)
                #ELSE
SELF.SetFrom(%EditInPlaceFEQFrom)
                #ENDIF
            #ENDIF
            #IF(%EditInPlaceFEQEntryCompletion)
SELF.SetEntryCompletion(%(CHOOSE(%EditInPlaceFEQEntryCompletion,'True','False')))
            #ENDIF
          #ELSE
SELF.FEQ{PROP:From} = %EditInPlaceFEQFrom
          #ENDIF
        #ENDIF
        #IF(%EditInPlaceFEQListFormat)
SELF.FEQ{PROP:Format} = '%(QUOTE(%EditInPlaceFEQListFormat))'
        #ENDIF
        #IF(%EditInPlaceFEQDrop)
SELF.FEQ{PROP:Drop} = %EditInPlaceFEQDrop
        #ENDIF
        #IF(%EditInPlaceFEQWidth)
SELF.FEQ{PROP:DropWidth} = %EditInPlaceFEQWidth
        #ENDIF
        #IF(%EditInPlaceFEQHorizontal)
SELF.FEQ{PROP:HScroll} = True
        #ENDIF
        #IF(%EditInPlaceFEQVertical)
SELF.FEQ{PROP:VScroll} = True
        #ENDIF
        #IF(%EditInPlaceFEQImmediate AND %EditInPlaceType='DropCombo')
SELF.FEQ{PROP:Imm} = True
        #ENDIF
        #IF(%EditInPlaceType='DropCombo')
            #CASE(%EditInPlaceFEQCase)
            #OF('Uppercase')
SELF.FEQ{PROP:Upr} = True
            #OF('Capitalize')
SELF.FEQ{PROP:Cap} = True
            #ENDCASE
        #ENDIF
    #ENDIF
#GROUP(%EIPConfigureControl),AUTO
#DECLARE(%DOSDialogSetings)
    #IF(%EditInPlaceFEQJust<>'Default' AND %EditInPlaceType<>'Check')
        #CASE(%EditInPlaceFEQJust)
        #OF('Left')
SELF.FEQ{PROP:Left} = True
        #OF('Right')
SELF.FEQ{PROP:Right} = True
        #OF('Centered')
SELF.FEQ{PROP:Center} = True
        #OF('Decimal')
SELF.FEQ{PROP:Decimal} = True
        #ENDCASE
    #ENDIF
    #IF(%EditInPlaceFEQOffset AND %EditInPlaceType<>'Check')
        #CASE(%EditInPlaceFEQJust)
        #OF('Left')
SELF.FEQ{PROP:Left,2} = %EditInPlaceFEQOffset
        #OF('Right')
SELF.FEQ{PROP:Right,2} = %EditInPlaceFEQOffset
        #OF('Centered')
SELF.FEQ{PROP:Center,2} = %EditInPlaceFEQOffset
        #OF('Decimal')
SELF.FEQ{PROP:Decimal,2} = %EditInPlaceFEQOffset
        #ENDCASE
    #ENDIF
    #IF(%EditInPlaceType='Check')
        #CASE(%EditInPlaceFEQCheckJust)
        #OF('Left')
SELF.FEQ{PROP:Left} = True
        #OF('Right')
SELF.FEQ{PROP:Right} = True
        #ENDCASE
        #IF(%EditInPlaceFEQTrue)
SELF.FEQ{PROP:TrueValue} = %(%StripPling(%EditInPlaceFEQTrue))
        #ENDIF
        #IF(%EditInPlaceFEQFalse)
SELF.FEQ{PROP:FalseValue} = %(%StripPling(%EditInPlaceFEQFalse))
        #ENDIF
    #ENDIF
    #IF(%EditInPlaceFEQTransparent)
SELF.FEQ{PROP:Trn} = True
    #ENDIF
    #IF(%EditInPlaceFEQForegroundNormal<>-1)
SELF.FEQ{PROP:FontColor} = %EditInPlaceFEQForegroundNormal
    #ENDIF
    #IF(%EditInPlaceFEQBackgroundNormal<>-1)
SELF.FEQ{PROP:Background} = %EditInPlaceFEQBackgroundNormal
    #ENDIF
    #IF(%EditInPlaceType<>'Check')
       #IF(%EditInPlaceFEQForegroundSelected<>-1)
SELF.FEQ{PROP:SelectedColor} = %EditInPlaceFEQForegroundSelected
       #ENDIF
       #IF(%EditInPlaceFEQBackgroundSelected<>-1)
SELF.FEQ{PROP:SelectedFillColor} = %EditInPlaceFEQBackgroundSelected
       #ENDIF
    #ELSE
       #IF(%EditInPlaceFEQFixedDataSourceText)
SELF.FEQ{PROP:Text} = %EditInPlaceFEQFixedDataSourceText
       #ENDIF
    #ENDIF
    #IF(%EditInPlaceType<>'Entry' AND %EditInPlaceFEQFlat)
SELF.FEQ{PROP:Flat} = True
    #ENDIF
    #IF(%EditInPlaceType<>'DropList' AND %EditInPlaceType<>'Check')
       #IF(%EditInPlaceFEQPicture AND %EditInPlaceType<>'Text')
SELF.FEQ{PROP:Text} = '%(QUOTE(%EditInPlaceFEQPicture))'
       #ENDIF
       #CASE(%EditInPlaceFEQCase)
       #OF('Uppercase')
SELF.FEQ{PROP:Upr} = True
       #OF('Capitalize')
SELF.FEQ{PROP:Cap} = True
       #ENDCASE
       #CASE(%EditInPlaceFEQEntryMode)
       #OF('Insert')
SELF.FEQ{PROP:Ins} = True
       #OF('Overwrite')
SELF.FEQ{PROP:Ovr} = True
       #ENDCASE
       #IF(%EditInPlaceFEQPassword)
SELF.FEQ{PROP:Password} = True
       #ENDIF
    #ENDIF
    #IF(%EditInPlaceType='Spin')
        #IF(%EditInPlaceFEQLower)
SELF.FEQ{PROP:RangeLow} = %EditInPlaceFEQLower
        #ENDIF
        #IF(%EditInPlaceFEQUpper)
SELF.FEQ{PROP:RangeHigh} = %EditInPlaceFEQUpper
        #ENDIF
        #IF(%EditInPlaceFEQStep)
SELF.FEQ{PROP:Step} = %EditInPlaceFEQStep
        #ENDIF
    #ENDIF
#CASE(%EditInPlaceType)
#OF('Text')
#OROF('Font')
#OROF('Color')
#OROF('MultiSelect')
#OROF('File')
    #IF(%EditInPlaceFEQTitle)
SELF.Title = '%(QUOTE(%EditInPlaceFEQTitle))'
    #ENDIF
    #IF(%EditInPlaceType='File')
      #SET(%DOSDialogSetings,'')
      #IF(%ReturnToOriginalDir)
         #SET(%DOSDialogSetings,'FILE:KeepDIR')
      #ENDIF
      #IF(%AllowLongFilenames)
         #IF(%DOSDialogSetings)
            #SET(%DOSDialogSetings,CLIP(%DOSDialogSetings)&'+FILE:LongName')
         #ELSE
            #SET(%DOSDialogSetings,'FILE:LongName')
         #ENDIF
      #ENDIF
      #CASE(%DOSFileDialogType)
      #OF('Open')
      #OF('Save')
         #IF(%DOSDialogSetings)
            #SET(%DOSDialogSetings,CLIP(%DOSDialogSetings)&'+FILE:Save')
         #ELSE
            #SET(%DOSDialogSetings,'FILE:Save')
         #ENDIF
      #OF('Directory')
         #IF(%DOSDialogSetings)
            #SET(%DOSDialogSetings,CLIP(%DOSDialogSetings)&'+FILE:Directory')
         #ELSE
            #SET(%DOSDialogSetings,'FILE:Directory')
         #ENDIF
      #ENDCASE
      #IF(%AllowMultiSelect)
         #IF(%DOSDialogSetings)
            #SET(%DOSDialogSetings,CLIP(%DOSDialogSetings)&'+FILE:Multi')
         #ELSE
            #SET(%DOSDialogSetings,'FILE:Multi')
         #ENDIF
      #ENDIF
      #IF(%AllowNoError)
         #IF(%DOSDialogSetings)
            #SET(%DOSDialogSetings,CLIP(%DOSDialogSetings)&'+FILE:NoError')
         #ELSE
            #SET(%DOSDialogSetings,'FILE:NoError')
         #ENDIF
      #ENDIF
      #IF(%DOSDialogSetings)
SELF.FileMask = %DOSDialogSetings
      #ENDIF
      #IF(%DOSMask AND %DOSMaskDesc)
          #SET(%DOSDialogSetings,%DOSMaskDesc&'|'&%DOSMask)
      #ENDIF
      #FOR(%DOSMoreMasks)
          #IF(%DOSDialogSetings)
              #SET(%DOSDialogSetings,CLIP(%DOSDialogSetings)&'|'&%DOSMoreMaskDesc&'|'&%DOSMoreMask)
          #ELSE
              #SET(%DOSDialogSetings,%DOSMoreMaskDesc&'|'&%DOSMoreMask)
          #ENDIF
      #ENDFOR
      #IF(%DOSDialogSetings)
SELF.FilePattern = '%(QUOTE(%DOSDialogSetings))'
      #ENDIF
    #ENDIF
#ENDCASE
#IF(%EditInPlaceFEQRequired)
SELF.REQ = True
#ENDIF
#IF(%EditInPlaceFEQReadOnly)
SELF.SetReadOnly(True)
#ENDIF
#IF(%EditInPlaceType='Calendar')
SELF.SetCalendar(EIP_%ControlField_Calendar)
#ENDIF
#!
#GROUP(%EIPConfigureControlMultiSelect),AUTO
#IF(%EditInPlaceType='MultiSelect')
    #IF(%EditInPlaceFEQDataSource='Fixed')
        #FOR(%EditInPlaceFEQFixedDataSource),WHERE(%EditInPlaceFEQFixedDataSourceValue)
SELF.AddValue('%(QUOTE(%EditInPlaceFEQFixedDataSourceValue))', %EditInPlaceFEQFixedDataSourceSelected)
        #ENDFOR
    #ELSE
LOOP lMultiSelectIndex = 1 TO RECORDS(%EditInPlaceFEQQueueDataSourceQN)
    GET(%EditInPlaceFEQQueueDataSourceQN,lMultiSelectIndex)
    IF NOT ERRORCODE() THEN
       SELF.AddValue(%EditInPlaceFEQQueueDataSourceQN.%EditInPlaceFEQQueueDataSourceV, %EditInPlaceFEQQueueDataSourceQN.%EditInPlaceFEQQueueDataSourceS)
    END
END
    #ENDIF
    #IF(%EditInPlaceFEQAutoSerializeField)
SELF.Delimiter = %(%StripPling(%EditInPlaceFEQAutoSerializeFieldDelimiter))
    #ENDIF
#ENDIF
#GROUP(%EIPConfigureControlData)
#IF(%EditInPlaceType='MultiSelect' AND %EditInPlaceFEQDataSource<>'Fixed')
lMultiSelectIndex   LONG(0)
#ENDIF
#!
#GROUP(%EIPConfigureCheck)
#IF(%EditInPlaceType = 'Check')
  #IF(%EditInPlaceFEQTrue AND %EditInPlaceFEQFalse)
IF UseVar = %(%StripPling(%EditInPlaceFEQTrue))
  RETURN %(%StripPling(%EditInPlaceFEQTrueLabel))
ELSE
  RETURN %(%StripPling(%EditInPlaceFEQFalseLabel))
END
  #ENDIF
#ENDIF
#!
#GROUP(%EIPDropTakeNewSelection)
#IF(%EditInPlaceType = 'DropList' OR %EditInPlaceType = 'DropCombo')
  #SUSPEND
  #IF(%EditInPlaceType = 'DropCombo')
#?IF SELF.FeqDropList{PROP:Selected} > 0
  #ELSE
#?IF SELF.Feq{PROP:Selected} > 0
  #ENDIF
  #?GET(%EditInPlaceFEQFrom,0+(SELF.Feq{PROP:Selected}))
  #?IF NOT ERRORCODE()
    #INSERT(%MoreAssignEIP)
  #?END
#?END
  #RESUME
#ENDIF
#!
#!------------------------------------------------------------------------------
#GROUP(%MoreAssignEIP),PRESERVE
#FOR(%LookupAssign)
#FIND(%QueueFieldAssignment,%MoreTarget)
#IF(%QueueFieldAssignment)
%QueueField = %MoreField
#ELSE
%MoreTarget = %MoreField
#ENDIF
#ENDFOR
#!
#!-----------------------------------------------------------------------